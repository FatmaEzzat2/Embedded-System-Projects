
MASTER_APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004c08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000186  00800060  00004c08  00004c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008001e6  008001e6  00004e22  2**0
                  ALLOC
  3 .stab         00006204  00000000  00000000  00004e24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003bba  00000000  00000000  0000b028  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ebe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000ed82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ef74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0001137f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00012705  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000138dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00013a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00013d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014700  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <__vector_1>
       8:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__vector_2>
       c:	0c 94 b6 1e 	jmp	0x3d6c	; 0x3d6c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e0       	ldi	r30, 0x08	; 8
      68:	fc e4       	ldi	r31, 0x4C	; 76
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3e       	cpi	r26, 0xE6	; 230
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ee       	ldi	r26, 0xE6	; 230
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3e       	cpi	r26, 0xEC	; 236
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 02 26 	jmp	0x4c04	; 0x4c04 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cb 25 	jmp	0x4b96	; 0x4b96 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e7 25 	jmp	0x4bce	; 0x4bce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d7 25 	jmp	0x4bae	; 0x4bae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d7 25 	jmp	0x4bae	; 0x4bae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cb 25 	jmp	0x4b96	; 0x4b96 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e7 25 	jmp	0x4bce	; 0x4bce <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d3 25 	jmp	0x4ba6	; 0x4ba6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ef 25 	jmp	0x4bde	; 0x4bde <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d7 25 	jmp	0x4bae	; 0x4bae <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d7 25 	jmp	0x4bae	; 0x4bae <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d7 25 	jmp	0x4bae	; 0x4bae <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 db 25 	jmp	0x4bb6	; 0x4bb6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 d3 25 	jmp	0x4ba6	; 0x4ba6 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ef 25 	jmp	0x4bde	; 0x4bde <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
#include "../../02_HAL/EEPROM/EEPROM.h"
#include "../../02_HAL/LED/LED.h"

#define EEPROM_ADDREESS		0x00

int main(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	2f 97       	sbiw	r28, 0x0f	; 15
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61

	u8 data;
	LED_enumInit();
     e42:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <LED_enumInit>
	EEPROM_WriteSingleData(EEPROM_ADDREESS,0x32);
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	62 e3       	ldi	r22, 0x32	; 50
     e4a:	0e 94 cb 11 	call	0x2396	; 0x2396 <EEPROM_WriteSingleData>
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	aa ef       	ldi	r26, 0xFA	; 250
     e54:	b3 e4       	ldi	r27, 0x43	; 67
     e56:	8b 87       	std	Y+11, r24	; 0x0b
     e58:	9c 87       	std	Y+12, r25	; 0x0c
     e5a:	ad 87       	std	Y+13, r26	; 0x0d
     e5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e60:	7c 85       	ldd	r23, Y+12	; 0x0c
     e62:	8d 85       	ldd	r24, Y+13	; 0x0d
     e64:	9e 85       	ldd	r25, Y+14	; 0x0e
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	4a ef       	ldi	r20, 0xFA	; 250
     e6c:	54 e4       	ldi	r21, 0x44	; 68
     e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	8f 83       	std	Y+7, r24	; 0x07
     e78:	98 87       	std	Y+8, r25	; 0x08
     e7a:	a9 87       	std	Y+9, r26	; 0x09
     e7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e7e:	6f 81       	ldd	r22, Y+7	; 0x07
     e80:	78 85       	ldd	r23, Y+8	; 0x08
     e82:	89 85       	ldd	r24, Y+9	; 0x09
     e84:	9a 85       	ldd	r25, Y+10	; 0x0a
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 e8       	ldi	r20, 0x80	; 128
     e8c:	5f e3       	ldi	r21, 0x3F	; 63
     e8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e92:	88 23       	and	r24, r24
     e94:	2c f4       	brge	.+10     	; 0xea0 <main+0x72>
		__ticks = 1;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	9e 83       	std	Y+6, r25	; 0x06
     e9c:	8d 83       	std	Y+5, r24	; 0x05
     e9e:	3f c0       	rjmp	.+126    	; 0xf1e <main+0xf0>
	else if (__tmp > 65535)
     ea0:	6f 81       	ldd	r22, Y+7	; 0x07
     ea2:	78 85       	ldd	r23, Y+8	; 0x08
     ea4:	89 85       	ldd	r24, Y+9	; 0x09
     ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	3f ef       	ldi	r19, 0xFF	; 255
     eac:	4f e7       	ldi	r20, 0x7F	; 127
     eae:	57 e4       	ldi	r21, 0x47	; 71
     eb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eb4:	18 16       	cp	r1, r24
     eb6:	4c f5       	brge	.+82     	; 0xf0a <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eba:	7c 85       	ldd	r23, Y+12	; 0x0c
     ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e2       	ldi	r20, 0x20	; 32
     ec6:	51 e4       	ldi	r21, 0x41	; 65
     ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	bc 01       	movw	r22, r24
     ed2:	cd 01       	movw	r24, r26
     ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	9e 83       	std	Y+6, r25	; 0x06
     ede:	8d 83       	std	Y+5, r24	; 0x05
     ee0:	0f c0       	rjmp	.+30     	; 0xf00 <main+0xd2>
     ee2:	88 ec       	ldi	r24, 0xC8	; 200
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	9c 83       	std	Y+4, r25	; 0x04
     ee8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	9c 81       	ldd	r25, Y+4	; 0x04
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <main+0xc0>
     ef2:	9c 83       	std	Y+4, r25	; 0x04
     ef4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef6:	8d 81       	ldd	r24, Y+5	; 0x05
     ef8:	9e 81       	ldd	r25, Y+6	; 0x06
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	9e 83       	std	Y+6, r25	; 0x06
     efe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	9e 81       	ldd	r25, Y+6	; 0x06
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	69 f7       	brne	.-38     	; 0xee2 <main+0xb4>
     f08:	14 c0       	rjmp	.+40     	; 0xf32 <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0a:	6f 81       	ldd	r22, Y+7	; 0x07
     f0c:	78 85       	ldd	r23, Y+8	; 0x08
     f0e:	89 85       	ldd	r24, Y+9	; 0x09
     f10:	9a 85       	ldd	r25, Y+10	; 0x0a
     f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	9e 83       	std	Y+6, r25	; 0x06
     f1c:	8d 83       	std	Y+5, r24	; 0x05
     f1e:	8d 81       	ldd	r24, Y+5	; 0x05
     f20:	9e 81       	ldd	r25, Y+6	; 0x06
     f22:	9a 83       	std	Y+2, r25	; 0x02
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	9a 81       	ldd	r25, Y+2	; 0x02
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	f1 f7       	brne	.-4      	; 0xf2a <main+0xfc>
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);

	EEPROM_ReadSingleData(EEPROM_ADDREESS,&data);
     f32:	9e 01       	movw	r18, r28
     f34:	21 5f       	subi	r18, 0xF1	; 241
     f36:	3f 4f       	sbci	r19, 0xFF	; 255
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	b9 01       	movw	r22, r18
     f3c:	0e 94 64 12 	call	0x24c8	; 0x24c8 <EEPROM_ReadSingleData>

	if(data == 0x32){
     f40:	8f 85       	ldd	r24, Y+15	; 0x0f
     f42:	82 33       	cpi	r24, 0x32	; 50
     f44:	29 f4       	brne	.+10     	; 0xf50 <main+0x122>
		LED_enumSetValue(LED1,LED_ON);
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	61 e0       	ldi	r22, 0x01	; 1
     f4a:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LED_enumSetValue>
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <main+0x12a>
	}else{

		LED_enumSetValue(LED1,LED_OFF);
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <LED_enumSetValue>
     f58:	ff cf       	rjmp	.-2      	; 0xf58 <main+0x12a>

00000f5a <Delay>:
/*
*@brief : The function satisfies a certain delay 
*@param : The delay time 
*@return: void
*/
void Delay(double time){
     f5a:	df 93       	push	r29
     f5c:	cf 93       	push	r28
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	2c 97       	sbiw	r28, 0x0c	; 12
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	69 87       	std	Y+9, r22	; 0x09
     f70:	7a 87       	std	Y+10, r23	; 0x0a
     f72:	8b 87       	std	Y+11, r24	; 0x0b
     f74:	9c 87       	std	Y+12, r25	; 0x0c
	long double N = (time * F_CPU)/200;
     f76:	69 85       	ldd	r22, Y+9	; 0x09
     f78:	7a 85       	ldd	r23, Y+10	; 0x0a
     f7a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f7c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	34 e2       	ldi	r19, 0x24	; 36
     f82:	44 ef       	ldi	r20, 0xF4	; 244
     f84:	5a e4       	ldi	r21, 0x4A	; 74
     f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	bc 01       	movw	r22, r24
     f90:	cd 01       	movw	r24, r26
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	48 e4       	ldi	r20, 0x48	; 72
     f98:	53 e4       	ldi	r21, 0x43	; 67
     f9a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	8d 83       	std	Y+5, r24	; 0x05
     fa4:	9e 83       	std	Y+6, r25	; 0x06
     fa6:	af 83       	std	Y+7, r26	; 0x07
     fa8:	b8 87       	std	Y+8, r27	; 0x08
	long double i;
	for( i = 0 ;i < N ; i++);
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	a0 e0       	ldi	r26, 0x00	; 0
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	ab 83       	std	Y+3, r26	; 0x03
     fb8:	bc 83       	std	Y+4, r27	; 0x04
     fba:	10 c0       	rjmp	.+32     	; 0xfdc <Delay+0x82>
     fbc:	69 81       	ldd	r22, Y+1	; 0x01
     fbe:	7a 81       	ldd	r23, Y+2	; 0x02
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9c 81       	ldd	r25, Y+4	; 0x04
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e8       	ldi	r20, 0x80	; 128
     fca:	5f e3       	ldi	r21, 0x3F	; 63
     fcc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	ab 83       	std	Y+3, r26	; 0x03
     fda:	bc 83       	std	Y+4, r27	; 0x04
     fdc:	69 81       	ldd	r22, Y+1	; 0x01
     fde:	7a 81       	ldd	r23, Y+2	; 0x02
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	9c 81       	ldd	r25, Y+4	; 0x04
     fe4:	2d 81       	ldd	r18, Y+5	; 0x05
     fe6:	3e 81       	ldd	r19, Y+6	; 0x06
     fe8:	4f 81       	ldd	r20, Y+7	; 0x07
     fea:	58 85       	ldd	r21, Y+8	; 0x08
     fec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ff0:	88 23       	and	r24, r24
     ff2:	24 f3       	brlt	.-56     	; 0xfbc <Delay+0x62>
     ff4:	2c 96       	adiw	r28, 0x0c	; 12
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <_7SEG_init>:
/*
*@brief  : Function to initialize all Seven Segments
*@param  : void
*@return : Error State
*/
_7_SEG_enumError_t _7SEG_init(void){
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	00 d0       	rcall	.+0      	; 0x100c <_7SEG_init+0x6>
    100c:	00 d0       	rcall	.+0      	; 0x100e <_7SEG_init+0x8>
    100e:	0f 92       	push	r0
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
	_7_SEG_enumError_t _7SEGReturn_enumError = _7SEG_enumNOk;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	8b 83       	std	Y+3, r24	; 0x03
	u8 SEGcounter ;
	u8 PINcounter ;
	
/*The outer loop ---> For looping on the 7 segments*/
for( SEGcounter = 0 ; SEGcounter < NUM_OF_7SEG ; SEGcounter++){
    1018:	1a 82       	std	Y+2, r1	; 0x02
    101a:	6d c1       	rjmp	.+730    	; 0x12f6 <_7SEG_init+0x2f0>
	
/****************Check on The configuration of the seven Segment************/
 if((_7SEGs[SEGcounter].confgType != COMMON_Cathode)&&(_7SEGs[SEGcounter].confgType != COMMON_Anode)){
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	c9 01       	movw	r24, r18
    1024:	82 95       	swap	r24
    1026:	92 95       	swap	r25
    1028:	90 7f       	andi	r25, 0xF0	; 240
    102a:	98 27       	eor	r25, r24
    102c:	80 7f       	andi	r24, 0xF0	; 240
    102e:	98 27       	eor	r25, r24
    1030:	82 0f       	add	r24, r18
    1032:	93 1f       	adc	r25, r19
    1034:	fc 01       	movw	r30, r24
    1036:	e8 58       	subi	r30, 0x88	; 136
    1038:	fe 4f       	sbci	r31, 0xFE	; 254
    103a:	80 81       	ld	r24, Z
    103c:	88 23       	and	r24, r24
    103e:	a9 f0       	breq	.+42     	; 0x106a <_7SEG_init+0x64>
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	c9 01       	movw	r24, r18
    1048:	82 95       	swap	r24
    104a:	92 95       	swap	r25
    104c:	90 7f       	andi	r25, 0xF0	; 240
    104e:	98 27       	eor	r25, r24
    1050:	80 7f       	andi	r24, 0xF0	; 240
    1052:	98 27       	eor	r25, r24
    1054:	82 0f       	add	r24, r18
    1056:	93 1f       	adc	r25, r19
    1058:	fc 01       	movw	r30, r24
    105a:	e8 58       	subi	r30, 0x88	; 136
    105c:	fe 4f       	sbci	r31, 0xFE	; 254
    105e:	80 81       	ld	r24, Z
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	19 f0       	breq	.+6      	; 0x106a <_7SEG_init+0x64>
   _7SEGReturn_enumError = _7SEG_enumWrongConfg;
    1064:	84 e0       	ldi	r24, 0x04	; 4
    1066:	8b 83       	std	Y+3, r24	; 0x03
    1068:	4a c1       	rjmp	.+660    	; 0x12fe <_7SEG_init+0x2f8>
   break;
   
 }else{
    /*The inner loop ---> For looping on the pins of every 7-segment */
    for(PINcounter = 0; PINcounter < NUM_OF_PINS_IN_ONE_SEG ;PINcounter ++){
    106a:	19 82       	std	Y+1, r1	; 0x01
    106c:	3a c1       	rjmp	.+628    	; 0x12e2 <_7SEG_init+0x2dc>
		  
    /****************Check on Port number of every PIN************/
	 if((_7SEGs[SEGcounter].PINs[PINcounter].Port > DIO_enumPortD )||(_7SEGs[SEGcounter].PINs[PINcounter].Port<DIO_enumPortA))
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	ac 01       	movw	r20, r24
    107c:	44 0f       	add	r20, r20
    107e:	55 1f       	adc	r21, r21
    1080:	c9 01       	movw	r24, r18
    1082:	82 95       	swap	r24
    1084:	92 95       	swap	r25
    1086:	90 7f       	andi	r25, 0xF0	; 240
    1088:	98 27       	eor	r25, r24
    108a:	80 7f       	andi	r24, 0xF0	; 240
    108c:	98 27       	eor	r25, r24
    108e:	82 0f       	add	r24, r18
    1090:	93 1f       	adc	r25, r19
    1092:	84 0f       	add	r24, r20
    1094:	95 1f       	adc	r25, r21
    1096:	fc 01       	movw	r30, r24
    1098:	e8 59       	subi	r30, 0x98	; 152
    109a:	fe 4f       	sbci	r31, 0xFE	; 254
    109c:	80 81       	ld	r24, Z
    109e:	84 30       	cpi	r24, 0x04	; 4
    10a0:	18 f0       	brcs	.+6      	; 0x10a8 <_7SEG_init+0xa2>
	 {
	   _7SEGReturn_enumError = _7SEG_enumWrongPort;
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	8b 83       	std	Y+3, r24	; 0x03
    10a6:	21 c1       	rjmp	.+578    	; 0x12ea <_7SEG_init+0x2e4>
	   break;
			  
	 /****************Check on Pin number of every PIN************/
	 }else if((_7SEGs[SEGcounter].PINs[PINcounter].Pin > DIO_enumPin7 )||(_7SEGs[SEGcounter].PINs[PINcounter].Pin<DIO_enumPin0))
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	ac 01       	movw	r20, r24
    10b6:	44 0f       	add	r20, r20
    10b8:	55 1f       	adc	r21, r21
    10ba:	c9 01       	movw	r24, r18
    10bc:	82 95       	swap	r24
    10be:	92 95       	swap	r25
    10c0:	90 7f       	andi	r25, 0xF0	; 240
    10c2:	98 27       	eor	r25, r24
    10c4:	80 7f       	andi	r24, 0xF0	; 240
    10c6:	98 27       	eor	r25, r24
    10c8:	82 0f       	add	r24, r18
    10ca:	93 1f       	adc	r25, r19
    10cc:	84 0f       	add	r24, r20
    10ce:	95 1f       	adc	r25, r21
    10d0:	fc 01       	movw	r30, r24
    10d2:	e7 59       	subi	r30, 0x97	; 151
    10d4:	fe 4f       	sbci	r31, 0xFE	; 254
    10d6:	80 81       	ld	r24, Z
    10d8:	88 30       	cpi	r24, 0x08	; 8
    10da:	18 f0       	brcs	.+6      	; 0x10e2 <_7SEG_init+0xdc>
	 {
	   _7SEGReturn_enumError = _7SEG_enumWrongPin;
    10dc:	83 e0       	ldi	r24, 0x03	; 3
    10de:	8b 83       	std	Y+3, r24	; 0x03
    10e0:	04 c1       	rjmp	.+520    	; 0x12ea <_7SEG_init+0x2e4>
	   break;
	 
	}else{
	  _7SEGReturn_enumError = _7SEG_enumOk;  
    10e2:	1b 82       	std	Y+3, r1	; 0x03
	/*Code Implementation*/
	
/*
Configure the pins of the Seven Segment display as outputs and initialize seven segments with zeros according to their configuration type
*/
	 switch(_7SEGs[SEGcounter].confgType){
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	c9 01       	movw	r24, r18
    10ec:	82 95       	swap	r24
    10ee:	92 95       	swap	r25
    10f0:	90 7f       	andi	r25, 0xF0	; 240
    10f2:	98 27       	eor	r25, r24
    10f4:	80 7f       	andi	r24, 0xF0	; 240
    10f6:	98 27       	eor	r25, r24
    10f8:	82 0f       	add	r24, r18
    10fa:	93 1f       	adc	r25, r19
    10fc:	fc 01       	movw	r30, r24
    10fe:	e8 58       	subi	r30, 0x88	; 136
    1100:	fe 4f       	sbci	r31, 0xFE	; 254
    1102:	80 81       	ld	r24, Z
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	3d 83       	std	Y+5, r19	; 0x05
    110a:	2c 83       	std	Y+4, r18	; 0x04
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	9d 81       	ldd	r25, Y+5	; 0x05
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	09 f4       	brne	.+2      	; 0x1116 <_7SEG_init+0x110>
    1114:	75 c0       	rjmp	.+234    	; 0x1200 <_7SEG_init+0x1fa>
    1116:	2c 81       	ldd	r18, Y+4	; 0x04
    1118:	3d 81       	ldd	r19, Y+5	; 0x05
    111a:	21 30       	cpi	r18, 0x01	; 1
    111c:	31 05       	cpc	r19, r1
    111e:	09 f0       	breq	.+2      	; 0x1122 <_7SEG_init+0x11c>
    1120:	dd c0       	rjmp	.+442    	; 0x12dc <_7SEG_init+0x2d6>
		 case COMMON_Anode:
		 
		 /*To display zero, the middle LED (PIN 6) needs to be set to High in order to turn it off in case common anode*/
		 if(PINcounter != 6){
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	86 30       	cpi	r24, 0x06	; 6
    1126:	b1 f1       	breq	.+108    	; 0x1194 <_7SEG_init+0x18e>
			 DIO_enumSetPinConfig(_7SEGs[SEGcounter].PINs[PINcounter].Port,_7SEGs[SEGcounter].PINs[PINcounter].Pin,DIO_enumOutputLOW);
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	ac 01       	movw	r20, r24
    1136:	44 0f       	add	r20, r20
    1138:	55 1f       	adc	r21, r21
    113a:	c9 01       	movw	r24, r18
    113c:	82 95       	swap	r24
    113e:	92 95       	swap	r25
    1140:	90 7f       	andi	r25, 0xF0	; 240
    1142:	98 27       	eor	r25, r24
    1144:	80 7f       	andi	r24, 0xF0	; 240
    1146:	98 27       	eor	r25, r24
    1148:	82 0f       	add	r24, r18
    114a:	93 1f       	adc	r25, r19
    114c:	84 0f       	add	r24, r20
    114e:	95 1f       	adc	r25, r21
    1150:	fc 01       	movw	r30, r24
    1152:	e8 59       	subi	r30, 0x98	; 152
    1154:	fe 4f       	sbci	r31, 0xFE	; 254
    1156:	60 81       	ld	r22, Z
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	ac 01       	movw	r20, r24
    1166:	44 0f       	add	r20, r20
    1168:	55 1f       	adc	r21, r21
    116a:	c9 01       	movw	r24, r18
    116c:	82 95       	swap	r24
    116e:	92 95       	swap	r25
    1170:	90 7f       	andi	r25, 0xF0	; 240
    1172:	98 27       	eor	r25, r24
    1174:	80 7f       	andi	r24, 0xF0	; 240
    1176:	98 27       	eor	r25, r24
    1178:	82 0f       	add	r24, r18
    117a:	93 1f       	adc	r25, r19
    117c:	84 0f       	add	r24, r20
    117e:	95 1f       	adc	r25, r21
    1180:	fc 01       	movw	r30, r24
    1182:	e7 59       	subi	r30, 0x97	; 151
    1184:	fe 4f       	sbci	r31, 0xFE	; 254
    1186:	90 81       	ld	r25, Z
    1188:	86 2f       	mov	r24, r22
    118a:	69 2f       	mov	r22, r25
    118c:	40 e0       	ldi	r20, 0x00	; 0
    118e:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>
    1192:	a4 c0       	rjmp	.+328    	; 0x12dc <_7SEG_init+0x2d6>
		 }else{
			 DIO_enumSetPinConfig(_7SEGs[SEGcounter].PINs[PINcounter].Port,_7SEGs[SEGcounter].PINs[PINcounter].Pin,DIO_enumOutputHIGH);
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	ac 01       	movw	r20, r24
    11a2:	44 0f       	add	r20, r20
    11a4:	55 1f       	adc	r21, r21
    11a6:	c9 01       	movw	r24, r18
    11a8:	82 95       	swap	r24
    11aa:	92 95       	swap	r25
    11ac:	90 7f       	andi	r25, 0xF0	; 240
    11ae:	98 27       	eor	r25, r24
    11b0:	80 7f       	andi	r24, 0xF0	; 240
    11b2:	98 27       	eor	r25, r24
    11b4:	82 0f       	add	r24, r18
    11b6:	93 1f       	adc	r25, r19
    11b8:	84 0f       	add	r24, r20
    11ba:	95 1f       	adc	r25, r21
    11bc:	fc 01       	movw	r30, r24
    11be:	e8 59       	subi	r30, 0x98	; 152
    11c0:	fe 4f       	sbci	r31, 0xFE	; 254
    11c2:	60 81       	ld	r22, Z
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	ac 01       	movw	r20, r24
    11d2:	44 0f       	add	r20, r20
    11d4:	55 1f       	adc	r21, r21
    11d6:	c9 01       	movw	r24, r18
    11d8:	82 95       	swap	r24
    11da:	92 95       	swap	r25
    11dc:	90 7f       	andi	r25, 0xF0	; 240
    11de:	98 27       	eor	r25, r24
    11e0:	80 7f       	andi	r24, 0xF0	; 240
    11e2:	98 27       	eor	r25, r24
    11e4:	82 0f       	add	r24, r18
    11e6:	93 1f       	adc	r25, r19
    11e8:	84 0f       	add	r24, r20
    11ea:	95 1f       	adc	r25, r21
    11ec:	fc 01       	movw	r30, r24
    11ee:	e7 59       	subi	r30, 0x97	; 151
    11f0:	fe 4f       	sbci	r31, 0xFE	; 254
    11f2:	90 81       	ld	r25, Z
    11f4:	86 2f       	mov	r24, r22
    11f6:	69 2f       	mov	r22, r25
    11f8:	41 e0       	ldi	r20, 0x01	; 1
    11fa:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>
    11fe:	6e c0       	rjmp	.+220    	; 0x12dc <_7SEG_init+0x2d6>
		 }
		 break;
		 case COMMON_Cathode:
		 /*To display zero, the middle LED (PIN 6) needs to be set to High in order to turn it off in case common anode*/
         if(PINcounter != 6){
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	86 30       	cpi	r24, 0x06	; 6
    1204:	b1 f1       	breq	.+108    	; 0x1272 <_7SEG_init+0x26c>
	         DIO_enumSetPinConfig(_7SEGs[SEGcounter].PINs[PINcounter].Port,_7SEGs[SEGcounter].PINs[PINcounter].Pin,DIO_enumOutputHIGH);
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	88 2f       	mov	r24, r24
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	ac 01       	movw	r20, r24
    1214:	44 0f       	add	r20, r20
    1216:	55 1f       	adc	r21, r21
    1218:	c9 01       	movw	r24, r18
    121a:	82 95       	swap	r24
    121c:	92 95       	swap	r25
    121e:	90 7f       	andi	r25, 0xF0	; 240
    1220:	98 27       	eor	r25, r24
    1222:	80 7f       	andi	r24, 0xF0	; 240
    1224:	98 27       	eor	r25, r24
    1226:	82 0f       	add	r24, r18
    1228:	93 1f       	adc	r25, r19
    122a:	84 0f       	add	r24, r20
    122c:	95 1f       	adc	r25, r21
    122e:	fc 01       	movw	r30, r24
    1230:	e8 59       	subi	r30, 0x98	; 152
    1232:	fe 4f       	sbci	r31, 0xFE	; 254
    1234:	60 81       	ld	r22, Z
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	ac 01       	movw	r20, r24
    1244:	44 0f       	add	r20, r20
    1246:	55 1f       	adc	r21, r21
    1248:	c9 01       	movw	r24, r18
    124a:	82 95       	swap	r24
    124c:	92 95       	swap	r25
    124e:	90 7f       	andi	r25, 0xF0	; 240
    1250:	98 27       	eor	r25, r24
    1252:	80 7f       	andi	r24, 0xF0	; 240
    1254:	98 27       	eor	r25, r24
    1256:	82 0f       	add	r24, r18
    1258:	93 1f       	adc	r25, r19
    125a:	84 0f       	add	r24, r20
    125c:	95 1f       	adc	r25, r21
    125e:	fc 01       	movw	r30, r24
    1260:	e7 59       	subi	r30, 0x97	; 151
    1262:	fe 4f       	sbci	r31, 0xFE	; 254
    1264:	90 81       	ld	r25, Z
    1266:	86 2f       	mov	r24, r22
    1268:	69 2f       	mov	r22, r25
    126a:	41 e0       	ldi	r20, 0x01	; 1
    126c:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>
    1270:	35 c0       	rjmp	.+106    	; 0x12dc <_7SEG_init+0x2d6>
	     }else{
	         DIO_enumSetPinConfig(_7SEGs[SEGcounter].PINs[PINcounter].Port,_7SEGs[SEGcounter].PINs[PINcounter].Pin,DIO_enumOutputLOW);
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	ac 01       	movw	r20, r24
    1280:	44 0f       	add	r20, r20
    1282:	55 1f       	adc	r21, r21
    1284:	c9 01       	movw	r24, r18
    1286:	82 95       	swap	r24
    1288:	92 95       	swap	r25
    128a:	90 7f       	andi	r25, 0xF0	; 240
    128c:	98 27       	eor	r25, r24
    128e:	80 7f       	andi	r24, 0xF0	; 240
    1290:	98 27       	eor	r25, r24
    1292:	82 0f       	add	r24, r18
    1294:	93 1f       	adc	r25, r19
    1296:	84 0f       	add	r24, r20
    1298:	95 1f       	adc	r25, r21
    129a:	fc 01       	movw	r30, r24
    129c:	e8 59       	subi	r30, 0x98	; 152
    129e:	fe 4f       	sbci	r31, 0xFE	; 254
    12a0:	60 81       	ld	r22, Z
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	ac 01       	movw	r20, r24
    12b0:	44 0f       	add	r20, r20
    12b2:	55 1f       	adc	r21, r21
    12b4:	c9 01       	movw	r24, r18
    12b6:	82 95       	swap	r24
    12b8:	92 95       	swap	r25
    12ba:	90 7f       	andi	r25, 0xF0	; 240
    12bc:	98 27       	eor	r25, r24
    12be:	80 7f       	andi	r24, 0xF0	; 240
    12c0:	98 27       	eor	r25, r24
    12c2:	82 0f       	add	r24, r18
    12c4:	93 1f       	adc	r25, r19
    12c6:	84 0f       	add	r24, r20
    12c8:	95 1f       	adc	r25, r21
    12ca:	fc 01       	movw	r30, r24
    12cc:	e7 59       	subi	r30, 0x97	; 151
    12ce:	fe 4f       	sbci	r31, 0xFE	; 254
    12d0:	90 81       	ld	r25, Z
    12d2:	86 2f       	mov	r24, r22
    12d4:	69 2f       	mov	r22, r25
    12d6:	40 e0       	ldi	r20, 0x00	; 0
    12d8:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>
   _7SEGReturn_enumError = _7SEG_enumWrongConfg;
   break;
   
 }else{
    /*The inner loop ---> For looping on the pins of every 7-segment */
    for(PINcounter = 0; PINcounter < NUM_OF_PINS_IN_ONE_SEG ;PINcounter ++){
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	8f 5f       	subi	r24, 0xFF	; 255
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	88 30       	cpi	r24, 0x08	; 8
    12e6:	08 f4       	brcc	.+2      	; 0x12ea <_7SEG_init+0x2e4>
    12e8:	c2 ce       	rjmp	.-636    	; 0x106e <_7SEG_init+0x68>
	 }
			  		  
	}
   }
   /*Now, We are in the outer loop*/
   if(_7SEGReturn_enumError != _7SEG_enumOk){
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	88 23       	and	r24, r24
    12ee:	39 f4       	brne	.+14     	; 0x12fe <_7SEG_init+0x2f8>
	_7_SEG_enumError_t _7SEGReturn_enumError = _7SEG_enumNOk;
	u8 SEGcounter ;
	u8 PINcounter ;
	
/*The outer loop ---> For looping on the 7 segments*/
for( SEGcounter = 0 ; SEGcounter < NUM_OF_7SEG ; SEGcounter++){
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	8f 5f       	subi	r24, 0xFF	; 255
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	88 23       	and	r24, r24
    12fa:	09 f4       	brne	.+2      	; 0x12fe <_7SEG_init+0x2f8>
    12fc:	8f ce       	rjmp	.-738    	; 0x101c <_7SEG_init+0x16>
   }else{
	   /*do nothing*/
   }
 }
}
 return _7SEGReturn_enumError;
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <_7SEG_enuSetValue>:
/*
*@brief  : Function to Set the value for a specific Seven Segment
*@param  : 7Segment Name and its value
*@return : Error State
*/
_7_SEG_enumError_t _7SEG_enuSetValue(u8 Copy_u8SegName, u8 Value){
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	65 97       	sbiw	r28, 0x15	; 21
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	8d 87       	std	Y+13, r24	; 0x0d
    1326:	6e 87       	std	Y+14, r22	; 0x0e
	
	_7_SEG_enumError_t _7SEGReturn_enumError = _7SEG_enumNOk;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	8a 83       	std	Y+2, r24	; 0x02
	u8 AnodeArr[10]={[0]=0xC0,[1]=0xF9,[2]=0xA4,[3]=0xB0,[4]=0x99,[5]=0x92,[6]=0x82,[7]=0xF8,[8]=0x80,[9]=0x90};
    132c:	9e 01       	movw	r18, r28
    132e:	2d 5f       	subi	r18, 0xFD	; 253
    1330:	3f 4f       	sbci	r19, 0xFF	; 255
    1332:	3a 8b       	std	Y+18, r19	; 0x12
    1334:	29 8b       	std	Y+17, r18	; 0x11
    1336:	8c ed       	ldi	r24, 0xDC	; 220
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	9c 8b       	std	Y+20, r25	; 0x14
    133c:	8b 8b       	std	Y+19, r24	; 0x13
    133e:	9a e0       	ldi	r25, 0x0A	; 10
    1340:	9d 8b       	std	Y+21, r25	; 0x15
    1342:	eb 89       	ldd	r30, Y+19	; 0x13
    1344:	fc 89       	ldd	r31, Y+20	; 0x14
    1346:	00 80       	ld	r0, Z
    1348:	2b 89       	ldd	r18, Y+19	; 0x13
    134a:	3c 89       	ldd	r19, Y+20	; 0x14
    134c:	2f 5f       	subi	r18, 0xFF	; 255
    134e:	3f 4f       	sbci	r19, 0xFF	; 255
    1350:	3c 8b       	std	Y+20, r19	; 0x14
    1352:	2b 8b       	std	Y+19, r18	; 0x13
    1354:	e9 89       	ldd	r30, Y+17	; 0x11
    1356:	fa 89       	ldd	r31, Y+18	; 0x12
    1358:	00 82       	st	Z, r0
    135a:	29 89       	ldd	r18, Y+17	; 0x11
    135c:	3a 89       	ldd	r19, Y+18	; 0x12
    135e:	2f 5f       	subi	r18, 0xFF	; 255
    1360:	3f 4f       	sbci	r19, 0xFF	; 255
    1362:	3a 8b       	std	Y+18, r19	; 0x12
    1364:	29 8b       	std	Y+17, r18	; 0x11
    1366:	3d 89       	ldd	r19, Y+21	; 0x15
    1368:	31 50       	subi	r19, 0x01	; 1
    136a:	3d 8b       	std	Y+21, r19	; 0x15
    136c:	8d 89       	ldd	r24, Y+21	; 0x15
    136e:	88 23       	and	r24, r24
    1370:	41 f7       	brne	.-48     	; 0x1342 <_7SEG_enuSetValue+0x32>
	u8 counter;
		
  /****************Check on the number of the segment************/
  if(Copy_u8SegName > (NUM_OF_7SEG - 1)){
    1372:	8d 85       	ldd	r24, Y+13	; 0x0d
    1374:	88 23       	and	r24, r24
    1376:	19 f0       	breq	.+6      	; 0x137e <_7SEG_enuSetValue+0x6e>
	_7SEGReturn_enumError = _7SEG_enumWrongSegmentNumber;  
    1378:	85 e0       	ldi	r24, 0x05	; 5
    137a:	8a 83       	std	Y+2, r24	; 0x02
    137c:	d5 c0       	rjmp	.+426    	; 0x1528 <_7SEG_enuSetValue+0x218>
	
	 /****************Check on the value************/
  }else if(Value > 9){
    137e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1380:	8a 30       	cpi	r24, 0x0A	; 10
    1382:	18 f0       	brcs	.+6      	; 0x138a <_7SEG_enuSetValue+0x7a>
	 _7SEGReturn_enumError = _7SEG_enumWrongValue ; 
    1384:	86 e0       	ldi	r24, 0x06	; 6
    1386:	8a 83       	std	Y+2, r24	; 0x02
    1388:	cf c0       	rjmp	.+414    	; 0x1528 <_7SEG_enuSetValue+0x218>
	  
  }else{
	  _7SEGReturn_enumError = _7SEG_enumOk ; 
    138a:	1a 82       	std	Y+2, r1	; 0x02
	  
	  /*Code Implementation*/
	  switch(_7SEGs[Copy_u8SegName].confgType){
    138c:	8d 85       	ldd	r24, Y+13	; 0x0d
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	c9 01       	movw	r24, r18
    1394:	82 95       	swap	r24
    1396:	92 95       	swap	r25
    1398:	90 7f       	andi	r25, 0xF0	; 240
    139a:	98 27       	eor	r25, r24
    139c:	80 7f       	andi	r24, 0xF0	; 240
    139e:	98 27       	eor	r25, r24
    13a0:	82 0f       	add	r24, r18
    13a2:	93 1f       	adc	r25, r19
    13a4:	fc 01       	movw	r30, r24
    13a6:	e8 58       	subi	r30, 0x88	; 136
    13a8:	fe 4f       	sbci	r31, 0xFE	; 254
    13aa:	80 81       	ld	r24, Z
    13ac:	e8 2f       	mov	r30, r24
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	f8 8b       	std	Y+16, r31	; 0x10
    13b2:	ef 87       	std	Y+15, r30	; 0x0f
    13b4:	2f 85       	ldd	r18, Y+15	; 0x0f
    13b6:	38 89       	ldd	r19, Y+16	; 0x10
    13b8:	21 15       	cp	r18, r1
    13ba:	31 05       	cpc	r19, r1
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <_7SEG_enuSetValue+0xb0>
    13be:	5c c0       	rjmp	.+184    	; 0x1478 <_7SEG_enuSetValue+0x168>
    13c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c2:	98 89       	ldd	r25, Y+16	; 0x10
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	91 05       	cpc	r25, r1
    13c8:	09 f0       	breq	.+2      	; 0x13cc <_7SEG_enuSetValue+0xbc>
    13ca:	ae c0       	rjmp	.+348    	; 0x1528 <_7SEG_enuSetValue+0x218>
		case COMMON_Anode:
		for(counter = 0;counter<NUM_OF_PINS_IN_ONE_SEG;counter++){
    13cc:	19 82       	std	Y+1, r1	; 0x01
    13ce:	4f c0       	rjmp	.+158    	; 0x146e <_7SEG_enuSetValue+0x15e>
			DIO_enumSetPin(_7SEGs[Copy_u8SegName].PINs[counter].Port,_7SEGs[Copy_u8SegName].PINs[counter].Pin,GET_BIT(AnodeArr[Value],counter));
    13d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	ac 01       	movw	r20, r24
    13de:	44 0f       	add	r20, r20
    13e0:	55 1f       	adc	r21, r21
    13e2:	c9 01       	movw	r24, r18
    13e4:	82 95       	swap	r24
    13e6:	92 95       	swap	r25
    13e8:	90 7f       	andi	r25, 0xF0	; 240
    13ea:	98 27       	eor	r25, r24
    13ec:	80 7f       	andi	r24, 0xF0	; 240
    13ee:	98 27       	eor	r25, r24
    13f0:	82 0f       	add	r24, r18
    13f2:	93 1f       	adc	r25, r19
    13f4:	84 0f       	add	r24, r20
    13f6:	95 1f       	adc	r25, r21
    13f8:	fc 01       	movw	r30, r24
    13fa:	e8 59       	subi	r30, 0x98	; 152
    13fc:	fe 4f       	sbci	r31, 0xFE	; 254
    13fe:	60 81       	ld	r22, Z
    1400:	8d 85       	ldd	r24, Y+13	; 0x0d
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	88 2f       	mov	r24, r24
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	ac 01       	movw	r20, r24
    140e:	44 0f       	add	r20, r20
    1410:	55 1f       	adc	r21, r21
    1412:	c9 01       	movw	r24, r18
    1414:	82 95       	swap	r24
    1416:	92 95       	swap	r25
    1418:	90 7f       	andi	r25, 0xF0	; 240
    141a:	98 27       	eor	r25, r24
    141c:	80 7f       	andi	r24, 0xF0	; 240
    141e:	98 27       	eor	r25, r24
    1420:	82 0f       	add	r24, r18
    1422:	93 1f       	adc	r25, r19
    1424:	84 0f       	add	r24, r20
    1426:	95 1f       	adc	r25, r21
    1428:	fc 01       	movw	r30, r24
    142a:	e7 59       	subi	r30, 0x97	; 151
    142c:	fe 4f       	sbci	r31, 0xFE	; 254
    142e:	40 81       	ld	r20, Z
    1430:	8e 85       	ldd	r24, Y+14	; 0x0e
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	ce 01       	movw	r24, r28
    1438:	03 96       	adiw	r24, 0x03	; 3
    143a:	fc 01       	movw	r30, r24
    143c:	e2 0f       	add	r30, r18
    143e:	f3 1f       	adc	r31, r19
    1440:	80 81       	ld	r24, Z
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	88 2f       	mov	r24, r24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	f9 01       	movw	r30, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <_7SEG_enuSetValue+0x144>
    1450:	f5 95       	asr	r31
    1452:	e7 95       	ror	r30
    1454:	8a 95       	dec	r24
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <_7SEG_enuSetValue+0x140>
    1458:	cf 01       	movw	r24, r30
    145a:	98 2f       	mov	r25, r24
    145c:	91 70       	andi	r25, 0x01	; 1
    145e:	86 2f       	mov	r24, r22
    1460:	64 2f       	mov	r22, r20
    1462:	49 2f       	mov	r20, r25
    1464:	0e 94 70 23 	call	0x46e0	; 0x46e0 <DIO_enumSetPin>
	  _7SEGReturn_enumError = _7SEG_enumOk ; 
	  
	  /*Code Implementation*/
	  switch(_7SEGs[Copy_u8SegName].confgType){
		case COMMON_Anode:
		for(counter = 0;counter<NUM_OF_PINS_IN_ONE_SEG;counter++){
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	8f 5f       	subi	r24, 0xFF	; 255
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	88 30       	cpi	r24, 0x08	; 8
    1472:	08 f4       	brcc	.+2      	; 0x1476 <_7SEG_enuSetValue+0x166>
    1474:	ad cf       	rjmp	.-166    	; 0x13d0 <_7SEG_enuSetValue+0xc0>
    1476:	58 c0       	rjmp	.+176    	; 0x1528 <_7SEG_enuSetValue+0x218>
			DIO_enumSetPin(_7SEGs[Copy_u8SegName].PINs[counter].Port,_7SEGs[Copy_u8SegName].PINs[counter].Pin,GET_BIT(AnodeArr[Value],counter));
		}
		break;  
		case COMMON_Cathode: 
		for(counter = 0;counter<NUM_OF_PINS_IN_ONE_SEG;counter++){
    1478:	19 82       	std	Y+1, r1	; 0x01
    147a:	52 c0       	rjmp	.+164    	; 0x1520 <_7SEG_enuSetValue+0x210>
			DIO_enumSetPin(_7SEGs[Copy_u8SegName].PINs[counter].Port,_7SEGs[Copy_u8SegName].PINs[counter].Pin,GET_BIT(~AnodeArr[Value],counter));
    147c:	8d 85       	ldd	r24, Y+13	; 0x0d
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	ac 01       	movw	r20, r24
    148a:	44 0f       	add	r20, r20
    148c:	55 1f       	adc	r21, r21
    148e:	c9 01       	movw	r24, r18
    1490:	82 95       	swap	r24
    1492:	92 95       	swap	r25
    1494:	90 7f       	andi	r25, 0xF0	; 240
    1496:	98 27       	eor	r25, r24
    1498:	80 7f       	andi	r24, 0xF0	; 240
    149a:	98 27       	eor	r25, r24
    149c:	82 0f       	add	r24, r18
    149e:	93 1f       	adc	r25, r19
    14a0:	84 0f       	add	r24, r20
    14a2:	95 1f       	adc	r25, r21
    14a4:	fc 01       	movw	r30, r24
    14a6:	e8 59       	subi	r30, 0x98	; 152
    14a8:	fe 4f       	sbci	r31, 0xFE	; 254
    14aa:	60 81       	ld	r22, Z
    14ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	88 2f       	mov	r24, r24
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	ac 01       	movw	r20, r24
    14ba:	44 0f       	add	r20, r20
    14bc:	55 1f       	adc	r21, r21
    14be:	c9 01       	movw	r24, r18
    14c0:	82 95       	swap	r24
    14c2:	92 95       	swap	r25
    14c4:	90 7f       	andi	r25, 0xF0	; 240
    14c6:	98 27       	eor	r25, r24
    14c8:	80 7f       	andi	r24, 0xF0	; 240
    14ca:	98 27       	eor	r25, r24
    14cc:	82 0f       	add	r24, r18
    14ce:	93 1f       	adc	r25, r19
    14d0:	84 0f       	add	r24, r20
    14d2:	95 1f       	adc	r25, r21
    14d4:	fc 01       	movw	r30, r24
    14d6:	e7 59       	subi	r30, 0x97	; 151
    14d8:	fe 4f       	sbci	r31, 0xFE	; 254
    14da:	40 81       	ld	r20, Z
    14dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	ce 01       	movw	r24, r28
    14e4:	03 96       	adiw	r24, 0x03	; 3
    14e6:	fc 01       	movw	r30, r24
    14e8:	e2 0f       	add	r30, r18
    14ea:	f3 1f       	adc	r31, r19
    14ec:	80 81       	ld	r24, Z
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	9c 01       	movw	r18, r24
    14f4:	20 95       	com	r18
    14f6:	30 95       	com	r19
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	88 2f       	mov	r24, r24
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	f9 01       	movw	r30, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <_7SEG_enuSetValue+0x1f6>
    1502:	f5 95       	asr	r31
    1504:	e7 95       	ror	r30
    1506:	8a 95       	dec	r24
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <_7SEG_enuSetValue+0x1f2>
    150a:	cf 01       	movw	r24, r30
    150c:	98 2f       	mov	r25, r24
    150e:	91 70       	andi	r25, 0x01	; 1
    1510:	86 2f       	mov	r24, r22
    1512:	64 2f       	mov	r22, r20
    1514:	49 2f       	mov	r20, r25
    1516:	0e 94 70 23 	call	0x46e0	; 0x46e0 <DIO_enumSetPin>
		for(counter = 0;counter<NUM_OF_PINS_IN_ONE_SEG;counter++){
			DIO_enumSetPin(_7SEGs[Copy_u8SegName].PINs[counter].Port,_7SEGs[Copy_u8SegName].PINs[counter].Pin,GET_BIT(AnodeArr[Value],counter));
		}
		break;  
		case COMMON_Cathode: 
		for(counter = 0;counter<NUM_OF_PINS_IN_ONE_SEG;counter++){
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	8f 5f       	subi	r24, 0xFF	; 255
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	88 30       	cpi	r24, 0x08	; 8
    1524:	08 f4       	brcc	.+2      	; 0x1528 <_7SEG_enuSetValue+0x218>
    1526:	aa cf       	rjmp	.-172    	; 0x147c <_7SEG_enuSetValue+0x16c>
		break;  
		default:
		break;  
	  }
  }
 return	_7SEGReturn_enumError;
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
}
    152a:	65 96       	adiw	r28, 0x15	; 21
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <_7SEG_enuSetValueForAllSegs>:
/*
*@brief  : to set a value to all the 7 segments.
*@param  : The value for all 7 segments
*@return : Error State
*/
_7_SEG_enumError_t _7SEG_enuSetValueForAllSegs(u16 Value){
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	27 97       	sbiw	r28, 0x07	; 7
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	9f 83       	std	Y+7, r25	; 0x07
    1552:	8e 83       	std	Y+6, r24	; 0x06
   _7_SEG_enumError_t _7SEGReturn_enumError = _7SEG_enumNOk;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	8d 83       	std	Y+5, r24	; 0x05
   
	u16 temp = Value;
    1558:	8e 81       	ldd	r24, Y+6	; 0x06
    155a:	9f 81       	ldd	r25, Y+7	; 0x07
    155c:	9c 83       	std	Y+4, r25	; 0x04
    155e:	8b 83       	std	Y+3, r24	; 0x03
	u8 DigitsCounter = 0;
    1560:	1a 82       	std	Y+2, r1	; 0x02
	u8 Forcounter = 0;
    1562:	19 82       	std	Y+1, r1	; 0x01
    1564:	0d c0       	rjmp	.+26     	; 0x1580 <_7SEG_enuSetValueForAllSegs+0x44>

 /*Get the number of digits of the value*/ 
	while(Value != 0){
		DigitsCounter++;
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	8f 5f       	subi	r24, 0xFF	; 255
    156a:	8a 83       	std	Y+2, r24	; 0x02
		Value /= 10;	
    156c:	8e 81       	ldd	r24, Y+6	; 0x06
    156e:	9f 81       	ldd	r25, Y+7	; 0x07
    1570:	2a e0       	ldi	r18, 0x0A	; 10
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	b9 01       	movw	r22, r18
    1576:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__udivmodhi4>
    157a:	cb 01       	movw	r24, r22
    157c:	9f 83       	std	Y+7, r25	; 0x07
    157e:	8e 83       	std	Y+6, r24	; 0x06
	u16 temp = Value;
	u8 DigitsCounter = 0;
	u8 Forcounter = 0;

 /*Get the number of digits of the value*/ 
	while(Value != 0){
    1580:	8e 81       	ldd	r24, Y+6	; 0x06
    1582:	9f 81       	ldd	r25, Y+7	; 0x07
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	79 f7       	brne	.-34     	; 0x1566 <_7SEG_enuSetValueForAllSegs+0x2a>
		DigitsCounter++;
		Value /= 10;	
	}
 
 /*Now, we have the number of digits of the value*/
	if(DigitsCounter > NUM_OF_7SEG){
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	82 30       	cpi	r24, 0x02	; 2
    158c:	80 f0       	brcs	.+32     	; 0x15ae <_7SEG_enuSetValueForAllSegs+0x72>
	   _7SEGReturn_enumError = _7SEG_enumWrongValue ;
    158e:	86 e0       	ldi	r24, 0x06	; 6
    1590:	8d 83       	std	Y+5, r24	; 0x05
	   
	   /*Initialize the current Seven Segments with zeros*/
	   for(Forcounter = 0; Forcounter < DigitsCounter;Forcounter++){
    1592:	19 82       	std	Y+1, r1	; 0x01
    1594:	07 c0       	rjmp	.+14     	; 0x15a4 <_7SEG_enuSetValueForAllSegs+0x68>
		   _7SEG_enuSetValue(Forcounter, 0);
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	0e 94 88 09 	call	0x1310	; 0x1310 <_7SEG_enuSetValue>
 /*Now, we have the number of digits of the value*/
	if(DigitsCounter > NUM_OF_7SEG){
	   _7SEGReturn_enumError = _7SEG_enumWrongValue ;
	   
	   /*Initialize the current Seven Segments with zeros*/
	   for(Forcounter = 0; Forcounter < DigitsCounter;Forcounter++){
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	8f 5f       	subi	r24, 0xFF	; 255
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	99 81       	ldd	r25, Y+1	; 0x01
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	98 17       	cp	r25, r24
    15aa:	a8 f3       	brcs	.-22     	; 0x1596 <_7SEG_enuSetValueForAllSegs+0x5a>
    15ac:	20 c0       	rjmp	.+64     	; 0x15ee <_7SEG_enuSetValueForAllSegs+0xb2>
		   _7SEG_enuSetValue(Forcounter, 0);
	   }
	}else{
	  _7SEGReturn_enumError = _7SEG_enumOk;
    15ae:	1d 82       	std	Y+5, r1	; 0x05
	/*Code Implementation*/
		for(Forcounter=0;Forcounter< DigitsCounter;Forcounter++){	 
    15b0:	19 82       	std	Y+1, r1	; 0x01
    15b2:	19 c0       	rjmp	.+50     	; 0x15e6 <_7SEG_enuSetValueForAllSegs+0xaa>
			_7SEG_enuSetValue(Forcounter, (temp % 10));
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	2a e0       	ldi	r18, 0x0A	; 10
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	b9 01       	movw	r22, r18
    15be:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__udivmodhi4>
    15c2:	98 2f       	mov	r25, r24
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	69 2f       	mov	r22, r25
    15c8:	0e 94 88 09 	call	0x1310	; 0x1310 <_7SEG_enuSetValue>
			temp = temp /10;
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	2a e0       	ldi	r18, 0x0A	; 10
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	b9 01       	movw	r22, r18
    15d6:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__udivmodhi4>
    15da:	cb 01       	movw	r24, r22
    15dc:	9c 83       	std	Y+4, r25	; 0x04
    15de:	8b 83       	std	Y+3, r24	; 0x03
		   _7SEG_enuSetValue(Forcounter, 0);
	   }
	}else{
	  _7SEGReturn_enumError = _7SEG_enumOk;
	/*Code Implementation*/
		for(Forcounter=0;Forcounter< DigitsCounter;Forcounter++){	 
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	89 83       	std	Y+1, r24	; 0x01
    15e6:	99 81       	ldd	r25, Y+1	; 0x01
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	98 17       	cp	r25, r24
    15ec:	18 f3       	brcs	.-58     	; 0x15b4 <_7SEG_enuSetValueForAllSegs+0x78>
			_7SEG_enuSetValue(Forcounter, (temp % 10));
			temp = temp /10;
		}
	}
return	_7SEGReturn_enumError;
    15ee:	8d 81       	ldd	r24, Y+5	; 0x05
    15f0:	27 96       	adiw	r28, 0x07	; 7
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <SW_enumInit>:
/**
*@brief : Function to initialize all Switches
*@param : void
*@return: Error State
*/
SW_enumError_t SW_enumInit(void){
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	00 d0       	rcall	.+0      	; 0x1608 <SW_enumInit+0x6>
    1608:	00 d0       	rcall	.+0      	; 0x160a <SW_enumInit+0x8>
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
	
	SW_enumError_t Return_enumError = SW_enumNOk; 
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter;
	
for(counter =0;counter <NUM_OF_SWs;counter++){
    1612:	19 82       	std	Y+1, r1	; 0x01
    1614:	9a c0       	rjmp	.+308    	; 0x174a <SW_enumInit+0x148>
	
/*Check on PORT Number*/
if((SWs[counter].port >DIO_enumPortD)||(SWs[counter].port<DIO_enumPortA)){
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	c9 01       	movw	r24, r18
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	82 0f       	add	r24, r18
    1624:	93 1f       	adc	r25, r19
    1626:	fc 01       	movw	r30, r24
    1628:	e7 58       	subi	r30, 0x87	; 135
    162a:	fe 4f       	sbci	r31, 0xFE	; 254
    162c:	80 81       	ld	r24, Z
    162e:	84 30       	cpi	r24, 0x04	; 4
    1630:	18 f0       	brcs	.+6      	; 0x1638 <SW_enumInit+0x36>
	Return_enumError = SW_enumWrongPort;
    1632:	82 e0       	ldi	r24, 0x02	; 2
    1634:	8a 83       	std	Y+2, r24	; 0x02
    1636:	86 c0       	rjmp	.+268    	; 0x1744 <SW_enumInit+0x142>
	
/*Check on PIN Number*/
}else if((SWs[counter].pin >DIO_enumPin7 )||( SWs[counter].pin < DIO_enumPin0)){
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	c9 01       	movw	r24, r18
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	82 0f       	add	r24, r18
    1646:	93 1f       	adc	r25, r19
    1648:	fc 01       	movw	r30, r24
    164a:	e6 58       	subi	r30, 0x86	; 134
    164c:	fe 4f       	sbci	r31, 0xFE	; 254
    164e:	80 81       	ld	r24, Z
    1650:	88 30       	cpi	r24, 0x08	; 8
    1652:	18 f0       	brcs	.+6      	; 0x165a <SW_enumInit+0x58>
	Return_enumError = SW_enumWrongPin;
    1654:	83 e0       	ldi	r24, 0x03	; 3
    1656:	8a 83       	std	Y+2, r24	; 0x02
    1658:	75 c0       	rjmp	.+234    	; 0x1744 <SW_enumInit+0x142>
	
/*Check on The Configuration Type*/
}else if((SWs[counter].confgType != InternalPullUp)&&(SWs[counter].confgType !=ExternalPullDown)){
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	c9 01       	movw	r24, r18
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	82 0f       	add	r24, r18
    1668:	93 1f       	adc	r25, r19
    166a:	fc 01       	movw	r30, r24
    166c:	e5 58       	subi	r30, 0x85	; 133
    166e:	fe 4f       	sbci	r31, 0xFE	; 254
    1670:	80 81       	ld	r24, Z
    1672:	88 23       	and	r24, r24
    1674:	89 f0       	breq	.+34     	; 0x1698 <SW_enumInit+0x96>
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	c9 01       	movw	r24, r18
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	82 0f       	add	r24, r18
    1684:	93 1f       	adc	r25, r19
    1686:	fc 01       	movw	r30, r24
    1688:	e5 58       	subi	r30, 0x85	; 133
    168a:	fe 4f       	sbci	r31, 0xFE	; 254
    168c:	80 81       	ld	r24, Z
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	19 f0       	breq	.+6      	; 0x1698 <SW_enumInit+0x96>
	Return_enumError = SW_enumWrongConfg;
    1692:	84 e0       	ldi	r24, 0x04	; 4
    1694:	8a 83       	std	Y+2, r24	; 0x02
    1696:	56 c0       	rjmp	.+172    	; 0x1744 <SW_enumInit+0x142>
}else{
	Return_enumError = SW_enumOk;
    1698:	1a 82       	std	Y+2, r1	; 0x02
	switch(SWs[counter].confgType){
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	c9 01       	movw	r24, r18
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	82 0f       	add	r24, r18
    16a8:	93 1f       	adc	r25, r19
    16aa:	fc 01       	movw	r30, r24
    16ac:	e5 58       	subi	r30, 0x85	; 133
    16ae:	fe 4f       	sbci	r31, 0xFE	; 254
    16b0:	80 81       	ld	r24, Z
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	3c 83       	std	Y+4, r19	; 0x04
    16b8:	2b 83       	std	Y+3, r18	; 0x03
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	31 f0       	breq	.+12     	; 0x16ce <SW_enumInit+0xcc>
    16c2:	2b 81       	ldd	r18, Y+3	; 0x03
    16c4:	3c 81       	ldd	r19, Y+4	; 0x04
    16c6:	21 30       	cpi	r18, 0x01	; 1
    16c8:	31 05       	cpc	r19, r1
    16ca:	f9 f0       	breq	.+62     	; 0x170a <SW_enumInit+0x108>
    16cc:	3b c0       	rjmp	.+118    	; 0x1744 <SW_enumInit+0x142>
	case InternalPullUp:
	DIO_enumSetPinConfig(SWs[counter].port,SWs[counter].pin,DIO_enumInputInternalPU);
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	c9 01       	movw	r24, r18
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	82 0f       	add	r24, r18
    16dc:	93 1f       	adc	r25, r19
    16de:	fc 01       	movw	r30, r24
    16e0:	e7 58       	subi	r30, 0x87	; 135
    16e2:	fe 4f       	sbci	r31, 0xFE	; 254
    16e4:	40 81       	ld	r20, Z
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	c9 01       	movw	r24, r18
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	82 0f       	add	r24, r18
    16f4:	93 1f       	adc	r25, r19
    16f6:	fc 01       	movw	r30, r24
    16f8:	e6 58       	subi	r30, 0x86	; 134
    16fa:	fe 4f       	sbci	r31, 0xFE	; 254
    16fc:	90 81       	ld	r25, Z
    16fe:	84 2f       	mov	r24, r20
    1700:	69 2f       	mov	r22, r25
    1702:	42 e0       	ldi	r20, 0x02	; 2
    1704:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>
    1708:	1d c0       	rjmp	.+58     	; 0x1744 <SW_enumInit+0x142>
	break;
	case ExternalPullDown:
	DIO_enumSetPinConfig(SWs[counter].port,SWs[counter].pin,DIO_enumInputExternalPD);
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	c9 01       	movw	r24, r18
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	82 0f       	add	r24, r18
    1718:	93 1f       	adc	r25, r19
    171a:	fc 01       	movw	r30, r24
    171c:	e7 58       	subi	r30, 0x87	; 135
    171e:	fe 4f       	sbci	r31, 0xFE	; 254
    1720:	40 81       	ld	r20, Z
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	c9 01       	movw	r24, r18
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	82 0f       	add	r24, r18
    1730:	93 1f       	adc	r25, r19
    1732:	fc 01       	movw	r30, r24
    1734:	e6 58       	subi	r30, 0x86	; 134
    1736:	fe 4f       	sbci	r31, 0xFE	; 254
    1738:	90 81       	ld	r25, Z
    173a:	84 2f       	mov	r24, r20
    173c:	69 2f       	mov	r22, r25
    173e:	43 e0       	ldi	r20, 0x03	; 3
    1740:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>
SW_enumError_t SW_enumInit(void){
	
	SW_enumError_t Return_enumError = SW_enumNOk; 
	u8 counter;
	
for(counter =0;counter <NUM_OF_SWs;counter++){
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	88 23       	and	r24, r24
    174e:	09 f4       	brne	.+2      	; 0x1752 <SW_enumInit+0x150>
    1750:	62 cf       	rjmp	.-316    	; 0x1616 <SW_enumInit+0x14>
	default:
	break;	
	}
}	
}
return Return_enumError;
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <SW_enumReadSWState>:
/**
*@brief : Function to read The logic state of the switch
*@param : Switch Number and Pointer points to unsigned char passed by address
*@return: Error State
*/
SW_enumError_t SW_enumReadSWState(u8 SW_Name,LogicState_t* Add_Pu8PinValue){
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	00 d0       	rcall	.+0      	; 0x1768 <SW_enumReadSWState+0x6>
    1768:	00 d0       	rcall	.+0      	; 0x176a <SW_enumReadSWState+0x8>
    176a:	0f 92       	push	r0
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	8b 83       	std	Y+3, r24	; 0x03
    1772:	7d 83       	std	Y+5, r23	; 0x05
    1774:	6c 83       	std	Y+4, r22	; 0x04
	
    SW_enumError_t SWReturn_enumError = SW_enumNOk;
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	8a 83       	std	Y+2, r24	; 0x02
	DIO_enumError_t DIOReturn_enumError = DIO_enumNOk;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	89 83       	std	Y+1, r24	; 0x01

	
	/***********Check on the value of the pointer***********/
	if(Add_Pu8PinValue == NULL){
    177e:	8c 81       	ldd	r24, Y+4	; 0x04
    1780:	9d 81       	ldd	r25, Y+5	; 0x05
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	19 f4       	brne	.+6      	; 0x178c <SW_enumReadSWState+0x2a>
		
         SWReturn_enumError = SW_enumNULLPointer;
    1786:	85 e0       	ldi	r24, 0x05	; 5
    1788:	8a 83       	std	Y+2, r24	; 0x02
    178a:	26 c0       	rjmp	.+76     	; 0x17d8 <SW_enumReadSWState+0x76>
	}else{
		
		 SWReturn_enumError = SW_enumOk;
    178c:	1a 82       	std	Y+2, r1	; 0x02
		 /*
		   Add_Pu8PinValue = The address of passed variable from main function 
		 */
		 DIOReturn_enumError= DIO_enumReadState(SWs[SW_Name].port,SWs[SW_Name].pin,Add_Pu8PinValue);
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	c9 01       	movw	r24, r18
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	82 0f       	add	r24, r18
    179c:	93 1f       	adc	r25, r19
    179e:	fc 01       	movw	r30, r24
    17a0:	e7 58       	subi	r30, 0x87	; 135
    17a2:	fe 4f       	sbci	r31, 0xFE	; 254
    17a4:	40 81       	ld	r20, Z
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	c9 01       	movw	r24, r18
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	82 0f       	add	r24, r18
    17b4:	93 1f       	adc	r25, r19
    17b6:	fc 01       	movw	r30, r24
    17b8:	e6 58       	subi	r30, 0x86	; 134
    17ba:	fe 4f       	sbci	r31, 0xFE	; 254
    17bc:	90 81       	ld	r25, Z
    17be:	2c 81       	ldd	r18, Y+4	; 0x04
    17c0:	3d 81       	ldd	r19, Y+5	; 0x05
    17c2:	84 2f       	mov	r24, r20
    17c4:	69 2f       	mov	r22, r25
    17c6:	a9 01       	movw	r20, r18
    17c8:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <DIO_enumReadState>
    17cc:	89 83       	std	Y+1, r24	; 0x01
		 
		 if (DIOReturn_enumError != DIO_enumOk){
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	88 23       	and	r24, r24
    17d2:	11 f0       	breq	.+4      	; 0x17d8 <SW_enumReadSWState+0x76>
             SWReturn_enumError = SW_enumNOk;			 
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	8a 83       	std	Y+2, r24	; 0x02
		 }
	}
	return SWReturn_enumError;
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	0f 90       	pop	r0
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <LED_enumInit>:
/**
*@brief : Function to initialize all LEDs
*@param : void
*@return: Error State
*/
LED_enumError_t LED_enumInit(void){
    17ea:	df 93       	push	r29
    17ec:	cf 93       	push	r28
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <LED_enumInit+0x6>
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
	
	LED_enumError_t Ret_enuError = LED_enumNOk;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	8a 83       	std	Y+2, r24	; 0x02
    u8 counter ;
 

for(counter=0; counter < NUM_Of_LEDs ;counter++){
    17f8:	19 82       	std	Y+1, r1	; 0x01
    17fa:	3b c1       	rjmp	.+630    	; 0x1a72 <LED_enumInit+0x288>
	
/****************Check on Port number************/
  if(( LEDs[counter].port > DIO_enumPortD )||( LEDs[counter].port < DIO_enumPortA)){
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	88 2f       	mov	r24, r24
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	fc 01       	movw	r30, r24
    180c:	e4 58       	subi	r30, 0x84	; 132
    180e:	fe 4f       	sbci	r31, 0xFE	; 254
    1810:	80 81       	ld	r24, Z
    1812:	84 30       	cpi	r24, 0x04	; 4
    1814:	18 f0       	brcs	.+6      	; 0x181c <LED_enumInit+0x32>
	  Ret_enuError = LED_enumWrongPort;
    1816:	82 e0       	ldi	r24, 0x02	; 2
    1818:	8a 83       	std	Y+2, r24	; 0x02
    181a:	28 c1       	rjmp	.+592    	; 0x1a6c <LED_enumInit+0x282>
	  
/****************Check on PIN number************/
  }else if(( LEDs[counter].pin > DIO_enumPin7)||( LEDs[counter].pin < DIO_enumPin0)){
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	88 2f       	mov	r24, r24
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	88 0f       	add	r24, r24
    1828:	99 1f       	adc	r25, r25
    182a:	fc 01       	movw	r30, r24
    182c:	e3 58       	subi	r30, 0x83	; 131
    182e:	fe 4f       	sbci	r31, 0xFE	; 254
    1830:	80 81       	ld	r24, Z
    1832:	88 30       	cpi	r24, 0x08	; 8
    1834:	18 f0       	brcs	.+6      	; 0x183c <LED_enumInit+0x52>
	  Ret_enuError = LED_enumWrongPin;
    1836:	83 e0       	ldi	r24, 0x03	; 3
    1838:	8a 83       	std	Y+2, r24	; 0x02
    183a:	18 c1       	rjmp	.+560    	; 0x1a6c <LED_enumInit+0x282>
	  
/****************Check on LED State ************/
  }else if(( LEDs[counter].state != ActiveHIGH)&&( LEDs[counter].state != ActiveLOW)){
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	88 2f       	mov	r24, r24
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	01 96       	adiw	r24, 0x01	; 1
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	fc 01       	movw	r30, r24
    184e:	e4 58       	subi	r30, 0x84	; 132
    1850:	fe 4f       	sbci	r31, 0xFE	; 254
    1852:	80 81       	ld	r24, Z
    1854:	88 23       	and	r24, r24
    1856:	89 f0       	breq	.+34     	; 0x187a <LED_enumInit+0x90>
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	fc 01       	movw	r30, r24
    186a:	e4 58       	subi	r30, 0x84	; 132
    186c:	fe 4f       	sbci	r31, 0xFE	; 254
    186e:	80 81       	ld	r24, Z
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	19 f0       	breq	.+6      	; 0x187a <LED_enumInit+0x90>
	   Ret_enuError = LED_enumWrongState;	
    1874:	84 e0       	ldi	r24, 0x04	; 4
    1876:	8a 83       	std	Y+2, r24	; 0x02
    1878:	f9 c0       	rjmp	.+498    	; 0x1a6c <LED_enumInit+0x282>
	   
/****************Check on The output ************/
  }else if((LEDs[counter].output != LED_ON)&&(LEDs[counter].output != LED_OFF)){
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	88 2f       	mov	r24, r24
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	fc 01       	movw	r30, r24
    188a:	e1 58       	subi	r30, 0x81	; 129
    188c:	fe 4f       	sbci	r31, 0xFE	; 254
    188e:	80 81       	ld	r24, Z
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	81 f0       	breq	.+32     	; 0x18b4 <LED_enumInit+0xca>
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	88 2f       	mov	r24, r24
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	fc 01       	movw	r30, r24
    18a4:	e1 58       	subi	r30, 0x81	; 129
    18a6:	fe 4f       	sbci	r31, 0xFE	; 254
    18a8:	80 81       	ld	r24, Z
    18aa:	88 23       	and	r24, r24
    18ac:	19 f0       	breq	.+6      	; 0x18b4 <LED_enumInit+0xca>
	  Ret_enuError = LED_enumWrongStatus;
    18ae:	85 e0       	ldi	r24, 0x05	; 5
    18b0:	8a 83       	std	Y+2, r24	; 0x02
    18b2:	dc c0       	rjmp	.+440    	; 0x1a6c <LED_enumInit+0x282>
  }else{
	  Ret_enuError = LED_enumOk;
    18b4:	1a 82       	std	Y+2, r1	; 0x02
	  
	  /*Code Implementation */
	  if((LEDs[counter].state == ActiveHIGH)&&(LEDs[counter].output == LED_OFF)){
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	fc 01       	movw	r30, r24
    18c8:	e4 58       	subi	r30, 0x84	; 132
    18ca:	fe 4f       	sbci	r31, 0xFE	; 254
    18cc:	80 81       	ld	r24, Z
    18ce:	88 23       	and	r24, r24
    18d0:	49 f5       	brne	.+82     	; 0x1924 <LED_enumInit+0x13a>
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	88 2f       	mov	r24, r24
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	fc 01       	movw	r30, r24
    18e2:	e1 58       	subi	r30, 0x81	; 129
    18e4:	fe 4f       	sbci	r31, 0xFE	; 254
    18e6:	80 81       	ld	r24, Z
    18e8:	88 23       	and	r24, r24
    18ea:	e1 f4       	brne	.+56     	; 0x1924 <LED_enumInit+0x13a>
		  
		 DIO_enumSetPinConfig(LEDs[counter].port,LEDs[counter].pin,DIO_enumOutputLOW);
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	88 2f       	mov	r24, r24
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	fc 01       	movw	r30, r24
    18fc:	e4 58       	subi	r30, 0x84	; 132
    18fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1900:	20 81       	ld	r18, Z
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	fc 01       	movw	r30, r24
    1912:	e3 58       	subi	r30, 0x83	; 131
    1914:	fe 4f       	sbci	r31, 0xFE	; 254
    1916:	90 81       	ld	r25, Z
    1918:	82 2f       	mov	r24, r18
    191a:	69 2f       	mov	r22, r25
    191c:	40 e0       	ldi	r20, 0x00	; 0
    191e:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>
    1922:	a4 c0       	rjmp	.+328    	; 0x1a6c <LED_enumInit+0x282>
		 
	  }else if((LEDs[counter].state == ActiveHIGH)&&(LEDs[counter].output == LED_ON)){
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	01 96       	adiw	r24, 0x01	; 1
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	fc 01       	movw	r30, r24
    1936:	e4 58       	subi	r30, 0x84	; 132
    1938:	fe 4f       	sbci	r31, 0xFE	; 254
    193a:	80 81       	ld	r24, Z
    193c:	88 23       	and	r24, r24
    193e:	49 f5       	brne	.+82     	; 0x1992 <LED_enumInit+0x1a8>
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	fc 01       	movw	r30, r24
    1950:	e1 58       	subi	r30, 0x81	; 129
    1952:	fe 4f       	sbci	r31, 0xFE	; 254
    1954:	80 81       	ld	r24, Z
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	e1 f4       	brne	.+56     	; 0x1992 <LED_enumInit+0x1a8>
		  DIO_enumSetPinConfig(LEDs[counter].port,LEDs[counter].pin,DIO_enumOutputHIGH);
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	88 2f       	mov	r24, r24
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	fc 01       	movw	r30, r24
    196a:	e4 58       	subi	r30, 0x84	; 132
    196c:	fe 4f       	sbci	r31, 0xFE	; 254
    196e:	20 81       	ld	r18, Z
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	fc 01       	movw	r30, r24
    1980:	e3 58       	subi	r30, 0x83	; 131
    1982:	fe 4f       	sbci	r31, 0xFE	; 254
    1984:	90 81       	ld	r25, Z
    1986:	82 2f       	mov	r24, r18
    1988:	69 2f       	mov	r22, r25
    198a:	41 e0       	ldi	r20, 0x01	; 1
    198c:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>
    1990:	6d c0       	rjmp	.+218    	; 0x1a6c <LED_enumInit+0x282>
		  
	  }else if((LEDs[counter].state == ActiveLOW)&&(LEDs[counter].output == LED_OFF)){
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	88 2f       	mov	r24, r24
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	fc 01       	movw	r30, r24
    19a4:	e4 58       	subi	r30, 0x84	; 132
    19a6:	fe 4f       	sbci	r31, 0xFE	; 254
    19a8:	80 81       	ld	r24, Z
    19aa:	81 30       	cpi	r24, 0x01	; 1
    19ac:	49 f5       	brne	.+82     	; 0x1a00 <LED_enumInit+0x216>
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	88 2f       	mov	r24, r24
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	88 0f       	add	r24, r24
    19b6:	99 1f       	adc	r25, r25
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	fc 01       	movw	r30, r24
    19be:	e1 58       	subi	r30, 0x81	; 129
    19c0:	fe 4f       	sbci	r31, 0xFE	; 254
    19c2:	80 81       	ld	r24, Z
    19c4:	88 23       	and	r24, r24
    19c6:	e1 f4       	brne	.+56     	; 0x1a00 <LED_enumInit+0x216>
	  DIO_enumSetPinConfig(LEDs[counter].port,LEDs[counter].pin,DIO_enumOutputHIGH);
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	88 2f       	mov	r24, r24
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	fc 01       	movw	r30, r24
    19d8:	e4 58       	subi	r30, 0x84	; 132
    19da:	fe 4f       	sbci	r31, 0xFE	; 254
    19dc:	20 81       	ld	r18, Z
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	88 2f       	mov	r24, r24
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25
    19ec:	fc 01       	movw	r30, r24
    19ee:	e3 58       	subi	r30, 0x83	; 131
    19f0:	fe 4f       	sbci	r31, 0xFE	; 254
    19f2:	90 81       	ld	r25, Z
    19f4:	82 2f       	mov	r24, r18
    19f6:	69 2f       	mov	r22, r25
    19f8:	41 e0       	ldi	r20, 0x01	; 1
    19fa:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>
    19fe:	36 c0       	rjmp	.+108    	; 0x1a6c <LED_enumInit+0x282>
	  
      }else if((LEDs[counter].state == ActiveLOW)&&(LEDs[counter].output == LED_ON)){
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	88 2f       	mov	r24, r24
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	01 96       	adiw	r24, 0x01	; 1
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	fc 01       	movw	r30, r24
    1a12:	e4 58       	subi	r30, 0x84	; 132
    1a14:	fe 4f       	sbci	r31, 0xFE	; 254
    1a16:	80 81       	ld	r24, Z
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	41 f5       	brne	.+80     	; 0x1a6c <LED_enumInit+0x282>
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	88 2f       	mov	r24, r24
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	e1 58       	subi	r30, 0x81	; 129
    1a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a30:	80 81       	ld	r24, Z
    1a32:	81 30       	cpi	r24, 0x01	; 1
    1a34:	d9 f4       	brne	.+54     	; 0x1a6c <LED_enumInit+0x282>
      DIO_enumSetPinConfig(LEDs[counter].port,LEDs[counter].pin,DIO_enumOutputLOW);
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	88 2f       	mov	r24, r24
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	fc 01       	movw	r30, r24
    1a46:	e4 58       	subi	r30, 0x84	; 132
    1a48:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4a:	20 81       	ld	r18, Z
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	e3 58       	subi	r30, 0x83	; 131
    1a5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1a60:	90 81       	ld	r25, Z
    1a62:	82 2f       	mov	r24, r18
    1a64:	69 2f       	mov	r22, r25
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>
	
	LED_enumError_t Ret_enuError = LED_enumNOk;
    u8 counter ;
 

for(counter=0; counter < NUM_Of_LEDs ;counter++){
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	8f 5f       	subi	r24, 0xFF	; 255
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	88 23       	and	r24, r24
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <LED_enumInit+0x290>
    1a78:	c1 ce       	rjmp	.-638    	; 0x17fc <LED_enumInit+0x12>
	  }
  

	  }
	  }
  return Ret_enuError;
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <LED_enumSetValue>:
/**
*@brief : Function to set the LEDs ON or OFF
*@param : void
*@return: Error State
*/
LED_enumError_t LED_enumSetValue(u8 LED_Name,LED_enumOutputState OUTPUT){
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	29 97       	sbiw	r28, 0x09	; 9
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
    1a9a:	8a 83       	std	Y+2, r24	; 0x02
    1a9c:	6b 83       	std	Y+3, r22	; 0x03
	
	LED_enumError_t Ret_enuError = LED_enumNOk;
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	89 83       	std	Y+1, r24	; 0x01

   
  /****************Check on The output ************/
	   if(( OUTPUT != LED_ON )&&( OUTPUT != LED_OFF)){
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	81 30       	cpi	r24, 0x01	; 1
    1aa6:	31 f0       	breq	.+12     	; 0x1ab4 <LED_enumSetValue+0x2e>
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	88 23       	and	r24, r24
    1aac:	19 f0       	breq	.+6      	; 0x1ab4 <LED_enumSetValue+0x2e>
	   Ret_enuError = LED_enumWrongStatus;
    1aae:	85 e0       	ldi	r24, 0x05	; 5
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	a7 c0       	rjmp	.+334    	; 0x1c02 <LED_enumSetValue+0x17c>

	   }else{
		   switch(LEDs[LED_Name].state){
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	e4 58       	subi	r30, 0x84	; 132
    1ac8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aca:	80 81       	ld	r24, Z
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	39 87       	std	Y+9, r19	; 0x09
    1ad2:	28 87       	std	Y+8, r18	; 0x08
    1ad4:	88 85       	ldd	r24, Y+8	; 0x08
    1ad6:	99 85       	ldd	r25, Y+9	; 0x09
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	39 f0       	breq	.+14     	; 0x1aea <LED_enumSetValue+0x64>
    1adc:	28 85       	ldd	r18, Y+8	; 0x08
    1ade:	39 85       	ldd	r19, Y+9	; 0x09
    1ae0:	21 30       	cpi	r18, 0x01	; 1
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <LED_enumSetValue+0x62>
    1ae6:	48 c0       	rjmp	.+144    	; 0x1b78 <LED_enumSetValue+0xf2>
    1ae8:	8c c0       	rjmp	.+280    	; 0x1c02 <LED_enumSetValue+0x17c>
			   
			   case ActiveHIGH:
			   switch(OUTPUT){
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	3f 83       	std	Y+7, r19	; 0x07
    1af2:	2e 83       	std	Y+6, r18	; 0x06
    1af4:	8e 81       	ldd	r24, Y+6	; 0x06
    1af6:	9f 81       	ldd	r25, Y+7	; 0x07
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	11 f1       	breq	.+68     	; 0x1b40 <LED_enumSetValue+0xba>
    1afc:	2e 81       	ldd	r18, Y+6	; 0x06
    1afe:	3f 81       	ldd	r19, Y+7	; 0x07
    1b00:	21 30       	cpi	r18, 0x01	; 1
    1b02:	31 05       	cpc	r19, r1
    1b04:	09 f0       	breq	.+2      	; 0x1b08 <LED_enumSetValue+0x82>
    1b06:	7d c0       	rjmp	.+250    	; 0x1c02 <LED_enumSetValue+0x17c>
				   case LED_ON:
				   DIO_enumSetPin(LEDs[LED_Name].port,LEDs[LED_Name].pin,LogicHigh);
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	88 2f       	mov	r24, r24
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	fc 01       	movw	r30, r24
    1b18:	e4 58       	subi	r30, 0x84	; 132
    1b1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1b1c:	20 81       	ld	r18, Z
    1b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	88 0f       	add	r24, r24
    1b26:	99 1f       	adc	r25, r25
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	e3 58       	subi	r30, 0x83	; 131
    1b30:	fe 4f       	sbci	r31, 0xFE	; 254
    1b32:	90 81       	ld	r25, Z
    1b34:	82 2f       	mov	r24, r18
    1b36:	69 2f       	mov	r22, r25
    1b38:	41 e0       	ldi	r20, 0x01	; 1
    1b3a:	0e 94 70 23 	call	0x46e0	; 0x46e0 <DIO_enumSetPin>
    1b3e:	61 c0       	rjmp	.+194    	; 0x1c02 <LED_enumSetValue+0x17c>
				   break;
				   case LED_OFF:
				   DIO_enumSetPin(LEDs[LED_Name].port,LEDs[LED_Name].pin,LogicLow);
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	88 2f       	mov	r24, r24
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	fc 01       	movw	r30, r24
    1b50:	e4 58       	subi	r30, 0x84	; 132
    1b52:	fe 4f       	sbci	r31, 0xFE	; 254
    1b54:	20 81       	ld	r18, Z
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	88 2f       	mov	r24, r24
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	fc 01       	movw	r30, r24
    1b66:	e3 58       	subi	r30, 0x83	; 131
    1b68:	fe 4f       	sbci	r31, 0xFE	; 254
    1b6a:	90 81       	ld	r25, Z
    1b6c:	82 2f       	mov	r24, r18
    1b6e:	69 2f       	mov	r22, r25
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	0e 94 70 23 	call	0x46e0	; 0x46e0 <DIO_enumSetPin>
    1b76:	45 c0       	rjmp	.+138    	; 0x1c02 <LED_enumSetValue+0x17c>
				   default:
				   break;
			   }
			   break;
			   case ActiveLOW:
               switch(OUTPUT){
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	3d 83       	std	Y+5, r19	; 0x05
    1b80:	2c 83       	std	Y+4, r18	; 0x04
    1b82:	8c 81       	ldd	r24, Y+4	; 0x04
    1b84:	9d 81       	ldd	r25, Y+5	; 0x05
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	09 f1       	breq	.+66     	; 0x1bcc <LED_enumSetValue+0x146>
    1b8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b8e:	21 30       	cpi	r18, 0x01	; 1
    1b90:	31 05       	cpc	r19, r1
    1b92:	b9 f5       	brne	.+110    	; 0x1c02 <LED_enumSetValue+0x17c>
               	case LED_ON:
				   	DIO_enumSetPin(LEDs[LED_Name].port,LEDs[LED_Name].pin,LogicLow);
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	88 2f       	mov	r24, r24
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	e4 58       	subi	r30, 0x84	; 132
    1ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba8:	20 81       	ld	r18, Z
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	88 2f       	mov	r24, r24
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	88 0f       	add	r24, r24
    1bb2:	99 1f       	adc	r25, r25
    1bb4:	88 0f       	add	r24, r24
    1bb6:	99 1f       	adc	r25, r25
    1bb8:	fc 01       	movw	r30, r24
    1bba:	e3 58       	subi	r30, 0x83	; 131
    1bbc:	fe 4f       	sbci	r31, 0xFE	; 254
    1bbe:	90 81       	ld	r25, Z
    1bc0:	82 2f       	mov	r24, r18
    1bc2:	69 2f       	mov	r22, r25
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	0e 94 70 23 	call	0x46e0	; 0x46e0 <DIO_enumSetPin>
    1bca:	1b c0       	rjmp	.+54     	; 0x1c02 <LED_enumSetValue+0x17c>
               	break;
               	case LED_OFF:
				   	DIO_enumSetPin(LEDs[LED_Name].port,LEDs[LED_Name].pin,LogicHigh);
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	88 2f       	mov	r24, r24
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	fc 01       	movw	r30, r24
    1bdc:	e4 58       	subi	r30, 0x84	; 132
    1bde:	fe 4f       	sbci	r31, 0xFE	; 254
    1be0:	20 81       	ld	r18, Z
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	88 2f       	mov	r24, r24
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	88 0f       	add	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	e3 58       	subi	r30, 0x83	; 131
    1bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf6:	90 81       	ld	r25, Z
    1bf8:	82 2f       	mov	r24, r18
    1bfa:	69 2f       	mov	r22, r25
    1bfc:	41 e0       	ldi	r20, 0x01	; 1
    1bfe:	0e 94 70 23 	call	0x46e0	; 0x46e0 <DIO_enumSetPin>
			   break;
			   default:
			   break;   
		   } 
	   }	
	   return Ret_enuError;
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c04:	29 96       	adiw	r28, 0x09	; 9
    1c06:	0f b6       	in	r0, 0x3f	; 63
    1c08:	f8 94       	cli
    1c0a:	de bf       	out	0x3e, r29	; 62
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	cd bf       	out	0x3d, r28	; 61
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	08 95       	ret

00001c16 <LCD_enuWriteData>:
/*
*@brief  : Function to display the character on the LCD
*@param  : ASCII code that represents the desired data to display on the LCD
*@return : Error state
*/
LCD_enuErrorStatus LCD_enuWriteData(u8 Copy_u8Data){
    1c16:	df 93       	push	r29
    1c18:	cf 93       	push	r28
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <LCD_enuWriteData+0x6>
    1c1c:	00 d0       	rcall	.+0      	; 0x1c1e <LCD_enuWriteData+0x8>
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	8c 83       	std	Y+4, r24	; 0x04
	
	 LCD_enuErrorStatus Ret_enumErrorStatus = LCD_enumNOk;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	8b 83       	std	Y+3, r24	; 0x03
	 
	/*RS = 1 --> To deal with data as a ASCII code for a character*/
	DIO_enumSetPin(LCD_Pins[RS].port,LCD_Pins[RS].pin,DIO_enumOutputHIGH);
    1c28:	80 91 92 01 	lds	r24, 0x0192
    1c2c:	90 91 93 01 	lds	r25, 0x0193
    1c30:	69 2f       	mov	r22, r25
    1c32:	41 e0       	ldi	r20, 0x01	; 1
    1c34:	0e 94 70 23 	call	0x46e0	; 0x46e0 <DIO_enumSetPin>
	Enable();
	
	#elif (LCD_MODE == FOUR_BIT_MODE)
	
	/*Send higher bits */
	for (u8 counter= 7; counter>3 ; counter--)
    1c38:	87 e0       	ldi	r24, 0x07	; 7
    1c3a:	8a 83       	std	Y+2, r24	; 0x02
    1c3c:	29 c0       	rjmp	.+82     	; 0x1c90 <LCD_enuWriteData+0x7a>
	{
		DIO_enumSetPin(LCD_Pins[counter].port,LCD_Pins[counter].pin,GET_BIT(Copy_u8Data,counter));
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	88 2f       	mov	r24, r24
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	fc 01       	movw	r30, r24
    1c4a:	e0 58       	subi	r30, 0x80	; 128
    1c4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c4e:	50 81       	ld	r21, Z
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	88 2f       	mov	r24, r24
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	ef 57       	subi	r30, 0x7F	; 127
    1c5e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c60:	40 81       	ld	r20, Z
    1c62:	8c 81       	ldd	r24, Y+4	; 0x04
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	88 2f       	mov	r24, r24
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	b9 01       	movw	r22, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <LCD_enuWriteData+0x60>
    1c72:	75 95       	asr	r23
    1c74:	67 95       	ror	r22
    1c76:	8a 95       	dec	r24
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <LCD_enuWriteData+0x5c>
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	98 2f       	mov	r25, r24
    1c7e:	91 70       	andi	r25, 0x01	; 1
    1c80:	85 2f       	mov	r24, r21
    1c82:	64 2f       	mov	r22, r20
    1c84:	49 2f       	mov	r20, r25
    1c86:	0e 94 70 23 	call	0x46e0	; 0x46e0 <DIO_enumSetPin>
	Enable();
	
	#elif (LCD_MODE == FOUR_BIT_MODE)
	
	/*Send higher bits */
	for (u8 counter= 7; counter>3 ; counter--)
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	81 50       	subi	r24, 0x01	; 1
    1c8e:	8a 83       	std	Y+2, r24	; 0x02
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	84 30       	cpi	r24, 0x04	; 4
    1c94:	a0 f6       	brcc	.-88     	; 0x1c3e <LCD_enuWriteData+0x28>
	{
		DIO_enumSetPin(LCD_Pins[counter].port,LCD_Pins[counter].pin,GET_BIT(Copy_u8Data,counter));
	}
	/*Send a pulse on Enable pin*/
	Enable();
    1c96:	0e 94 7e 10 	call	0x20fc	; 0x20fc <Enable>
	
	/*Send lower bits */
	for (u8 counter =7; counter > 3;counter--)
    1c9a:	87 e0       	ldi	r24, 0x07	; 7
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	2a c0       	rjmp	.+84     	; 0x1cf4 <LCD_enuWriteData+0xde>
	{
		DIO_enumSetPin(LCD_Pins[counter].port,LCD_Pins[counter].pin,GET_BIT(Copy_u8Data,(counter-4)));
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	88 2f       	mov	r24, r24
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	fc 01       	movw	r30, r24
    1cac:	e0 58       	subi	r30, 0x80	; 128
    1cae:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb0:	50 81       	ld	r21, Z
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	88 2f       	mov	r24, r24
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	ef 57       	subi	r30, 0x7F	; 127
    1cc0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc2:	40 81       	ld	r20, Z
    1cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	88 2f       	mov	r24, r24
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	04 97       	sbiw	r24, 0x04	; 4
    1cd2:	b9 01       	movw	r22, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <LCD_enuWriteData+0xc4>
    1cd6:	75 95       	asr	r23
    1cd8:	67 95       	ror	r22
    1cda:	8a 95       	dec	r24
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <LCD_enuWriteData+0xc0>
    1cde:	cb 01       	movw	r24, r22
    1ce0:	98 2f       	mov	r25, r24
    1ce2:	91 70       	andi	r25, 0x01	; 1
    1ce4:	85 2f       	mov	r24, r21
    1ce6:	64 2f       	mov	r22, r20
    1ce8:	49 2f       	mov	r20, r25
    1cea:	0e 94 70 23 	call	0x46e0	; 0x46e0 <DIO_enumSetPin>
	}
	/*Send a pulse on Enable pin*/
	Enable();
	
	/*Send lower bits */
	for (u8 counter =7; counter > 3;counter--)
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	81 50       	subi	r24, 0x01	; 1
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	84 30       	cpi	r24, 0x04	; 4
    1cf8:	98 f6       	brcc	.-90     	; 0x1ca0 <LCD_enuWriteData+0x8a>
	{
		DIO_enumSetPin(LCD_Pins[counter].port,LCD_Pins[counter].pin,GET_BIT(Copy_u8Data,(counter-4)));
	}
	/*Send a pulse on Enable pin*/
	Enable();
    1cfa:	0e 94 7e 10 	call	0x20fc	; 0x20fc <Enable>
	
	#endif
	return Ret_enumErrorStatus;
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <LCD_enuWriteCommand>:
/*
*@brief  : Function to execute the given instruction
*@param  : ASCII code that represents the command or instruction that needs to be executed
*@return : Error state
*/
LCD_enuErrorStatus LCD_enuWriteCommand(u8 Copy_u8Command){
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <LCD_enuWriteCommand+0x6>
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <LCD_enuWriteCommand+0x8>
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	8c 83       	std	Y+4, r24	; 0x04
	
	LCD_enuErrorStatus Ret_enumErrorStatus = LCD_enumNOk;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	8b 83       	std	Y+3, r24	; 0x03
	
	/*RS = 0 --> To deal with data as a command that needs to be executed */
	DIO_enumSetPin(LCD_Pins[RS].port,LCD_Pins[RS].pin,DIO_enumOutputLOW);
    1d20:	80 91 92 01 	lds	r24, 0x0192
    1d24:	90 91 93 01 	lds	r25, 0x0193
    1d28:	69 2f       	mov	r22, r25
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	0e 94 70 23 	call	0x46e0	; 0x46e0 <DIO_enumSetPin>
	Enable();
	
	#elif (LCD_MODE == FOUR_BIT_MODE)
	
	/*Send higher bits */
	for (u8 counter =7; counter > 3;counter--)
    1d30:	87 e0       	ldi	r24, 0x07	; 7
    1d32:	8a 83       	std	Y+2, r24	; 0x02
    1d34:	29 c0       	rjmp	.+82     	; 0x1d88 <LCD_enuWriteCommand+0x7a>
	{
		DIO_enumSetPin(LCD_Pins[counter].port,LCD_Pins[counter].pin,GET_BIT(Copy_u8Command,counter));
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	88 2f       	mov	r24, r24
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	88 0f       	add	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	fc 01       	movw	r30, r24
    1d42:	e0 58       	subi	r30, 0x80	; 128
    1d44:	fe 4f       	sbci	r31, 0xFE	; 254
    1d46:	50 81       	ld	r21, Z
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	88 2f       	mov	r24, r24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	fc 01       	movw	r30, r24
    1d54:	ef 57       	subi	r30, 0x7F	; 127
    1d56:	fe 4f       	sbci	r31, 0xFE	; 254
    1d58:	40 81       	ld	r20, Z
    1d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	88 2f       	mov	r24, r24
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	b9 01       	movw	r22, r18
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <LCD_enuWriteCommand+0x60>
    1d6a:	75 95       	asr	r23
    1d6c:	67 95       	ror	r22
    1d6e:	8a 95       	dec	r24
    1d70:	e2 f7       	brpl	.-8      	; 0x1d6a <LCD_enuWriteCommand+0x5c>
    1d72:	cb 01       	movw	r24, r22
    1d74:	98 2f       	mov	r25, r24
    1d76:	91 70       	andi	r25, 0x01	; 1
    1d78:	85 2f       	mov	r24, r21
    1d7a:	64 2f       	mov	r22, r20
    1d7c:	49 2f       	mov	r20, r25
    1d7e:	0e 94 70 23 	call	0x46e0	; 0x46e0 <DIO_enumSetPin>
	Enable();
	
	#elif (LCD_MODE == FOUR_BIT_MODE)
	
	/*Send higher bits */
	for (u8 counter =7; counter > 3;counter--)
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	81 50       	subi	r24, 0x01	; 1
    1d86:	8a 83       	std	Y+2, r24	; 0x02
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	84 30       	cpi	r24, 0x04	; 4
    1d8c:	a0 f6       	brcc	.-88     	; 0x1d36 <LCD_enuWriteCommand+0x28>
	{
		DIO_enumSetPin(LCD_Pins[counter].port,LCD_Pins[counter].pin,GET_BIT(Copy_u8Command,counter));
	}
	/*Send a pulse on Enable pin*/
	Enable();
    1d8e:	0e 94 7e 10 	call	0x20fc	; 0x20fc <Enable>
	
	/*Send lower bits */
	for (u8 counter =7; counter > 3;counter--)
    1d92:	87 e0       	ldi	r24, 0x07	; 7
    1d94:	89 83       	std	Y+1, r24	; 0x01
    1d96:	2a c0       	rjmp	.+84     	; 0x1dec <LCD_enuWriteCommand+0xde>
	{
		DIO_enumSetPin(LCD_Pins[counter].port,LCD_Pins[counter].pin,GET_BIT(Copy_u8Command,(counter-4)));
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	fc 01       	movw	r30, r24
    1da4:	e0 58       	subi	r30, 0x80	; 128
    1da6:	fe 4f       	sbci	r31, 0xFE	; 254
    1da8:	50 81       	ld	r21, Z
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	88 2f       	mov	r24, r24
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	fc 01       	movw	r30, r24
    1db6:	ef 57       	subi	r30, 0x7F	; 127
    1db8:	fe 4f       	sbci	r31, 0xFE	; 254
    1dba:	40 81       	ld	r20, Z
    1dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	88 2f       	mov	r24, r24
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	04 97       	sbiw	r24, 0x04	; 4
    1dca:	b9 01       	movw	r22, r18
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <LCD_enuWriteCommand+0xc4>
    1dce:	75 95       	asr	r23
    1dd0:	67 95       	ror	r22
    1dd2:	8a 95       	dec	r24
    1dd4:	e2 f7       	brpl	.-8      	; 0x1dce <LCD_enuWriteCommand+0xc0>
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	98 2f       	mov	r25, r24
    1dda:	91 70       	andi	r25, 0x01	; 1
    1ddc:	85 2f       	mov	r24, r21
    1dde:	64 2f       	mov	r22, r20
    1de0:	49 2f       	mov	r20, r25
    1de2:	0e 94 70 23 	call	0x46e0	; 0x46e0 <DIO_enumSetPin>
	}
	/*Send a pulse on Enable pin*/
	Enable();
	
	/*Send lower bits */
	for (u8 counter =7; counter > 3;counter--)
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	81 50       	subi	r24, 0x01	; 1
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	84 30       	cpi	r24, 0x04	; 4
    1df0:	98 f6       	brcc	.-90     	; 0x1d98 <LCD_enuWriteCommand+0x8a>
	{
		DIO_enumSetPin(LCD_Pins[counter].port,LCD_Pins[counter].pin,GET_BIT(Copy_u8Command,(counter-4)));
	}
	/*Send a pulse on Enable pin*/
	Enable();
    1df2:	0e 94 7e 10 	call	0x20fc	; 0x20fc <Enable>
	
	#endif
	return Ret_enumErrorStatus;	
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <LCD_init>:
/*
*@brief  : Function to initialize LCD
*@param  : void
*@return : void
*/
void LCD_init(void){
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	0f 92       	push	r0
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
	*@For 4-Bit Mode
	*/
	#elif (LCD_MODE == FOUR_BIT_MODE)
	
	/*Step0: Make LCD Pins as outputs*/
	for(u8 counter = 4; counter < NUM_OF_LCD_PINS+4 ; counter++){
    1e10:	84 e0       	ldi	r24, 0x04	; 4
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	1a c0       	rjmp	.+52     	; 0x1e4a <LCD_init+0x44>
		DIO_enumSetPinConfig(LCD_Pins[counter].port,LCD_Pins[counter].pin,DIO_enumOutputLOW);
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	88 2f       	mov	r24, r24
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	88 0f       	add	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	fc 01       	movw	r30, r24
    1e22:	e0 58       	subi	r30, 0x80	; 128
    1e24:	fe 4f       	sbci	r31, 0xFE	; 254
    1e26:	20 81       	ld	r18, Z
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	88 2f       	mov	r24, r24
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	fc 01       	movw	r30, r24
    1e34:	ef 57       	subi	r30, 0x7F	; 127
    1e36:	fe 4f       	sbci	r31, 0xFE	; 254
    1e38:	90 81       	ld	r25, Z
    1e3a:	82 2f       	mov	r24, r18
    1e3c:	69 2f       	mov	r22, r25
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>
	*@For 4-Bit Mode
	*/
	#elif (LCD_MODE == FOUR_BIT_MODE)
	
	/*Step0: Make LCD Pins as outputs*/
	for(u8 counter = 4; counter < NUM_OF_LCD_PINS+4 ; counter++){
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	8f 5f       	subi	r24, 0xFF	; 255
    1e48:	89 83       	std	Y+1, r24	; 0x01
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	88 30       	cpi	r24, 0x08	; 8
    1e4e:	18 f3       	brcs	.-58     	; 0x1e16 <LCD_init+0x10>
		DIO_enumSetPinConfig(LCD_Pins[counter].port,LCD_Pins[counter].pin,DIO_enumOutputLOW);
	}
	/*Set Enable pin as an output*/
	DIO_enumSetPinConfig(LCD_Pins[EN].port,LCD_Pins[EN].pin,DIO_enumOutputLOW);
    1e50:	80 91 90 01 	lds	r24, 0x0190
    1e54:	90 91 91 01 	lds	r25, 0x0191
    1e58:	69 2f       	mov	r22, r25
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>
	/*Set Register select pin as an output*/
	DIO_enumSetPinConfig(LCD_Pins[RS].port,LCD_Pins[RS].pin,DIO_enumOutputLOW);
    1e60:	80 91 92 01 	lds	r24, 0x0192
    1e64:	90 91 93 01 	lds	r25, 0x0193
    1e68:	69 2f       	mov	r22, r25
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>
	
	/*Step1: Wait for more than 30ms after VDD rises to 4.5V. */
	Delay(0.05);
    1e70:	6d ec       	ldi	r22, 0xCD	; 205
    1e72:	7c ec       	ldi	r23, 0xCC	; 204
    1e74:	8c e4       	ldi	r24, 0x4C	; 76
    1e76:	9d e3       	ldi	r25, 0x3D	; 61
    1e78:	0e 94 ad 07 	call	0xf5a	; 0xf5a <Delay>
	
	LCD_enuWriteCommand(RETURN_HOME);
    1e7c:	82 e0       	ldi	r24, 0x02	; 2
    1e7e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_enuWriteCommand>
	Delay(0.01);
    1e82:	6a e0       	ldi	r22, 0x0A	; 10
    1e84:	77 ed       	ldi	r23, 0xD7	; 215
    1e86:	83 e2       	ldi	r24, 0x23	; 35
    1e88:	9c e3       	ldi	r25, 0x3C	; 60
    1e8a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <Delay>
	/*Step2: Function Set*/
	LCD_enuWriteCommand(FOUR_BIT_FUNCTION_SET);
    1e8e:	88 e2       	ldi	r24, 0x28	; 40
    1e90:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_enuWriteCommand>
	#endif
	
	/*Step3: Wait for more than 39 s */
	Delay(0.05);
    1e94:	6d ec       	ldi	r22, 0xCD	; 205
    1e96:	7c ec       	ldi	r23, 0xCC	; 204
    1e98:	8c e4       	ldi	r24, 0x4C	; 76
    1e9a:	9d e3       	ldi	r25, 0x3D	; 61
    1e9c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <Delay>
	
	/*Step4: Display ON/OFF ControL */
	LCD_enuWriteCommand(DISPLAY_ON_CURSOR_OFF);
    1ea0:	8c e0       	ldi	r24, 0x0C	; 12
    1ea2:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_enuWriteCommand>
	
	/*Step5: Wait for more than 39 s */
	Delay(0.05);
    1ea6:	6d ec       	ldi	r22, 0xCD	; 205
    1ea8:	7c ec       	ldi	r23, 0xCC	; 204
    1eaa:	8c e4       	ldi	r24, 0x4C	; 76
    1eac:	9d e3       	ldi	r25, 0x3D	; 61
    1eae:	0e 94 ad 07 	call	0xf5a	; 0xf5a <Delay>
	/*Step6: Display Clear*/
	LCD_enuWriteCommand(CLEAR_SCREEN);
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_enuWriteCommand>
	
	/*Step7: Wait for more than 1.53ms */
	Delay(0.002);
    1eb8:	6f e6       	ldi	r22, 0x6F	; 111
    1eba:	72 e1       	ldi	r23, 0x12	; 18
    1ebc:	83 e0       	ldi	r24, 0x03	; 3
    1ebe:	9b e3       	ldi	r25, 0x3B	; 59
    1ec0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <Delay>
	/*Step8: ENTRY_MODE*/
	LCD_enuWriteCommand(ENTRY_MODE_INCR);
    1ec4:	86 e0       	ldi	r24, 0x06	; 6
    1ec6:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_enuWriteCommand>
	Delay(0.002);
    1eca:	6f e6       	ldi	r22, 0x6F	; 111
    1ecc:	72 e1       	ldi	r23, 0x12	; 18
    1ece:	83 e0       	ldi	r24, 0x03	; 3
    1ed0:	9b e3       	ldi	r25, 0x3B	; 59
    1ed2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <Delay>
}
    1ed6:	0f 90       	pop	r0
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <LCD_enuGotoDDRAM_XY>:
/*
*@brief  : Function to jump on a specific location on DDRAM (On the LCD screen)
*@param  : The position of the desired location on the LCD (X:Row & Y:Columns)
*@return : Error state
*/
LCD_enuErrorStatus LCD_enuGotoDDRAM_XY(u8 Copy_u8X, u8 Copy_u8Y){
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <LCD_enuGotoDDRAM_XY+0x6>
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <LCD_enuGotoDDRAM_XY+0x8>
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <LCD_enuGotoDDRAM_XY+0xa>
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	8b 83       	std	Y+3, r24	; 0x03
    1eee:	6c 83       	std	Y+4, r22	; 0x04
	
	LCD_enuErrorStatus Ret_enumErrorStatus = LCD_enumNOk;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	8a 83       	std	Y+2, r24	; 0x02
	u8 address=0;
    1ef4:	19 82       	std	Y+1, r1	; 0x01
	
    if((Copy_u8X > SECOND_LINE)||(Copy_u8Y > NO_OF_Columns)){
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	83 30       	cpi	r24, 0x03	; 3
    1efa:	18 f4       	brcc	.+6      	; 0x1f02 <LCD_enuGotoDDRAM_XY+0x24>
    1efc:	8c 81       	ldd	r24, Y+4	; 0x04
    1efe:	81 31       	cpi	r24, 0x11	; 17
    1f00:	18 f0       	brcs	.+6      	; 0x1f08 <LCD_enuGotoDDRAM_XY+0x2a>
		
	  Ret_enumErrorStatus =	LCD_enumWrongPosition;
    1f02:	84 e0       	ldi	r24, 0x04	; 4
    1f04:	8a 83       	std	Y+2, r24	; 0x02
    1f06:	1c c0       	rjmp	.+56     	; 0x1f40 <LCD_enuGotoDDRAM_XY+0x62>
	}else{
	  Ret_enumErrorStatus = LCD_enumOk;
    1f08:	1a 82       	std	Y+2, r1	; 0x02
	 /*Code implementation*/
	 switch(Copy_u8X){
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	3e 83       	std	Y+6, r19	; 0x06
    1f12:	2d 83       	std	Y+5, r18	; 0x05
    1f14:	8d 81       	ldd	r24, Y+5	; 0x05
    1f16:	9e 81       	ldd	r25, Y+6	; 0x06
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	31 f0       	breq	.+12     	; 0x1f2a <LCD_enuGotoDDRAM_XY+0x4c>
    1f1e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f20:	3e 81       	ldd	r19, Y+6	; 0x06
    1f22:	22 30       	cpi	r18, 0x02	; 2
    1f24:	31 05       	cpc	r19, r1
    1f26:	29 f0       	breq	.+10     	; 0x1f32 <LCD_enuGotoDDRAM_XY+0x54>
    1f28:	07 c0       	rjmp	.+14     	; 0x1f38 <LCD_enuGotoDDRAM_XY+0x5a>
		 case FIRST_LINE:
			address = Copy_u8Y-1;
    1f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2c:	81 50       	subi	r24, 0x01	; 1
    1f2e:	89 83       	std	Y+1, r24	; 0x01
    1f30:	03 c0       	rjmp	.+6      	; 0x1f38 <LCD_enuGotoDDRAM_XY+0x5a>
		 break;
		 case SECOND_LINE:
		    address = 0x40+ Copy_u8Y-1;
    1f32:	8c 81       	ldd	r24, Y+4	; 0x04
    1f34:	81 5c       	subi	r24, 0xC1	; 193
    1f36:	89 83       	std	Y+1, r24	; 0x01
		 break;
		 default:
		 break;	 
	 }	
	 LCD_enuWriteCommand(0x80 + address);
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	80 58       	subi	r24, 0x80	; 128
    1f3c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_enuWriteCommand>
	}
	return Ret_enumErrorStatus;	
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f42:	26 96       	adiw	r28, 0x06	; 6
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <LCD_enuWriteNumber>:
/*
*@brief  : Function to display a number on the LCD screen
*@param  : Number
*@return : Error state
*/
LCD_enuErrorStatus LCD_enuWriteNumber(u16 Copy_u8Number){
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	cd b7       	in	r28, 0x3d	; 61
    1f5a:	de b7       	in	r29, 0x3e	; 62
    1f5c:	2c 97       	sbiw	r28, 0x0c	; 12
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	9c 87       	std	Y+12, r25	; 0x0c
    1f6a:	8b 87       	std	Y+11, r24	; 0x0b
	LCD_enuErrorStatus Ret_enumErrorStatus = LCD_enumNOk;
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	8d 83       	std	Y+5, r24	; 0x05
	
	/*Check on the number*/
	if(Copy_u8Number >65535){
		Ret_enumErrorStatus = LCD_enumWrongNumber;
	}else{
		Ret_enumErrorStatus = LCD_enumOk;
    1f70:	1d 82       	std	Y+5, r1	; 0x05
	    /*Code Implementation */	
		u8 numOfDigits = 0;
    1f72:	1c 82       	std	Y+4, r1	; 0x04
		u16 temp = Copy_u8Number ;
    1f74:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f76:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f78:	9b 83       	std	Y+3, r25	; 0x03
    1f7a:	8a 83       	std	Y+2, r24	; 0x02
    1f7c:	1d c0       	rjmp	.+58     	; 0x1fb8 <LCD_enuWriteNumber+0x64>
		
		/*Array to store the number of digits of the input number*/
		u8 arr[5];
		while(temp != 0){
			
			arr[numOfDigits]= temp%10;
    1f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f80:	e8 2f       	mov	r30, r24
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	2a e0       	ldi	r18, 0x0A	; 10
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	b9 01       	movw	r22, r18
    1f8e:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__udivmodhi4>
    1f92:	28 2f       	mov	r18, r24
    1f94:	ce 01       	movw	r24, r28
    1f96:	06 96       	adiw	r24, 0x06	; 6
    1f98:	e8 0f       	add	r30, r24
    1f9a:	f9 1f       	adc	r31, r25
    1f9c:	20 83       	st	Z, r18
			numOfDigits++;
    1f9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa0:	8f 5f       	subi	r24, 0xFF	; 255
    1fa2:	8c 83       	std	Y+4, r24	; 0x04
			temp /= 10; 
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa8:	2a e0       	ldi	r18, 0x0A	; 10
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	b9 01       	movw	r22, r18
    1fae:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__udivmodhi4>
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9b 83       	std	Y+3, r25	; 0x03
    1fb6:	8a 83       	std	Y+2, r24	; 0x02
		u8 numOfDigits = 0;
		u16 temp = Copy_u8Number ;
		
		/*Array to store the number of digits of the input number*/
		u8 arr[5];
		while(temp != 0){
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	f9 f6       	brne	.-66     	; 0x1f7e <LCD_enuWriteNumber+0x2a>
			numOfDigits++;
			temp /= 10; 
		}
		
		/*Print the array element and add 48 to convert the number to its ASCII code*/
		for (u8 counter =numOfDigits; counter > 0;counter--)
    1fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	12 c0       	rjmp	.+36     	; 0x1fea <LCD_enuWriteNumber+0x96>
		{
			LCD_enuWriteData(arr[counter-1]+48);
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	88 2f       	mov	r24, r24
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	9c 01       	movw	r18, r24
    1fce:	21 50       	subi	r18, 0x01	; 1
    1fd0:	30 40       	sbci	r19, 0x00	; 0
    1fd2:	ce 01       	movw	r24, r28
    1fd4:	06 96       	adiw	r24, 0x06	; 6
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	e2 0f       	add	r30, r18
    1fda:	f3 1f       	adc	r31, r19
    1fdc:	80 81       	ld	r24, Z
    1fde:	80 5d       	subi	r24, 0xD0	; 208
    1fe0:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <LCD_enuWriteData>
			numOfDigits++;
			temp /= 10; 
		}
		
		/*Print the array element and add 48 to convert the number to its ASCII code*/
		for (u8 counter =numOfDigits; counter > 0;counter--)
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	81 50       	subi	r24, 0x01	; 1
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	88 23       	and	r24, r24
    1fee:	59 f7       	brne	.-42     	; 0x1fc6 <LCD_enuWriteNumber+0x72>
		{
			LCD_enuWriteData(arr[counter-1]+48);
		}
	}
	return Ret_enumErrorStatus;
    1ff0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ff2:	2c 96       	adiw	r28, 0x0c	; 12
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <LCD_enuWriteString>:
/*
*@brief  : Function to display a string on the LCD screen
*@param  : String and its length
*@return : Error state
*/
LCD_enuErrorStatus LCD_enuWriteString(const char* Copy_pchPattern, u8 Copy_u8Length){
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	00 d0       	rcall	.+0      	; 0x200a <LCD_enuWriteString+0x6>
    200a:	00 d0       	rcall	.+0      	; 0x200c <LCD_enuWriteString+0x8>
    200c:	0f 92       	push	r0
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	9c 83       	std	Y+4, r25	; 0x04
    2014:	8b 83       	std	Y+3, r24	; 0x03
    2016:	6d 83       	std	Y+5, r22	; 0x05
	
	LCD_enuErrorStatus Ret_enumErrorStatus = LCD_enumNOk;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	8a 83       	std	Y+2, r24	; 0x02
	for( u8 counter = 0; counter < Copy_u8Length ;counter++){
    201c:	19 82       	std	Y+1, r1	; 0x01
    201e:	0e c0       	rjmp	.+28     	; 0x203c <LCD_enuWriteString+0x38>
		
		LCD_enuWriteData(Copy_pchPattern[counter]);
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	28 2f       	mov	r18, r24
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	9c 81       	ldd	r25, Y+4	; 0x04
    202a:	fc 01       	movw	r30, r24
    202c:	e2 0f       	add	r30, r18
    202e:	f3 1f       	adc	r31, r19
    2030:	80 81       	ld	r24, Z
    2032:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <LCD_enuWriteData>
*@return : Error state
*/
LCD_enuErrorStatus LCD_enuWriteString(const char* Copy_pchPattern, u8 Copy_u8Length){
	
	LCD_enuErrorStatus Ret_enumErrorStatus = LCD_enumNOk;
	for( u8 counter = 0; counter < Copy_u8Length ;counter++){
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	8f 5f       	subi	r24, 0xFF	; 255
    203a:	89 83       	std	Y+1, r24	; 0x01
    203c:	99 81       	ldd	r25, Y+1	; 0x01
    203e:	8d 81       	ldd	r24, Y+5	; 0x05
    2040:	98 17       	cp	r25, r24
    2042:	70 f3       	brcs	.-36     	; 0x2020 <LCD_enuWriteString+0x1c>
		
		LCD_enuWriteData(Copy_pchPattern[counter]);
	}
	return Ret_enumErrorStatus;
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <LCD_enuDisplaySpecialPattern>:
/*
*@brief  : Function to store a pattern in CGRAM and display it in a specific location
*@param  : Pattern, Block number in CGRAM,and the position
*@return : Error state
*/
LCD_enuErrorStatus LCD_enuDisplaySpecialPattern(const u8* Copy_pu8Pattern, u8 Copy_u8CGRAMBlockNumber, u8 Copy_u8X, u8 Copy_u8Y){
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
    205e:	28 97       	sbiw	r28, 0x08	; 8
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	de bf       	out	0x3e, r29	; 62
    2066:	0f be       	out	0x3f, r0	; 63
    2068:	cd bf       	out	0x3d, r28	; 61
    206a:	9d 83       	std	Y+5, r25	; 0x05
    206c:	8c 83       	std	Y+4, r24	; 0x04
    206e:	6e 83       	std	Y+6, r22	; 0x06
    2070:	4f 83       	std	Y+7, r20	; 0x07
    2072:	28 87       	std	Y+8, r18	; 0x08
	
	LCD_enuErrorStatus Ret_enumErrorStatus = LCD_enumNOk;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	8b 83       	std	Y+3, r24	; 0x03
	
	/*Check on the given position */
	if((Copy_u8X > SECOND_LINE)||(Copy_u8Y > NO_OF_Columns)){
    2078:	8f 81       	ldd	r24, Y+7	; 0x07
    207a:	83 30       	cpi	r24, 0x03	; 3
    207c:	18 f4       	brcc	.+6      	; 0x2084 <LCD_enuDisplaySpecialPattern+0x2e>
    207e:	88 85       	ldd	r24, Y+8	; 0x08
    2080:	81 31       	cpi	r24, 0x11	; 17
    2082:	18 f0       	brcs	.+6      	; 0x208a <LCD_enuDisplaySpecialPattern+0x34>
		
		Ret_enumErrorStatus =	LCD_enumWrongPosition;
    2084:	84 e0       	ldi	r24, 0x04	; 4
    2086:	8b 83       	std	Y+3, r24	; 0x03
    2088:	2f c0       	rjmp	.+94     	; 0x20e8 <LCD_enuDisplaySpecialPattern+0x92>
		
	/*Check the number of CGRAM blocks to determine if it exceeds 8 or not*/
	}else if (Copy_u8CGRAMBlockNumber >8)
    208a:	8e 81       	ldd	r24, Y+6	; 0x06
    208c:	89 30       	cpi	r24, 0x09	; 9
    208e:	18 f0       	brcs	.+6      	; 0x2096 <LCD_enuDisplaySpecialPattern+0x40>
	{
		Ret_enumErrorStatus = LCD_enumWrongBlockNumber;
    2090:	86 e0       	ldi	r24, 0x06	; 6
    2092:	8b 83       	std	Y+3, r24	; 0x03
    2094:	29 c0       	rjmp	.+82     	; 0x20e8 <LCD_enuDisplaySpecialPattern+0x92>
	}else{
		Ret_enumErrorStatus = LCD_enumOk;
    2096:	1b 82       	std	Y+3, r1	; 0x03
	   /*Code implementation*/
	   /*Step1 :Get the location in the CGRAM*/
	   u8 Loc_u8CGRAMLocation = Copy_u8CGRAMBlockNumber *8;
    2098:	8e 81       	ldd	r24, Y+6	; 0x06
    209a:	88 2f       	mov	r24, r24
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	88 0f       	add	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	88 0f       	add	r24, r24
    20a8:	99 1f       	adc	r25, r25
    20aa:	8a 83       	std	Y+2, r24	; 0x02
	   
	   /*Step2: Load this value in Address counter*/
	   LCD_enuWriteCommand(64+Loc_u8CGRAMLocation);
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	80 5c       	subi	r24, 0xC0	; 192
    20b0:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_enuWriteCommand>
	   
	   /*Step3: Store the pattern in this location*/
	   for (u8 counter = 0 ; counter<8;counter++)
    20b4:	19 82       	std	Y+1, r1	; 0x01
    20b6:	0e c0       	rjmp	.+28     	; 0x20d4 <LCD_enuDisplaySpecialPattern+0x7e>
	   {
	   	LCD_enuWriteData(Copy_pu8Pattern[counter]);	
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	9d 81       	ldd	r25, Y+5	; 0x05
    20c2:	fc 01       	movw	r30, r24
    20c4:	e2 0f       	add	r30, r18
    20c6:	f3 1f       	adc	r31, r19
    20c8:	80 81       	ld	r24, Z
    20ca:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <LCD_enuWriteData>
	   
	   /*Step2: Load this value in Address counter*/
	   LCD_enuWriteCommand(64+Loc_u8CGRAMLocation);
	   
	   /*Step3: Store the pattern in this location*/
	   for (u8 counter = 0 ; counter<8;counter++)
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	8f 5f       	subi	r24, 0xFF	; 255
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	88 30       	cpi	r24, 0x08	; 8
    20d8:	78 f3       	brcs	.-34     	; 0x20b8 <LCD_enuDisplaySpecialPattern+0x62>
	   {
	   	LCD_enuWriteData(Copy_pu8Pattern[counter]);	
	   }
	   
	   /*Step4: Set AC pointer to the DDRAM again*/
       LCD_enuGotoDDRAM_XY(Copy_u8X,Copy_u8Y);
    20da:	8f 81       	ldd	r24, Y+7	; 0x07
    20dc:	68 85       	ldd	r22, Y+8	; 0x08
    20de:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <LCD_enuGotoDDRAM_XY>
	   
	   /*Step5: Display The pattern on the LCD Location (x,y)*/
	   /*LCD_enuWriteData function takes a value (0 to 7), so it starts searching in the CGRAM, not in the CGROM */
	   LCD_enuWriteData(Copy_u8CGRAMBlockNumber);
    20e2:	8e 81       	ldd	r24, Y+6	; 0x06
    20e4:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <LCD_enuWriteData>
	   
	   }
	return Ret_enumErrorStatus;
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    20ea:	28 96       	adiw	r28, 0x08	; 8
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <Enable>:
/*
*@brief  : Function to send pulses on the Enable pin
*/
static void Enable (void){
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
	DIO_enumSetPin(LCD_Pins[EN].port,LCD_Pins[EN].pin, DIO_enumOutputHIGH);
    2104:	80 91 90 01 	lds	r24, 0x0190
    2108:	90 91 91 01 	lds	r25, 0x0191
    210c:	69 2f       	mov	r22, r25
    210e:	41 e0       	ldi	r20, 0x01	; 1
    2110:	0e 94 70 23 	call	0x46e0	; 0x46e0 <DIO_enumSetPin>
	Delay(0.01);
    2114:	6a e0       	ldi	r22, 0x0A	; 10
    2116:	77 ed       	ldi	r23, 0xD7	; 215
    2118:	83 e2       	ldi	r24, 0x23	; 35
    211a:	9c e3       	ldi	r25, 0x3C	; 60
    211c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <Delay>
	DIO_enumSetPin(LCD_Pins[EN].port,LCD_Pins[EN].pin, DIO_enumOutputLOW);
    2120:	80 91 90 01 	lds	r24, 0x0190
    2124:	90 91 91 01 	lds	r25, 0x0191
    2128:	69 2f       	mov	r22, r25
    212a:	40 e0       	ldi	r20, 0x00	; 0
    212c:	0e 94 70 23 	call	0x46e0	; 0x46e0 <DIO_enumSetPin>
	Delay(0.02);
    2130:	6a e0       	ldi	r22, 0x0A	; 10
    2132:	77 ed       	ldi	r23, 0xD7	; 215
    2134:	83 ea       	ldi	r24, 0xA3	; 163
    2136:	9c e3       	ldi	r25, 0x3C	; 60
    2138:	0e 94 ad 07 	call	0xf5a	; 0xf5a <Delay>
}
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <KEYPAD_init>:
*@brief  : Function to initialize Keypad
*@param  : void
*@return : Error state
*/

KEYPAD_enumError_t KEYPAD_init(void){
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	00 d0       	rcall	.+0      	; 0x2148 <KEYPAD_init+0x6>
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62

	KEYPAD_enumError_t KeyPadReturn_enumError =KEYPAD_enumNOk;
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter ;
	for ( counter =0 ; counter<(NUM_OF_COLS+NUM_OF_ROWS) ;counter++)
    2150:	19 82       	std	Y+1, r1	; 0x01
    2152:	60 c0       	rjmp	.+192    	; 0x2214 <KEYPAD_init+0xd2>
	{
		/****************Check on Port number of every PIN************/
		if((KeyPadPins[counter].port>DIO_enumPortD)||(KeyPadPins[counter].port<DIO_enumPortA)){
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	28 2f       	mov	r18, r24
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	c9 01       	movw	r24, r18
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	82 0f       	add	r24, r18
    2162:	93 1f       	adc	r25, r19
    2164:	fc 01       	movw	r30, r24
    2166:	ec 56       	subi	r30, 0x6C	; 108
    2168:	fe 4f       	sbci	r31, 0xFE	; 254
    216a:	80 81       	ld	r24, Z
    216c:	84 30       	cpi	r24, 0x04	; 4
    216e:	18 f0       	brcs	.+6      	; 0x2176 <KEYPAD_init+0x34>
			KeyPadReturn_enumError	= KEYPAD_enumWrongPort;
    2170:	82 e0       	ldi	r24, 0x02	; 2
    2172:	8a 83       	std	Y+2, r24	; 0x02
    2174:	4c c0       	rjmp	.+152    	; 0x220e <KEYPAD_init+0xcc>
			
		/****************Check on pin number of every PIN************/
		}else if((KeyPadPins[counter].pin>DIO_enumPin7)||(KeyPadPins[counter].pin<DIO_enumPin0)){
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	28 2f       	mov	r18, r24
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	c9 01       	movw	r24, r18
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	82 0f       	add	r24, r18
    2184:	93 1f       	adc	r25, r19
    2186:	fc 01       	movw	r30, r24
    2188:	eb 56       	subi	r30, 0x6B	; 107
    218a:	fe 4f       	sbci	r31, 0xFE	; 254
    218c:	80 81       	ld	r24, Z
    218e:	88 30       	cpi	r24, 0x08	; 8
    2190:	18 f0       	brcs	.+6      	; 0x2198 <KEYPAD_init+0x56>
			KeyPadReturn_enumError  = KEYPAD_enumWrongPin;
    2192:	83 e0       	ldi	r24, 0x03	; 3
    2194:	8a 83       	std	Y+2, r24	; 0x02
    2196:	3b c0       	rjmp	.+118    	; 0x220e <KEYPAD_init+0xcc>
			
		/****************Check on the configuration of every PIN************/
		}else if((KeyPadPins[counter].confg<DIO_enumOutputLOW)||(KeyPadPins[counter].confg>DIO_enumInputExternalPD)){
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	c9 01       	movw	r24, r18
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	82 0f       	add	r24, r18
    21a6:	93 1f       	adc	r25, r19
    21a8:	fc 01       	movw	r30, r24
    21aa:	ea 56       	subi	r30, 0x6A	; 106
    21ac:	fe 4f       	sbci	r31, 0xFE	; 254
    21ae:	80 81       	ld	r24, Z
    21b0:	84 30       	cpi	r24, 0x04	; 4
    21b2:	18 f0       	brcs	.+6      	; 0x21ba <KEYPAD_init+0x78>
			KeyPadReturn_enumError = KEYPAD_enumWrongConfg;
    21b4:	84 e0       	ldi	r24, 0x04	; 4
    21b6:	8a 83       	std	Y+2, r24	; 0x02
    21b8:	2a c0       	rjmp	.+84     	; 0x220e <KEYPAD_init+0xcc>
		}else{
			KeyPadReturn_enumError =KEYPAD_enumOk;
    21ba:	1a 82       	std	Y+2, r1	; 0x02
			
			/*Code Implementation*/
			DIO_enumSetPinConfig(KeyPadPins[counter].port,KeyPadPins[counter].pin,KeyPadPins[counter].confg);
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	c9 01       	movw	r24, r18
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	82 0f       	add	r24, r18
    21ca:	93 1f       	adc	r25, r19
    21cc:	fc 01       	movw	r30, r24
    21ce:	ec 56       	subi	r30, 0x6C	; 108
    21d0:	fe 4f       	sbci	r31, 0xFE	; 254
    21d2:	50 81       	ld	r21, Z
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	c9 01       	movw	r24, r18
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	82 0f       	add	r24, r18
    21e2:	93 1f       	adc	r25, r19
    21e4:	fc 01       	movw	r30, r24
    21e6:	eb 56       	subi	r30, 0x6B	; 107
    21e8:	fe 4f       	sbci	r31, 0xFE	; 254
    21ea:	40 81       	ld	r20, Z
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	28 2f       	mov	r18, r24
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	c9 01       	movw	r24, r18
    21f4:	88 0f       	add	r24, r24
    21f6:	99 1f       	adc	r25, r25
    21f8:	82 0f       	add	r24, r18
    21fa:	93 1f       	adc	r25, r19
    21fc:	fc 01       	movw	r30, r24
    21fe:	ea 56       	subi	r30, 0x6A	; 106
    2200:	fe 4f       	sbci	r31, 0xFE	; 254
    2202:	90 81       	ld	r25, Z
    2204:	85 2f       	mov	r24, r21
    2206:	64 2f       	mov	r22, r20
    2208:	49 2f       	mov	r20, r25
    220a:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>

KEYPAD_enumError_t KEYPAD_init(void){

	KEYPAD_enumError_t KeyPadReturn_enumError =KEYPAD_enumNOk;
	u8 counter ;
	for ( counter =0 ; counter<(NUM_OF_COLS+NUM_OF_ROWS) ;counter++)
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	88 30       	cpi	r24, 0x08	; 8
    2218:	08 f4       	brcc	.+2      	; 0x221c <KEYPAD_init+0xda>
    221a:	9c cf       	rjmp	.-200    	; 0x2154 <KEYPAD_init+0x12>
			/*Code Implementation*/
			DIO_enumSetPinConfig(KeyPadPins[counter].port,KeyPadPins[counter].pin,KeyPadPins[counter].confg);
		}
	}
	
	return 	KeyPadReturn_enumError;
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <KEYPAD_enuGetKey>:
*@brief  : Function to Get the pressed Key
*@param  : A pointer points to unsigned char passed by address
*@return : Error state
*/

KEYPAD_enumError_t KEYPAD_enuGetKey(u8* Add_Pu8PressedKey){
    2228:	df 93       	push	r29
    222a:	cf 93       	push	r28
    222c:	00 d0       	rcall	.+0      	; 0x222e <KEYPAD_enuGetKey+0x6>
    222e:	00 d0       	rcall	.+0      	; 0x2230 <KEYPAD_enuGetKey+0x8>
    2230:	00 d0       	rcall	.+0      	; 0x2232 <KEYPAD_enuGetKey+0xa>
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	9e 83       	std	Y+6, r25	; 0x06
    2238:	8d 83       	std	Y+5, r24	; 0x05
	KEYPAD_enumError_t KeyPadReturn_enumError =KEYPAD_enumNOk;
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	8b 83       	std	Y+3, r24	; 0x03
	if (Add_Pu8PressedKey == NULL)
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	9e 81       	ldd	r25, Y+6	; 0x06
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	19 f4       	brne	.+6      	; 0x224c <KEYPAD_enuGetKey+0x24>
	{
		KeyPadReturn_enumError = KEYPAD_enumNULLPointer;
    2246:	85 e0       	ldi	r24, 0x05	; 5
    2248:	8b 83       	std	Y+3, r24	; 0x03
    224a:	9b c0       	rjmp	.+310    	; 0x2382 <KEYPAD_enuGetKey+0x15a>
	}else{
		KeyPadReturn_enumError = KEYPAD_enumOk;
    224c:	1b 82       	std	Y+3, r1	; 0x03
		
		/*Code Implementation*/
		u8 Col_counter ;
		u8 Row_counter ;
		u8 Loc_u8PinValue = LogicHigh;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	8c 83       	std	Y+4, r24	; 0x04
		*Add_Pu8PressedKey = NOT_PRESSED; /*Initial state*/
    2252:	ed 81       	ldd	r30, Y+5	; 0x05
    2254:	fe 81       	ldd	r31, Y+6	; 0x06
    2256:	8f ef       	ldi	r24, 0xFF	; 255
    2258:	80 83       	st	Z, r24
		
		for (Col_counter = 0 ; Col_counter < NUM_OF_COLS; Col_counter++)
    225a:	1a 82       	std	Y+2, r1	; 0x02
    225c:	8e c0       	rjmp	.+284    	; 0x237a <KEYPAD_enuGetKey+0x152>
		{   /*Assign Zero to a specific column */
			DIO_enumSetPin(KeyPadPins[Col_counter+NUM_OF_COLS].port,KeyPadPins[Col_counter+NUM_OF_COLS].pin,DIO_enumOutputLOW);
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	88 2f       	mov	r24, r24
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9c 01       	movw	r18, r24
    2266:	2c 5f       	subi	r18, 0xFC	; 252
    2268:	3f 4f       	sbci	r19, 0xFF	; 255
    226a:	c9 01       	movw	r24, r18
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	82 0f       	add	r24, r18
    2272:	93 1f       	adc	r25, r19
    2274:	fc 01       	movw	r30, r24
    2276:	ec 56       	subi	r30, 0x6C	; 108
    2278:	fe 4f       	sbci	r31, 0xFE	; 254
    227a:	40 81       	ld	r20, Z
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	88 2f       	mov	r24, r24
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	9c 01       	movw	r18, r24
    2284:	2c 5f       	subi	r18, 0xFC	; 252
    2286:	3f 4f       	sbci	r19, 0xFF	; 255
    2288:	c9 01       	movw	r24, r18
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	82 0f       	add	r24, r18
    2290:	93 1f       	adc	r25, r19
    2292:	fc 01       	movw	r30, r24
    2294:	eb 56       	subi	r30, 0x6B	; 107
    2296:	fe 4f       	sbci	r31, 0xFE	; 254
    2298:	90 81       	ld	r25, Z
    229a:	84 2f       	mov	r24, r20
    229c:	69 2f       	mov	r22, r25
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	0e 94 70 23 	call	0x46e0	; 0x46e0 <DIO_enumSetPin>
			
			/*Read the states of the Rows*/
			for (Row_counter = 0 ; Row_counter < NUM_OF_ROWS; Row_counter++)
    22a4:	19 82       	std	Y+1, r1	; 0x01
    22a6:	3b c0       	rjmp	.+118    	; 0x231e <KEYPAD_enuGetKey+0xf6>
			{
				/*Check the state of the Rows*/
				DIO_enumReadState(KeyPadPins[Row_counter].port,KeyPadPins[Row_counter].pin, &Loc_u8PinValue); 
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	c9 01       	movw	r24, r18
    22b0:	88 0f       	add	r24, r24
    22b2:	99 1f       	adc	r25, r25
    22b4:	82 0f       	add	r24, r18
    22b6:	93 1f       	adc	r25, r19
    22b8:	fc 01       	movw	r30, r24
    22ba:	ec 56       	subi	r30, 0x6C	; 108
    22bc:	fe 4f       	sbci	r31, 0xFE	; 254
    22be:	40 81       	ld	r20, Z
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	c9 01       	movw	r24, r18
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	82 0f       	add	r24, r18
    22ce:	93 1f       	adc	r25, r19
    22d0:	fc 01       	movw	r30, r24
    22d2:	eb 56       	subi	r30, 0x6B	; 107
    22d4:	fe 4f       	sbci	r31, 0xFE	; 254
    22d6:	90 81       	ld	r25, Z
    22d8:	9e 01       	movw	r18, r28
    22da:	2c 5f       	subi	r18, 0xFC	; 252
    22dc:	3f 4f       	sbci	r19, 0xFF	; 255
    22de:	84 2f       	mov	r24, r20
    22e0:	69 2f       	mov	r22, r25
    22e2:	a9 01       	movw	r20, r18
    22e4:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <DIO_enumReadState>
				if(Loc_u8PinValue ==LogicLow)
    22e8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ea:	88 23       	and	r24, r24
    22ec:	a9 f4       	brne	.+42     	; 0x2318 <KEYPAD_enuGetKey+0xf0>
				{
					*Add_Pu8PressedKey  = KeyPadStyle[Col_counter][Row_counter];
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	48 2f       	mov	r20, r24
    22f2:	50 e0       	ldi	r21, 0x00	; 0
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	28 2f       	mov	r18, r24
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	ca 01       	movw	r24, r20
    22fc:	88 0f       	add	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	82 0f       	add	r24, r18
    2306:	93 1f       	adc	r25, r19
    2308:	fc 01       	movw	r30, r24
    230a:	e4 55       	subi	r30, 0x54	; 84
    230c:	fe 4f       	sbci	r31, 0xFE	; 254
    230e:	80 81       	ld	r24, Z
    2310:	ed 81       	ldd	r30, Y+5	; 0x05
    2312:	fe 81       	ldd	r31, Y+6	; 0x06
    2314:	80 83       	st	Z, r24
    2316:	06 c0       	rjmp	.+12     	; 0x2324 <KEYPAD_enuGetKey+0xfc>
		for (Col_counter = 0 ; Col_counter < NUM_OF_COLS; Col_counter++)
		{   /*Assign Zero to a specific column */
			DIO_enumSetPin(KeyPadPins[Col_counter+NUM_OF_COLS].port,KeyPadPins[Col_counter+NUM_OF_COLS].pin,DIO_enumOutputLOW);
			
			/*Read the states of the Rows*/
			for (Row_counter = 0 ; Row_counter < NUM_OF_ROWS; Row_counter++)
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	8f 5f       	subi	r24, 0xFF	; 255
    231c:	89 83       	std	Y+1, r24	; 0x01
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	84 30       	cpi	r24, 0x04	; 4
    2322:	10 f2       	brcs	.-124    	; 0x22a8 <KEYPAD_enuGetKey+0x80>
					*Add_Pu8PressedKey  = KeyPadStyle[Col_counter][Row_counter];
					break;				
				}
			}
			/*To break out of the outer loop if it finds the pressed key*/
			if (*Add_Pu8PressedKey != NOT_PRESSED)
    2324:	ed 81       	ldd	r30, Y+5	; 0x05
    2326:	fe 81       	ldd	r31, Y+6	; 0x06
    2328:	80 81       	ld	r24, Z
    232a:	8f 3f       	cpi	r24, 0xFF	; 255
    232c:	51 f5       	brne	.+84     	; 0x2382 <KEYPAD_enuGetKey+0x15a>
			{
				break;
			}
			/*Return the column state to high*/
			DIO_enumSetPin(KeyPadPins[Col_counter+NUM_OF_COLS].port,KeyPadPins[Col_counter+NUM_OF_COLS].pin,DIO_enumOutputHIGH);
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	88 2f       	mov	r24, r24
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9c 01       	movw	r18, r24
    2336:	2c 5f       	subi	r18, 0xFC	; 252
    2338:	3f 4f       	sbci	r19, 0xFF	; 255
    233a:	c9 01       	movw	r24, r18
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	82 0f       	add	r24, r18
    2342:	93 1f       	adc	r25, r19
    2344:	fc 01       	movw	r30, r24
    2346:	ec 56       	subi	r30, 0x6C	; 108
    2348:	fe 4f       	sbci	r31, 0xFE	; 254
    234a:	40 81       	ld	r20, Z
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	88 2f       	mov	r24, r24
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9c 01       	movw	r18, r24
    2354:	2c 5f       	subi	r18, 0xFC	; 252
    2356:	3f 4f       	sbci	r19, 0xFF	; 255
    2358:	c9 01       	movw	r24, r18
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	82 0f       	add	r24, r18
    2360:	93 1f       	adc	r25, r19
    2362:	fc 01       	movw	r30, r24
    2364:	eb 56       	subi	r30, 0x6B	; 107
    2366:	fe 4f       	sbci	r31, 0xFE	; 254
    2368:	90 81       	ld	r25, Z
    236a:	84 2f       	mov	r24, r20
    236c:	69 2f       	mov	r22, r25
    236e:	41 e0       	ldi	r20, 0x01	; 1
    2370:	0e 94 70 23 	call	0x46e0	; 0x46e0 <DIO_enumSetPin>
		u8 Col_counter ;
		u8 Row_counter ;
		u8 Loc_u8PinValue = LogicHigh;
		*Add_Pu8PressedKey = NOT_PRESSED; /*Initial state*/
		
		for (Col_counter = 0 ; Col_counter < NUM_OF_COLS; Col_counter++)
    2374:	8a 81       	ldd	r24, Y+2	; 0x02
    2376:	8f 5f       	subi	r24, 0xFF	; 255
    2378:	8a 83       	std	Y+2, r24	; 0x02
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	84 30       	cpi	r24, 0x04	; 4
    237e:	08 f4       	brcc	.+2      	; 0x2382 <KEYPAD_enuGetKey+0x15a>
    2380:	6e cf       	rjmp	.-292    	; 0x225e <KEYPAD_enuGetKey+0x36>
			}
			/*Return the column state to high*/
			DIO_enumSetPin(KeyPadPins[Col_counter+NUM_OF_COLS].port,KeyPadPins[Col_counter+NUM_OF_COLS].pin,DIO_enumOutputHIGH);
		}
	}
	return KeyPadReturn_enumError;
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	26 96       	adiw	r28, 0x06	; 6
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <EEPROM_WriteSingleData>:
*Created: 5/2/2024
*Target:  ATMEGA32
*/
#include"EEPROM.h"

void EEPROM_WriteSingleData(u8 address,u8 data){
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	60 97       	sbiw	r28, 0x10	; 16
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	8f 87       	std	Y+15, r24	; 0x0f
    23ac:	68 8b       	std	Y+16, r22	; 0x10

	/*Init Master Clock*/
	I2C_MASTER_init(50000);
    23ae:	80 e5       	ldi	r24, 0x50	; 80
    23b0:	93 ec       	ldi	r25, 0xC3	; 195
    23b2:	0e 94 ff 19 	call	0x33fe	; 0x33fe <I2C_MASTER_init>
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	aa ef       	ldi	r26, 0xFA	; 250
    23bc:	b3 e4       	ldi	r27, 0x43	; 67
    23be:	8b 87       	std	Y+11, r24	; 0x0b
    23c0:	9c 87       	std	Y+12, r25	; 0x0c
    23c2:	ad 87       	std	Y+13, r26	; 0x0d
    23c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    23cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	4a ef       	ldi	r20, 0xFA	; 250
    23d4:	54 e4       	ldi	r21, 0x44	; 68
    23d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	8f 83       	std	Y+7, r24	; 0x07
    23e0:	98 87       	std	Y+8, r25	; 0x08
    23e2:	a9 87       	std	Y+9, r26	; 0x09
    23e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23e6:	6f 81       	ldd	r22, Y+7	; 0x07
    23e8:	78 85       	ldd	r23, Y+8	; 0x08
    23ea:	89 85       	ldd	r24, Y+9	; 0x09
    23ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e8       	ldi	r20, 0x80	; 128
    23f4:	5f e3       	ldi	r21, 0x3F	; 63
    23f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23fa:	88 23       	and	r24, r24
    23fc:	2c f4       	brge	.+10     	; 0x2408 <EEPROM_WriteSingleData+0x72>
		__ticks = 1;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	9e 83       	std	Y+6, r25	; 0x06
    2404:	8d 83       	std	Y+5, r24	; 0x05
    2406:	3f c0       	rjmp	.+126    	; 0x2486 <EEPROM_WriteSingleData+0xf0>
	else if (__tmp > 65535)
    2408:	6f 81       	ldd	r22, Y+7	; 0x07
    240a:	78 85       	ldd	r23, Y+8	; 0x08
    240c:	89 85       	ldd	r24, Y+9	; 0x09
    240e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	3f ef       	ldi	r19, 0xFF	; 255
    2414:	4f e7       	ldi	r20, 0x7F	; 127
    2416:	57 e4       	ldi	r21, 0x47	; 71
    2418:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    241c:	18 16       	cp	r1, r24
    241e:	4c f5       	brge	.+82     	; 0x2472 <EEPROM_WriteSingleData+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2420:	6b 85       	ldd	r22, Y+11	; 0x0b
    2422:	7c 85       	ldd	r23, Y+12	; 0x0c
    2424:	8d 85       	ldd	r24, Y+13	; 0x0d
    2426:	9e 85       	ldd	r25, Y+14	; 0x0e
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e2       	ldi	r20, 0x20	; 32
    242e:	51 e4       	ldi	r21, 0x41	; 65
    2430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	bc 01       	movw	r22, r24
    243a:	cd 01       	movw	r24, r26
    243c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	9e 83       	std	Y+6, r25	; 0x06
    2446:	8d 83       	std	Y+5, r24	; 0x05
    2448:	0f c0       	rjmp	.+30     	; 0x2468 <EEPROM_WriteSingleData+0xd2>
    244a:	88 ec       	ldi	r24, 0xC8	; 200
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	9c 83       	std	Y+4, r25	; 0x04
    2450:	8b 83       	std	Y+3, r24	; 0x03
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	9c 81       	ldd	r25, Y+4	; 0x04
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <EEPROM_WriteSingleData+0xc0>
    245a:	9c 83       	std	Y+4, r25	; 0x04
    245c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245e:	8d 81       	ldd	r24, Y+5	; 0x05
    2460:	9e 81       	ldd	r25, Y+6	; 0x06
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	9e 83       	std	Y+6, r25	; 0x06
    2466:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2468:	8d 81       	ldd	r24, Y+5	; 0x05
    246a:	9e 81       	ldd	r25, Y+6	; 0x06
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	69 f7       	brne	.-38     	; 0x244a <EEPROM_WriteSingleData+0xb4>
    2470:	14 c0       	rjmp	.+40     	; 0x249a <EEPROM_WriteSingleData+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2472:	6f 81       	ldd	r22, Y+7	; 0x07
    2474:	78 85       	ldd	r23, Y+8	; 0x08
    2476:	89 85       	ldd	r24, Y+9	; 0x09
    2478:	9a 85       	ldd	r25, Y+10	; 0x0a
    247a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	9e 81       	ldd	r25, Y+6	; 0x06
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	89 83       	std	Y+1, r24	; 0x01
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	9a 81       	ldd	r25, Y+2	; 0x02
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <EEPROM_WriteSingleData+0xfc>
    2496:	9a 83       	std	Y+2, r25	; 0x02
    2498:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(500);

	/*Send Start Condition*/
	I2C_SendSTART();
    249a:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <I2C_SendSTART>

	/*
	 * Send Device ID and Operation type
	 * Device ID is 1010 that is fixed
	 * */
	I2C_SendAddress(0b1010000,WRITE_OPERATION);
    249e:	80 e5       	ldi	r24, 0x50	; 80
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	0e 94 49 1b 	call	0x3692	; 0x3692 <I2C_SendAddress>

	/*Send Word Address = EEPROM Address*/
	I2C_SendData(address);
    24a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a8:	0e 94 de 1a 	call	0x35bc	; 0x35bc <I2C_SendData>

	/*Send Data*/
	I2C_SendData(data);
    24ac:	88 89       	ldd	r24, Y+16	; 0x10
    24ae:	0e 94 de 1a 	call	0x35bc	; 0x35bc <I2C_SendData>

	/*Send Stop Condition*/
	I2C_SendSTOP();
    24b2:	0e 94 b8 1a 	call	0x3570	; 0x3570 <I2C_SendSTOP>


}
    24b6:	60 96       	adiw	r28, 0x10	; 16
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	cf 91       	pop	r28
    24c4:	df 91       	pop	r29
    24c6:	08 95       	ret

000024c8 <EEPROM_ReadSingleData>:
void EEPROM_ReadSingleData(u8 address,u8 *data){
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <EEPROM_ReadSingleData+0x6>
    24ce:	0f 92       	push	r0
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	7b 83       	std	Y+3, r23	; 0x03
    24d8:	6a 83       	std	Y+2, r22	; 0x02

	/*First, Master writes address of EPROM Location on the bus*/

	/*Send Start Condition*/
	I2C_SendSTART();
    24da:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <I2C_SendSTART>

	/*
	 * Send Device ID and Operation type
	 * Device ID is 1010 that is fixed
	 * */
	I2C_SendAddress(0b1010000,WRITE_OPERATION);
    24de:	80 e5       	ldi	r24, 0x50	; 80
    24e0:	60 e0       	ldi	r22, 0x00	; 0
    24e2:	0e 94 49 1b 	call	0x3692	; 0x3692 <I2C_SendAddress>

	/*Send Word Address = EEPROM Address*/
	I2C_SendData(address);
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	0e 94 de 1a 	call	0x35bc	; 0x35bc <I2C_SendData>

	/*
	 * Then, Master reads the content of this location so that
	 * It needs to change the data direction by sending Repeated start
	 * */
	I2C_SendRepeatedStart();
    24ec:	0e 94 85 1c 	call	0x390a	; 0x390a <I2C_SendRepeatedStart>

	I2C_SendAddress(0b1010000,READ_OPERATION);
    24f0:	80 e5       	ldi	r24, 0x50	; 80
    24f2:	61 e0       	ldi	r22, 0x01	; 1
    24f4:	0e 94 49 1b 	call	0x3692	; 0x3692 <I2C_SendAddress>

	/*Get Data*/
	I2C_MasterReadDataWithNACK(data);
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	9b 81       	ldd	r25, Y+3	; 0x03
    24fc:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <I2C_MasterReadDataWithNACK>


	/*Send Stop Condition*/
	I2C_SendSTOP();
    2500:	0e 94 b8 1a 	call	0x3570	; 0x3570 <I2C_SendSTOP>
}
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	0f 90       	pop	r0
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	08 95       	ret

00002510 <two_power>:

#define GET_2BITS_MASK  0x03
#define CLR_MASK_REG    0x00

u16 two_power (u8 num)
{
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	00 d0       	rcall	.+0      	; 0x2516 <two_power+0x6>
    2516:	00 d0       	rcall	.+0      	; 0x2518 <two_power+0x8>
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
    251c:	8c 83       	std	Y+4, r24	; 0x04
    u16 result=1;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	9b 83       	std	Y+3, r25	; 0x03
    2524:	8a 83       	std	Y+2, r24	; 0x02
    for (u8 i=0;i<num;i++)
    2526:	19 82       	std	Y+1, r1	; 0x01
    2528:	09 c0       	rjmp	.+18     	; 0x253c <two_power+0x2c>
    {
        result*=2;
    252a:	8a 81       	ldd	r24, Y+2	; 0x02
    252c:	9b 81       	ldd	r25, Y+3	; 0x03
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	9b 83       	std	Y+3, r25	; 0x03
    2534:	8a 83       	std	Y+2, r24	; 0x02
#define CLR_MASK_REG    0x00

u16 two_power (u8 num)
{
    u16 result=1;
    for (u8 i=0;i<num;i++)
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	8f 5f       	subi	r24, 0xFF	; 255
    253a:	89 83       	std	Y+1, r24	; 0x01
    253c:	99 81       	ldd	r25, Y+1	; 0x01
    253e:	8c 81       	ldd	r24, Y+4	; 0x04
    2540:	98 17       	cp	r25, r24
    2542:	98 f3       	brcs	.-26     	; 0x252a <two_power+0x1a>
    {
        result*=2;
    }
    return result;
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	0f 90       	pop	r0
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <TMR1_voidInitPreCompile>:
 * @brief Initialize the Timer 0 (TMR0) driver with pre-compiled settings.
 *
 * This function performs the initialization of the TMR0 module with a predefined configuration.
 * It should be called before any other TMR0-related functions to ensure the timer is set up correctly.
 */
void TMR1_voidInitPreCompile(void){
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	00 d0       	rcall	.+0      	; 0x255c <TMR1_voidInitPreCompile+0x6>
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62

	u8 TCCR1A_Temp = TCCR1A;
    2560:	ef e4       	ldi	r30, 0x4F	; 79
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	8a 83       	std	Y+2, r24	; 0x02
	u8 TCCR1B_Temp = TCCR1B;
    2568:	ee e4       	ldi	r30, 0x4E	; 78
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	80 81       	ld	r24, Z
    256e:	89 83       	std	Y+1, r24	; 0x01

	/*Select Timer Mode*/
	/*Set the first 2 bits in TCCR1A*/
	TCCR1A_Temp &= CLR_MASK_REG;
    2570:	1a 82       	std	Y+2, r1	; 0x02
	TCCR1A_Temp |= ((TIMER1_MODE & GET_2BITS_MASK )<<WGM10);
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	81 60       	ori	r24, 0x01	; 1
    2576:	8a 83       	std	Y+2, r24	; 0x02

	/*Set the Second 2 bits in TCCR1A*/
	TCCR1B_Temp &= CLR_MASK_REG;
    2578:	19 82       	std	Y+1, r1	; 0x01
	TCCR1B_Temp |= ((TIMER1_MODE>>2)<<WGM12);
    257a:	89 81       	ldd	r24, Y+1	; 0x01
    257c:	88 60       	ori	r24, 0x08	; 8
    257e:	89 83       	std	Y+1, r24	; 0x01

	TCCR1A =TCCR1A_Temp;
    2580:	ef e4       	ldi	r30, 0x4F	; 79
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	80 83       	st	Z, r24
	TCCR1B =TCCR1B_Temp;
    2588:	ee e4       	ldi	r30, 0x4E	; 78
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	80 83       	st	Z, r24

	/*Enable Interrupts */

	/*Enable Timer1, Output Compare A Match Interrupt*/
	TIMSK |=(ENABLE << OCIE1A);
    2590:	a9 e5       	ldi	r26, 0x59	; 89
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e9 e5       	ldi	r30, 0x59	; 89
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	80 61       	ori	r24, 0x10	; 16
    259c:	8c 93       	st	X, r24
	/*Enable Timer1, Output Compare B Match Interrupt*/
	TIMSK |=(ENABLE << OCIE1B);
    259e:	a9 e5       	ldi	r26, 0x59	; 89
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e9 e5       	ldi	r30, 0x59	; 89
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	88 60       	ori	r24, 0x08	; 8
    25aa:	8c 93       	st	X, r24
	/*Enable Timer1,Overflow Interrupt*/
	TIMSK |=(ENABLE << TOIE1);
    25ac:	a9 e5       	ldi	r26, 0x59	; 89
    25ae:	b0 e0       	ldi	r27, 0x00	; 0
    25b0:	e9 e5       	ldi	r30, 0x59	; 89
    25b2:	f0 e0       	ldi	r31, 0x00	; 0
    25b4:	80 81       	ld	r24, Z
    25b6:	84 60       	ori	r24, 0x04	; 4
    25b8:	8c 93       	st	X, r24

	/*4- Select input capture noise canceler mode-*/
	//TCCR1B |= (NOISE_CANCLER_MODE<<ICNC1);

}
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	08 95       	ret

000025c4 <TMR1_enuStart>:
 * @return TMR1_enuErrorStatus_t Error status of the start process.
 *
 * This function activates TMR0 to start counting based on the previously configured settings.
 * It returns an error status to indicate the success or nature of any failure in starting the timer.
 */
void TMR1_enuStart(void){
    25c4:	df 93       	push	r29
    25c6:	cf 93       	push	r28
    25c8:	0f 92       	push	r0
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
	/*Select clock source of Timer1*/
		u8 TCCR1B_Temp = TCCR1B;
    25ce:	ee e4       	ldi	r30, 0x4E	; 78
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	89 83       	std	Y+1, r24	; 0x01
		TCCR1B_Temp &= CLR_MASK_REG;
    25d6:	19 82       	std	Y+1, r1	; 0x01
		TCCR1B_Temp |= TIMER1_PRESCALER ;
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	82 60       	ori	r24, 0x02	; 2
    25dc:	89 83       	std	Y+1, r24	; 0x01
		TCCR1B =TCCR1B_Temp;
    25de:	ee e4       	ldi	r30, 0x4E	; 78
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	80 83       	st	Z, r24
}
    25e6:	0f 90       	pop	r0
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <TMR1_enuSetDutyCycleFastPWM>:
 *
 * This function configures the duty cycle for TMR0 when operating in Fast PWM mode. The duty cycle and PWM type
 * are specified by the user. It returns an error status to indicate success or the nature of any failure in setting
 * the duty cycle.
 */
void TMR1_enuSetDutyCycleFastPWM(u8 Copy_u8SelectTimerOption ,u8 Copy_u8FastPwmType,u8 Copy_u8DutyCycle, u8 Copy_OC1PinMode){
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	2e 97       	sbiw	r28, 0x0e	; 14
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
    2602:	8b 83       	std	Y+3, r24	; 0x03
    2604:	6c 83       	std	Y+4, r22	; 0x04
    2606:	4d 83       	std	Y+5, r20	; 0x05
    2608:	2e 83       	std	Y+6, r18	; 0x06

     /*Configure OC1A/B pin as an output*/
	 DIO_enumSetPinConfig(DIO_enumPortD,Copy_u8SelectTimerOption,DIO_enumOutputLOW);
    260a:	83 e0       	ldi	r24, 0x03	; 3
    260c:	6b 81       	ldd	r22, Y+3	; 0x03
    260e:	40 e0       	ldi	r20, 0x00	; 0
    2610:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>
	 u16 overflowValue = 0;
    2614:	1a 82       	std	Y+2, r1	; 0x02
    2616:	19 82       	std	Y+1, r1	; 0x01

	 /*Handle only three cases*/
if((Copy_u8FastPwmType == TIMER1_MODE5_FAST_PWM_8BIT)||
    2618:	8c 81       	ldd	r24, Y+4	; 0x04
    261a:	85 30       	cpi	r24, 0x05	; 5
    261c:	39 f0       	breq	.+14     	; 0x262c <TMR1_enuSetDutyCycleFastPWM+0x3e>
    261e:	8c 81       	ldd	r24, Y+4	; 0x04
    2620:	86 30       	cpi	r24, 0x06	; 6
    2622:	21 f0       	breq	.+8      	; 0x262c <TMR1_enuSetDutyCycleFastPWM+0x3e>
    2624:	8c 81       	ldd	r24, Y+4	; 0x04
    2626:	87 30       	cpi	r24, 0x07	; 7
    2628:	09 f0       	breq	.+2      	; 0x262c <TMR1_enuSetDutyCycleFastPWM+0x3e>
    262a:	e6 c0       	rjmp	.+460    	; 0x27f8 <TMR1_enuSetDutyCycleFastPWM+0x20a>
   (Copy_u8FastPwmType == TIMER1_MODE6_FAST_PWM_9BIT)||
   (Copy_u8FastPwmType == TIMER1_MODE7_FAST_PWM_10BIT)){

	/*Get Over flow value according to Timer Resolution*/
	/*Subtract 1 bec It starts counting form 0*/
	 switch(Copy_u8FastPwmType){
    262c:	8c 81       	ldd	r24, Y+4	; 0x04
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	3e 87       	std	Y+14, r19	; 0x0e
    2634:	2d 87       	std	Y+13, r18	; 0x0d
    2636:	4d 85       	ldd	r20, Y+13	; 0x0d
    2638:	5e 85       	ldd	r21, Y+14	; 0x0e
    263a:	46 30       	cpi	r20, 0x06	; 6
    263c:	51 05       	cpc	r21, r1
    263e:	89 f0       	breq	.+34     	; 0x2662 <TMR1_enuSetDutyCycleFastPWM+0x74>
    2640:	8d 85       	ldd	r24, Y+13	; 0x0d
    2642:	9e 85       	ldd	r25, Y+14	; 0x0e
    2644:	87 30       	cpi	r24, 0x07	; 7
    2646:	91 05       	cpc	r25, r1
    2648:	99 f0       	breq	.+38     	; 0x2670 <TMR1_enuSetDutyCycleFastPWM+0x82>
    264a:	2d 85       	ldd	r18, Y+13	; 0x0d
    264c:	3e 85       	ldd	r19, Y+14	; 0x0e
    264e:	25 30       	cpi	r18, 0x05	; 5
    2650:	31 05       	cpc	r19, r1
    2652:	a1 f4       	brne	.+40     	; 0x267c <TMR1_enuSetDutyCycleFastPWM+0x8e>

	 case TIMER1_MODE5_FAST_PWM_8BIT:
		 overflowValue =two_power(8)-1;
    2654:	88 e0       	ldi	r24, 0x08	; 8
    2656:	0e 94 88 12 	call	0x2510	; 0x2510 <two_power>
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	9a 83       	std	Y+2, r25	; 0x02
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	0d c0       	rjmp	.+26     	; 0x267c <TMR1_enuSetDutyCycleFastPWM+0x8e>
		 break;

	 case TIMER1_MODE6_FAST_PWM_9BIT:
		 overflowValue =two_power(9)-1;
    2662:	89 e0       	ldi	r24, 0x09	; 9
    2664:	0e 94 88 12 	call	0x2510	; 0x2510 <two_power>
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	9a 83       	std	Y+2, r25	; 0x02
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	06 c0       	rjmp	.+12     	; 0x267c <TMR1_enuSetDutyCycleFastPWM+0x8e>
	 		 break;

	 case TIMER1_MODE7_FAST_PWM_10BIT:
		 overflowValue =two_power(10)-1;
    2670:	8a e0       	ldi	r24, 0x0A	; 10
    2672:	0e 94 88 12 	call	0x2510	; 0x2510 <two_power>
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	9a 83       	std	Y+2, r25	; 0x02
    267a:	89 83       	std	Y+1, r24	; 0x01
	 		 break;
	 }

	switch(Copy_u8SelectTimerOption){
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	48 2f       	mov	r20, r24
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	5c 87       	std	Y+12, r21	; 0x0c
    2684:	4b 87       	std	Y+11, r20	; 0x0b
    2686:	8b 85       	ldd	r24, Y+11	; 0x0b
    2688:	9c 85       	ldd	r25, Y+12	; 0x0c
    268a:	84 30       	cpi	r24, 0x04	; 4
    268c:	91 05       	cpc	r25, r1
    268e:	09 f4       	brne	.+2      	; 0x2692 <TMR1_enuSetDutyCycleFastPWM+0xa4>
    2690:	5f c0       	rjmp	.+190    	; 0x2750 <TMR1_enuSetDutyCycleFastPWM+0x162>
    2692:	2b 85       	ldd	r18, Y+11	; 0x0b
    2694:	3c 85       	ldd	r19, Y+12	; 0x0c
    2696:	25 30       	cpi	r18, 0x05	; 5
    2698:	31 05       	cpc	r19, r1
    269a:	09 f0       	breq	.+2      	; 0x269e <TMR1_enuSetDutyCycleFastPWM+0xb0>
    269c:	ad c0       	rjmp	.+346    	; 0x27f8 <TMR1_enuSetDutyCycleFastPWM+0x20a>

		case TIMER1A :
			 /*1-Activate Mode*/
			TCCR1A |= (Copy_OC1PinMode <<COM1A0);
    269e:	af e4       	ldi	r26, 0x4F	; 79
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	ef e4       	ldi	r30, 0x4F	; 79
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	28 2f       	mov	r18, r24
    26aa:	8e 81       	ldd	r24, Y+6	; 0x06
    26ac:	88 2f       	mov	r24, r24
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	00 24       	eor	r0, r0
    26b2:	96 95       	lsr	r25
    26b4:	87 95       	ror	r24
    26b6:	07 94       	ror	r0
    26b8:	96 95       	lsr	r25
    26ba:	87 95       	ror	r24
    26bc:	07 94       	ror	r0
    26be:	98 2f       	mov	r25, r24
    26c0:	80 2d       	mov	r24, r0
    26c2:	82 2b       	or	r24, r18
    26c4:	8c 93       	st	X, r24

			 /*2-Assign OCR value*/
			 switch(Copy_OC1PinMode){
    26c6:	8e 81       	ldd	r24, Y+6	; 0x06
    26c8:	48 2f       	mov	r20, r24
    26ca:	50 e0       	ldi	r21, 0x00	; 0
    26cc:	5a 87       	std	Y+10, r21	; 0x0a
    26ce:	49 87       	std	Y+9, r20	; 0x09
    26d0:	89 85       	ldd	r24, Y+9	; 0x09
    26d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d4:	82 30       	cpi	r24, 0x02	; 2
    26d6:	91 05       	cpc	r25, r1
    26d8:	19 f1       	breq	.+70     	; 0x2720 <TMR1_enuSetDutyCycleFastPWM+0x132>
    26da:	29 85       	ldd	r18, Y+9	; 0x09
    26dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    26de:	23 30       	cpi	r18, 0x03	; 3
    26e0:	31 05       	cpc	r19, r1
    26e2:	09 f0       	breq	.+2      	; 0x26e6 <TMR1_enuSetDutyCycleFastPWM+0xf8>
    26e4:	89 c0       	rjmp	.+274    	; 0x27f8 <TMR1_enuSetDutyCycleFastPWM+0x20a>
			  	  case SET_OC1AB_ON_COMPARE_MATCH_AND_CLR_OC1AB_AT_TOP:

			  		  OCR1A = ((100-Copy_u8DutyCycle)*overflowValue)/100;
    26e6:	ea e4       	ldi	r30, 0x4A	; 74
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	8d 81       	ldd	r24, Y+5	; 0x05
    26ec:	28 2f       	mov	r18, r24
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	84 e6       	ldi	r24, 0x64	; 100
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	82 1b       	sub	r24, r18
    26f6:	93 0b       	sbc	r25, r19
    26f8:	9c 01       	movw	r18, r24
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	9a 81       	ldd	r25, Y+2	; 0x02
    26fe:	ac 01       	movw	r20, r24
    2700:	24 9f       	mul	r18, r20
    2702:	c0 01       	movw	r24, r0
    2704:	25 9f       	mul	r18, r21
    2706:	90 0d       	add	r25, r0
    2708:	34 9f       	mul	r19, r20
    270a:	90 0d       	add	r25, r0
    270c:	11 24       	eor	r1, r1
    270e:	24 e6       	ldi	r18, 0x64	; 100
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	b9 01       	movw	r22, r18
    2714:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__udivmodhi4>
    2718:	cb 01       	movw	r24, r22
    271a:	91 83       	std	Z+1, r25	; 0x01
    271c:	80 83       	st	Z, r24
    271e:	6c c0       	rjmp	.+216    	; 0x27f8 <TMR1_enuSetDutyCycleFastPWM+0x20a>
			  		  break;
			  	  case CLR_OC1AB_ON_COMPARE_MATCH_AND_SET_OC1AB_AT_TOP:
			  		  OCR1A = (Copy_u8DutyCycle*overflowValue)/100;
    2720:	ea e4       	ldi	r30, 0x4A	; 74
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	8d 81       	ldd	r24, Y+5	; 0x05
    2726:	28 2f       	mov	r18, r24
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	ac 01       	movw	r20, r24
    2730:	24 9f       	mul	r18, r20
    2732:	c0 01       	movw	r24, r0
    2734:	25 9f       	mul	r18, r21
    2736:	90 0d       	add	r25, r0
    2738:	34 9f       	mul	r19, r20
    273a:	90 0d       	add	r25, r0
    273c:	11 24       	eor	r1, r1
    273e:	24 e6       	ldi	r18, 0x64	; 100
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	b9 01       	movw	r22, r18
    2744:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__udivmodhi4>
    2748:	cb 01       	movw	r24, r22
    274a:	91 83       	std	Z+1, r25	; 0x01
    274c:	80 83       	st	Z, r24
    274e:	54 c0       	rjmp	.+168    	; 0x27f8 <TMR1_enuSetDutyCycleFastPWM+0x20a>
			  		  break;
				 }
		    break;
		case TIMER1B:
			 /*1-Activate Mode*/
			TCCR1A |= (Copy_OC1PinMode <<COM1B0);
    2750:	af e4       	ldi	r26, 0x4F	; 79
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	ef e4       	ldi	r30, 0x4F	; 79
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	28 2f       	mov	r18, r24
    275c:	8e 81       	ldd	r24, Y+6	; 0x06
    275e:	88 2f       	mov	r24, r24
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	82 95       	swap	r24
    2764:	92 95       	swap	r25
    2766:	90 7f       	andi	r25, 0xF0	; 240
    2768:	98 27       	eor	r25, r24
    276a:	80 7f       	andi	r24, 0xF0	; 240
    276c:	98 27       	eor	r25, r24
    276e:	82 2b       	or	r24, r18
    2770:	8c 93       	st	X, r24

			/*2-Assign OCR value*/
			 switch(Copy_OC1PinMode){
    2772:	8e 81       	ldd	r24, Y+6	; 0x06
    2774:	28 2f       	mov	r18, r24
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	38 87       	std	Y+8, r19	; 0x08
    277a:	2f 83       	std	Y+7, r18	; 0x07
    277c:	4f 81       	ldd	r20, Y+7	; 0x07
    277e:	58 85       	ldd	r21, Y+8	; 0x08
    2780:	42 30       	cpi	r20, 0x02	; 2
    2782:	51 05       	cpc	r21, r1
    2784:	11 f1       	breq	.+68     	; 0x27ca <TMR1_enuSetDutyCycleFastPWM+0x1dc>
    2786:	8f 81       	ldd	r24, Y+7	; 0x07
    2788:	98 85       	ldd	r25, Y+8	; 0x08
    278a:	83 30       	cpi	r24, 0x03	; 3
    278c:	91 05       	cpc	r25, r1
    278e:	a1 f5       	brne	.+104    	; 0x27f8 <TMR1_enuSetDutyCycleFastPWM+0x20a>
			 	 case SET_OC1AB_ON_COMPARE_MATCH_AND_CLR_OC1AB_AT_TOP:

					 OCR1B = ((100-Copy_u8DutyCycle)*overflowValue)/100;
    2790:	e8 e4       	ldi	r30, 0x48	; 72
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	8d 81       	ldd	r24, Y+5	; 0x05
    2796:	28 2f       	mov	r18, r24
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	84 e6       	ldi	r24, 0x64	; 100
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	82 1b       	sub	r24, r18
    27a0:	93 0b       	sbc	r25, r19
    27a2:	9c 01       	movw	r18, r24
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	9a 81       	ldd	r25, Y+2	; 0x02
    27a8:	ac 01       	movw	r20, r24
    27aa:	24 9f       	mul	r18, r20
    27ac:	c0 01       	movw	r24, r0
    27ae:	25 9f       	mul	r18, r21
    27b0:	90 0d       	add	r25, r0
    27b2:	34 9f       	mul	r19, r20
    27b4:	90 0d       	add	r25, r0
    27b6:	11 24       	eor	r1, r1
    27b8:	24 e6       	ldi	r18, 0x64	; 100
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	b9 01       	movw	r22, r18
    27be:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__udivmodhi4>
    27c2:	cb 01       	movw	r24, r22
    27c4:	91 83       	std	Z+1, r25	; 0x01
    27c6:	80 83       	st	Z, r24
    27c8:	17 c0       	rjmp	.+46     	; 0x27f8 <TMR1_enuSetDutyCycleFastPWM+0x20a>
					 break;
				case CLR_OC1AB_ON_COMPARE_MATCH_AND_SET_OC1AB_AT_TOP:
					 OCR1B = (Copy_u8DutyCycle*overflowValue)/100;
    27ca:	e8 e4       	ldi	r30, 0x48	; 72
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	8d 81       	ldd	r24, Y+5	; 0x05
    27d0:	28 2f       	mov	r18, r24
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
    27d6:	9a 81       	ldd	r25, Y+2	; 0x02
    27d8:	ac 01       	movw	r20, r24
    27da:	24 9f       	mul	r18, r20
    27dc:	c0 01       	movw	r24, r0
    27de:	25 9f       	mul	r18, r21
    27e0:	90 0d       	add	r25, r0
    27e2:	34 9f       	mul	r19, r20
    27e4:	90 0d       	add	r25, r0
    27e6:	11 24       	eor	r1, r1
    27e8:	24 e6       	ldi	r18, 0x64	; 100
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	b9 01       	movw	r22, r18
    27ee:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__udivmodhi4>
    27f2:	cb 01       	movw	r24, r22
    27f4:	91 83       	std	Z+1, r25	; 0x01
    27f6:	80 83       	st	Z, r24
			 }
			break;
	}
 }

}
    27f8:	2e 96       	adiw	r28, 0x0e	; 14
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	de bf       	out	0x3e, r29	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	cd bf       	out	0x3d, r28	; 61
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <TMR1_enuSetDutyCyclePhasePWM>:
void TMR1_enuSetDutyCyclePhasePWM(u8 Copy_u8SelectTimerOption ,u8 Copy_u8PhasePwmType,u8 Copy_u8DutyCycle, u8 Copy_OC1PinMode){
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	2e 97       	sbiw	r28, 0x0e	; 14
    2814:	0f b6       	in	r0, 0x3f	; 63
    2816:	f8 94       	cli
    2818:	de bf       	out	0x3e, r29	; 62
    281a:	0f be       	out	0x3f, r0	; 63
    281c:	cd bf       	out	0x3d, r28	; 61
    281e:	8b 83       	std	Y+3, r24	; 0x03
    2820:	6c 83       	std	Y+4, r22	; 0x04
    2822:	4d 83       	std	Y+5, r20	; 0x05
    2824:	2e 83       	std	Y+6, r18	; 0x06

     /*Configure OC1A/B pin as an output*/
	 DIO_enumSetPinConfig(DIO_enumPortD,Copy_u8SelectTimerOption,DIO_enumOutputLOW);
    2826:	83 e0       	ldi	r24, 0x03	; 3
    2828:	6b 81       	ldd	r22, Y+3	; 0x03
    282a:	40 e0       	ldi	r20, 0x00	; 0
    282c:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>
	 u16 overflowValue = 0;
    2830:	1a 82       	std	Y+2, r1	; 0x02
    2832:	19 82       	std	Y+1, r1	; 0x01

	 /*Handle only three cases*/
  if((Copy_u8PhasePwmType == TIMER1_MODE1_PWM_PHASE_CORRECT_8BIT)||
    2834:	8c 81       	ldd	r24, Y+4	; 0x04
    2836:	81 30       	cpi	r24, 0x01	; 1
    2838:	39 f0       	breq	.+14     	; 0x2848 <TMR1_enuSetDutyCyclePhasePWM+0x3e>
    283a:	8c 81       	ldd	r24, Y+4	; 0x04
    283c:	82 30       	cpi	r24, 0x02	; 2
    283e:	21 f0       	breq	.+8      	; 0x2848 <TMR1_enuSetDutyCyclePhasePWM+0x3e>
    2840:	8c 81       	ldd	r24, Y+4	; 0x04
    2842:	83 30       	cpi	r24, 0x03	; 3
    2844:	09 f0       	breq	.+2      	; 0x2848 <TMR1_enuSetDutyCyclePhasePWM+0x3e>
    2846:	e6 c0       	rjmp	.+460    	; 0x2a14 <TMR1_enuSetDutyCyclePhasePWM+0x20a>
	 (Copy_u8PhasePwmType == TIMER1_MODE2_PWM_PHASE_CORRECT_9BIT)||
	 (Copy_u8PhasePwmType == TIMER1_MODE3_PWM_PHASE_CORRECT_10BIT)){

	 /*Get Over flow value according to Timer Resolution*/
	 /*Subtract 1 bec It starts counting form 0*/
	 switch(Copy_u8PhasePwmType){
    2848:	8c 81       	ldd	r24, Y+4	; 0x04
    284a:	28 2f       	mov	r18, r24
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	3e 87       	std	Y+14, r19	; 0x0e
    2850:	2d 87       	std	Y+13, r18	; 0x0d
    2852:	4d 85       	ldd	r20, Y+13	; 0x0d
    2854:	5e 85       	ldd	r21, Y+14	; 0x0e
    2856:	42 30       	cpi	r20, 0x02	; 2
    2858:	51 05       	cpc	r21, r1
    285a:	89 f0       	breq	.+34     	; 0x287e <TMR1_enuSetDutyCyclePhasePWM+0x74>
    285c:	8d 85       	ldd	r24, Y+13	; 0x0d
    285e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2860:	83 30       	cpi	r24, 0x03	; 3
    2862:	91 05       	cpc	r25, r1
    2864:	99 f0       	breq	.+38     	; 0x288c <TMR1_enuSetDutyCyclePhasePWM+0x82>
    2866:	2d 85       	ldd	r18, Y+13	; 0x0d
    2868:	3e 85       	ldd	r19, Y+14	; 0x0e
    286a:	21 30       	cpi	r18, 0x01	; 1
    286c:	31 05       	cpc	r19, r1
    286e:	a1 f4       	brne	.+40     	; 0x2898 <TMR1_enuSetDutyCyclePhasePWM+0x8e>

	 case TIMER1_MODE1_PWM_PHASE_CORRECT_8BIT:
		 overflowValue =two_power(8)-1;
    2870:	88 e0       	ldi	r24, 0x08	; 8
    2872:	0e 94 88 12 	call	0x2510	; 0x2510 <two_power>
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	9a 83       	std	Y+2, r25	; 0x02
    287a:	89 83       	std	Y+1, r24	; 0x01
    287c:	0d c0       	rjmp	.+26     	; 0x2898 <TMR1_enuSetDutyCyclePhasePWM+0x8e>
		 break;

	 case TIMER1_MODE2_PWM_PHASE_CORRECT_9BIT:
		 overflowValue =two_power(9)-1;
    287e:	89 e0       	ldi	r24, 0x09	; 9
    2880:	0e 94 88 12 	call	0x2510	; 0x2510 <two_power>
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	9a 83       	std	Y+2, r25	; 0x02
    2888:	89 83       	std	Y+1, r24	; 0x01
    288a:	06 c0       	rjmp	.+12     	; 0x2898 <TMR1_enuSetDutyCyclePhasePWM+0x8e>
	 		 break;

	 case TIMER1_MODE3_PWM_PHASE_CORRECT_10BIT:
		 overflowValue =two_power(10)-1;
    288c:	8a e0       	ldi	r24, 0x0A	; 10
    288e:	0e 94 88 12 	call	0x2510	; 0x2510 <two_power>
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	9a 83       	std	Y+2, r25	; 0x02
    2896:	89 83       	std	Y+1, r24	; 0x01
	 		 break;
	 }

	switch(Copy_u8SelectTimerOption){
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	48 2f       	mov	r20, r24
    289c:	50 e0       	ldi	r21, 0x00	; 0
    289e:	5c 87       	std	Y+12, r21	; 0x0c
    28a0:	4b 87       	std	Y+11, r20	; 0x0b
    28a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    28a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    28a6:	84 30       	cpi	r24, 0x04	; 4
    28a8:	91 05       	cpc	r25, r1
    28aa:	09 f4       	brne	.+2      	; 0x28ae <TMR1_enuSetDutyCyclePhasePWM+0xa4>
    28ac:	5f c0       	rjmp	.+190    	; 0x296c <TMR1_enuSetDutyCyclePhasePWM+0x162>
    28ae:	2b 85       	ldd	r18, Y+11	; 0x0b
    28b0:	3c 85       	ldd	r19, Y+12	; 0x0c
    28b2:	25 30       	cpi	r18, 0x05	; 5
    28b4:	31 05       	cpc	r19, r1
    28b6:	09 f0       	breq	.+2      	; 0x28ba <TMR1_enuSetDutyCyclePhasePWM+0xb0>
    28b8:	ad c0       	rjmp	.+346    	; 0x2a14 <TMR1_enuSetDutyCyclePhasePWM+0x20a>

		case TIMER1A :
			 /*1-Activate Mode*/
			TCCR1A |= (Copy_OC1PinMode <<COM1A0);
    28ba:	af e4       	ldi	r26, 0x4F	; 79
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	ef e4       	ldi	r30, 0x4F	; 79
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	28 2f       	mov	r18, r24
    28c6:	8e 81       	ldd	r24, Y+6	; 0x06
    28c8:	88 2f       	mov	r24, r24
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	00 24       	eor	r0, r0
    28ce:	96 95       	lsr	r25
    28d0:	87 95       	ror	r24
    28d2:	07 94       	ror	r0
    28d4:	96 95       	lsr	r25
    28d6:	87 95       	ror	r24
    28d8:	07 94       	ror	r0
    28da:	98 2f       	mov	r25, r24
    28dc:	80 2d       	mov	r24, r0
    28de:	82 2b       	or	r24, r18
    28e0:	8c 93       	st	X, r24

			 /*2-Assign OCR value*/
			 switch(Copy_OC1PinMode){
    28e2:	8e 81       	ldd	r24, Y+6	; 0x06
    28e4:	48 2f       	mov	r20, r24
    28e6:	50 e0       	ldi	r21, 0x00	; 0
    28e8:	5a 87       	std	Y+10, r21	; 0x0a
    28ea:	49 87       	std	Y+9, r20	; 0x09
    28ec:	89 85       	ldd	r24, Y+9	; 0x09
    28ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f0:	82 30       	cpi	r24, 0x02	; 2
    28f2:	91 05       	cpc	r25, r1
    28f4:	19 f1       	breq	.+70     	; 0x293c <TMR1_enuSetDutyCyclePhasePWM+0x132>
    28f6:	29 85       	ldd	r18, Y+9	; 0x09
    28f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    28fa:	23 30       	cpi	r18, 0x03	; 3
    28fc:	31 05       	cpc	r19, r1
    28fe:	09 f0       	breq	.+2      	; 0x2902 <TMR1_enuSetDutyCyclePhasePWM+0xf8>
    2900:	89 c0       	rjmp	.+274    	; 0x2a14 <TMR1_enuSetDutyCyclePhasePWM+0x20a>
			  	  case SET_OC1AB_ON_COMPARE_MATCH_UP_AND__CLR_OC1AB_ON_COMPARE_MATCH_DOWN:

			  		  OCR1A = ((100-Copy_u8DutyCycle)*overflowValue)/100;
    2902:	ea e4       	ldi	r30, 0x4A	; 74
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	8d 81       	ldd	r24, Y+5	; 0x05
    2908:	28 2f       	mov	r18, r24
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	84 e6       	ldi	r24, 0x64	; 100
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	82 1b       	sub	r24, r18
    2912:	93 0b       	sbc	r25, r19
    2914:	9c 01       	movw	r18, r24
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	9a 81       	ldd	r25, Y+2	; 0x02
    291a:	ac 01       	movw	r20, r24
    291c:	24 9f       	mul	r18, r20
    291e:	c0 01       	movw	r24, r0
    2920:	25 9f       	mul	r18, r21
    2922:	90 0d       	add	r25, r0
    2924:	34 9f       	mul	r19, r20
    2926:	90 0d       	add	r25, r0
    2928:	11 24       	eor	r1, r1
    292a:	24 e6       	ldi	r18, 0x64	; 100
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	b9 01       	movw	r22, r18
    2930:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__udivmodhi4>
    2934:	cb 01       	movw	r24, r22
    2936:	91 83       	std	Z+1, r25	; 0x01
    2938:	80 83       	st	Z, r24
    293a:	6c c0       	rjmp	.+216    	; 0x2a14 <TMR1_enuSetDutyCyclePhasePWM+0x20a>
			  		  break;
			  	  case CLR_OC1AB_ON_COMPARE_MATCH_UP_AND__SET_OC1AB_ON_COMPARE_MATCH_DOWN:
			  		  OCR1A = (Copy_u8DutyCycle*overflowValue)/100;
    293c:	ea e4       	ldi	r30, 0x4A	; 74
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	8d 81       	ldd	r24, Y+5	; 0x05
    2942:	28 2f       	mov	r18, r24
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	9a 81       	ldd	r25, Y+2	; 0x02
    294a:	ac 01       	movw	r20, r24
    294c:	24 9f       	mul	r18, r20
    294e:	c0 01       	movw	r24, r0
    2950:	25 9f       	mul	r18, r21
    2952:	90 0d       	add	r25, r0
    2954:	34 9f       	mul	r19, r20
    2956:	90 0d       	add	r25, r0
    2958:	11 24       	eor	r1, r1
    295a:	24 e6       	ldi	r18, 0x64	; 100
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	b9 01       	movw	r22, r18
    2960:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__udivmodhi4>
    2964:	cb 01       	movw	r24, r22
    2966:	91 83       	std	Z+1, r25	; 0x01
    2968:	80 83       	st	Z, r24
    296a:	54 c0       	rjmp	.+168    	; 0x2a14 <TMR1_enuSetDutyCyclePhasePWM+0x20a>
				 }
		    break;

		case TIMER1B:
			 /*1-Activate Mode*/
			TCCR1A |= (Copy_OC1PinMode <<COM1B0);
    296c:	af e4       	ldi	r26, 0x4F	; 79
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	ef e4       	ldi	r30, 0x4F	; 79
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	28 2f       	mov	r18, r24
    2978:	8e 81       	ldd	r24, Y+6	; 0x06
    297a:	88 2f       	mov	r24, r24
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	82 95       	swap	r24
    2980:	92 95       	swap	r25
    2982:	90 7f       	andi	r25, 0xF0	; 240
    2984:	98 27       	eor	r25, r24
    2986:	80 7f       	andi	r24, 0xF0	; 240
    2988:	98 27       	eor	r25, r24
    298a:	82 2b       	or	r24, r18
    298c:	8c 93       	st	X, r24

			/*2-Assign OCR value*/
			 switch(Copy_OC1PinMode){
    298e:	8e 81       	ldd	r24, Y+6	; 0x06
    2990:	28 2f       	mov	r18, r24
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	38 87       	std	Y+8, r19	; 0x08
    2996:	2f 83       	std	Y+7, r18	; 0x07
    2998:	4f 81       	ldd	r20, Y+7	; 0x07
    299a:	58 85       	ldd	r21, Y+8	; 0x08
    299c:	42 30       	cpi	r20, 0x02	; 2
    299e:	51 05       	cpc	r21, r1
    29a0:	11 f1       	breq	.+68     	; 0x29e6 <TMR1_enuSetDutyCyclePhasePWM+0x1dc>
    29a2:	8f 81       	ldd	r24, Y+7	; 0x07
    29a4:	98 85       	ldd	r25, Y+8	; 0x08
    29a6:	83 30       	cpi	r24, 0x03	; 3
    29a8:	91 05       	cpc	r25, r1
    29aa:	a1 f5       	brne	.+104    	; 0x2a14 <TMR1_enuSetDutyCyclePhasePWM+0x20a>
			 	 case SET_OC1AB_ON_COMPARE_MATCH_UP_AND__CLR_OC1AB_ON_COMPARE_MATCH_DOWN:

					 OCR1B = ((100-Copy_u8DutyCycle)*overflowValue)/100;
    29ac:	e8 e4       	ldi	r30, 0x48	; 72
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	8d 81       	ldd	r24, Y+5	; 0x05
    29b2:	28 2f       	mov	r18, r24
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	84 e6       	ldi	r24, 0x64	; 100
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	82 1b       	sub	r24, r18
    29bc:	93 0b       	sbc	r25, r19
    29be:	9c 01       	movw	r18, r24
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	9a 81       	ldd	r25, Y+2	; 0x02
    29c4:	ac 01       	movw	r20, r24
    29c6:	24 9f       	mul	r18, r20
    29c8:	c0 01       	movw	r24, r0
    29ca:	25 9f       	mul	r18, r21
    29cc:	90 0d       	add	r25, r0
    29ce:	34 9f       	mul	r19, r20
    29d0:	90 0d       	add	r25, r0
    29d2:	11 24       	eor	r1, r1
    29d4:	24 e6       	ldi	r18, 0x64	; 100
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	b9 01       	movw	r22, r18
    29da:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__udivmodhi4>
    29de:	cb 01       	movw	r24, r22
    29e0:	91 83       	std	Z+1, r25	; 0x01
    29e2:	80 83       	st	Z, r24
    29e4:	17 c0       	rjmp	.+46     	; 0x2a14 <TMR1_enuSetDutyCyclePhasePWM+0x20a>
					 break;
				case CLR_OC1AB_ON_COMPARE_MATCH_UP_AND__SET_OC1AB_ON_COMPARE_MATCH_DOWN:
					 OCR1B = (Copy_u8DutyCycle*overflowValue)/100;
    29e6:	e8 e4       	ldi	r30, 0x48	; 72
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	8d 81       	ldd	r24, Y+5	; 0x05
    29ec:	28 2f       	mov	r18, r24
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	9a 81       	ldd	r25, Y+2	; 0x02
    29f4:	ac 01       	movw	r20, r24
    29f6:	24 9f       	mul	r18, r20
    29f8:	c0 01       	movw	r24, r0
    29fa:	25 9f       	mul	r18, r21
    29fc:	90 0d       	add	r25, r0
    29fe:	34 9f       	mul	r19, r20
    2a00:	90 0d       	add	r25, r0
    2a02:	11 24       	eor	r1, r1
    2a04:	24 e6       	ldi	r18, 0x64	; 100
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	b9 01       	movw	r22, r18
    2a0a:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__udivmodhi4>
    2a0e:	cb 01       	movw	r24, r22
    2a10:	91 83       	std	Z+1, r25	; 0x01
    2a12:	80 83       	st	Z, r24
			 }
			break;
	}
  }

}
    2a14:	2e 96       	adiw	r28, 0x0e	; 14
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	f8 94       	cli
    2a1a:	de bf       	out	0x3e, r29	; 62
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <TMR0_voidInitPreCompile>:
 *
 * This function performs the initialization of the TMR0 module with a predefined configuration.
 * It should be called before any other TMR0-related functions to ensure the timer is set up correctly.
 */

void TMR0_voidInitPreCompile(void){
    2a26:	df 93       	push	r29
    2a28:	cf 93       	push	r28
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
	/*Timer Mode*/
	TCCR0 |= TIMER_MODE;
    2a2e:	a3 e5       	ldi	r26, 0x53	; 83
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	e3 e5       	ldi	r30, 0x53	; 83
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	80 64       	ori	r24, 0x40	; 64
    2a3a:	8c 93       	st	X, r24

	/*Enable Interrupt */
	TIMSK |=(INT_MODE<<OCIE0);     /*Enable Overflow Interrupt*/
    2a3c:	a9 e5       	ldi	r26, 0x59	; 89
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	e9 e5       	ldi	r30, 0x59	; 89
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	82 60       	ori	r24, 0x02	; 2
    2a48:	8c 93       	st	X, r24
	TIMSK |=(INT_MODE<<TOIE0);		/*Enable Compare match Interrupt*/
    2a4a:	a9 e5       	ldi	r26, 0x59	; 89
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	e9 e5       	ldi	r30, 0x59	; 89
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	81 60       	ori	r24, 0x01	; 1
    2a56:	8c 93       	st	X, r24
}
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	08 95       	ret

00002a5e <TMR0_enuStart>:
 * @return TMR0_enuErrorStatus_t Error status of the start process.
 *
 * This function activates TMR0 to start counting based on the previously configured settings.
 * It returns an error status to indicate the success or nature of any failure in starting the timer.
 */
void TMR0_enuStart(void){
    2a5e:	df 93       	push	r29
    2a60:	cf 93       	push	r28
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= TIMER0_PRESCALER;
    2a66:	a3 e5       	ldi	r26, 0x53	; 83
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	e3 e5       	ldi	r30, 0x53	; 83
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	82 60       	ori	r24, 0x02	; 2
    2a72:	8c 93       	st	X, r24
}
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <TMR0_enuSetDutyCycleFastPWM>:
 *
 * This function configures the duty cycle for TMR0 when operating in Fast PWM mode. The duty cycle and PWM type
 * are specified by the user. It returns an error status to indicate success or the nature of any failure in setting
 * the duty cycle.
 */
TMR0_enuErrorStatus_t TMR0_enuSetDutyCycleFastPWM(u8 Copy_u8DutyCycle, u8 Copy_u8PWMType){
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	00 d0       	rcall	.+0      	; 0x2a80 <TMR0_enuSetDutyCycleFastPWM+0x6>
    2a80:	00 d0       	rcall	.+0      	; 0x2a82 <TMR0_enuSetDutyCycleFastPWM+0x8>
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <TMR0_enuSetDutyCycleFastPWM+0xa>
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	8b 83       	std	Y+3, r24	; 0x03
    2a8a:	6c 83       	std	Y+4, r22	; 0x04

	/*-----------------------------Validation----------------------------------*/
	TMR0_enuErrorStatus_t returnError =TIMER0_enumNOk;
    2a8c:	81 e0       	ldi	r24, 0x01	; 1
    2a8e:	8a 83       	std	Y+2, r24	; 0x02

	if ((Copy_u8DutyCycle<0)||(Copy_u8DutyCycle>100))
    2a90:	8b 81       	ldd	r24, Y+3	; 0x03
    2a92:	85 36       	cpi	r24, 0x65	; 101
    2a94:	18 f0       	brcs	.+6      	; 0x2a9c <TMR0_enuSetDutyCycleFastPWM+0x22>
	{
		returnError=TIMER0_enuWrongDutyCycle;
    2a96:	83 e0       	ldi	r24, 0x03	; 3
    2a98:	8a 83       	std	Y+2, r24	; 0x02
    2a9a:	53 c0       	rjmp	.+166    	; 0x2b42 <TMR0_enuSetDutyCycleFastPWM+0xc8>

	}
	else if((Copy_u8PWMType!=INVERTING_MODE)&&(Copy_u8PWMType!=NON_INVERTING_MODE)){
    2a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9e:	83 30       	cpi	r24, 0x03	; 3
    2aa0:	31 f0       	breq	.+12     	; 0x2aae <TMR0_enuSetDutyCycleFastPWM+0x34>
    2aa2:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa4:	82 30       	cpi	r24, 0x02	; 2
    2aa6:	19 f0       	breq	.+6      	; 0x2aae <TMR0_enuSetDutyCycleFastPWM+0x34>
		returnError =TIMER0_enuWrongPWMType;
    2aa8:	85 e0       	ldi	r24, 0x05	; 5
    2aaa:	8a 83       	std	Y+2, r24	; 0x02
    2aac:	4a c0       	rjmp	.+148    	; 0x2b42 <TMR0_enuSetDutyCycleFastPWM+0xc8>
	}else{
		returnError =TIMER0_enumOk;
    2aae:	1a 82       	std	Y+2, r1	; 0x02
	/*-----------------------------Implementation----------------------------------*/
	/*OC0 as an output*/
	DIO_enumSetPinConfig(DIO_enumPortB,DIO_enumPin3,DIO_enumOutputLOW);
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	63 e0       	ldi	r22, 0x03	; 3
    2ab4:	40 e0       	ldi	r20, 0x00	; 0
    2ab6:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>

	OCR0 =0;
    2aba:	ec e5       	ldi	r30, 0x5C	; 92
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	10 82       	st	Z, r1

	u8 TCCR0_temp = TCCR0;
    2ac0:	e3 e5       	ldi	r30, 0x53	; 83
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	89 83       	std	Y+1, r24	; 0x01
	TCCR0_temp &=CLEAR_TYPE_MASK;
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	8f 7c       	andi	r24, 0xCF	; 207
    2acc:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8PWMType)
    2ace:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	3e 83       	std	Y+6, r19	; 0x06
    2ad6:	2d 83       	std	Y+5, r18	; 0x05
    2ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ada:	9e 81       	ldd	r25, Y+6	; 0x06
    2adc:	82 30       	cpi	r24, 0x02	; 2
    2ade:	91 05       	cpc	r25, r1
    2ae0:	b9 f0       	breq	.+46     	; 0x2b10 <TMR0_enuSetDutyCycleFastPWM+0x96>
    2ae2:	2d 81       	ldd	r18, Y+5	; 0x05
    2ae4:	3e 81       	ldd	r19, Y+6	; 0x06
    2ae6:	23 30       	cpi	r18, 0x03	; 3
    2ae8:	31 05       	cpc	r19, r1
    2aea:	39 f5       	brne	.+78     	; 0x2b3a <TMR0_enuSetDutyCycleFastPWM+0xc0>
	{
		case INVERTING_MODE:
		TCCR0_temp |= (INVERTING_MODE<<SHIFT_COM_BITS);
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	80 63       	ori	r24, 0x30	; 48
    2af0:	89 83       	std	Y+1, r24	; 0x01
		OCR0 = (Copy_u8DutyCycle *256)/100;
    2af2:	ec e5       	ldi	r30, 0x5C	; 92
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	8b 81       	ldd	r24, Y+3	; 0x03
    2af8:	88 2f       	mov	r24, r24
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	98 2f       	mov	r25, r24
    2afe:	88 27       	eor	r24, r24
    2b00:	24 e6       	ldi	r18, 0x64	; 100
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	b9 01       	movw	r22, r18
    2b06:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <__divmodhi4>
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	80 83       	st	Z, r24
    2b0e:	15 c0       	rjmp	.+42     	; 0x2b3a <TMR0_enuSetDutyCycleFastPWM+0xc0>
		break;
		case NON_INVERTING_MODE:
		TCCR0_temp |= (NON_INVERTING_MODE<<SHIFT_COM_BITS);
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	80 62       	ori	r24, 0x20	; 32
    2b14:	89 83       	std	Y+1, r24	; 0x01
		OCR0 = ((1-Copy_u8DutyCycle)*256)/100;
    2b16:	ec e5       	ldi	r30, 0x5C	; 92
    2b18:	f0 e0       	ldi	r31, 0x00	; 0
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	82 1b       	sub	r24, r18
    2b26:	93 0b       	sbc	r25, r19
    2b28:	98 2f       	mov	r25, r24
    2b2a:	88 27       	eor	r24, r24
    2b2c:	24 e6       	ldi	r18, 0x64	; 100
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	b9 01       	movw	r22, r18
    2b32:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <__divmodhi4>
    2b36:	cb 01       	movw	r24, r22
    2b38:	80 83       	st	Z, r24
		break;
	}
	TCCR0 =TCCR0_temp;
    2b3a:	e3 e5       	ldi	r30, 0x53	; 83
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
    2b40:	80 83       	st	Z, r24

	}
	return returnError;
    2b42:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2b44:	26 96       	adiw	r28, 0x06	; 6
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	cf 91       	pop	r28
    2b52:	df 91       	pop	r29
    2b54:	08 95       	ret

00002b56 <TMR0_enuSetDutyCyclePhaseCorrection>:
 *
 * This function configures the duty cycle for TMR0 when operating in Phase Correct PWM mode. It allows
 * for finer control of the PWM waveform compared to Fast PWM mode. It returns an error status to indicate
 * the success or nature of any failure in setting the duty cycle.
 */
TMR0_enuErrorStatus_t TMR0_enuSetDutyCyclePhaseCorrection(u8 Copy_u8DutyCycle, u8 Copy_u8PWMType){
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <TMR0_enuSetDutyCyclePhaseCorrection+0x6>
    2b5c:	00 d0       	rcall	.+0      	; 0x2b5e <TMR0_enuSetDutyCyclePhaseCorrection+0x8>
    2b5e:	00 d0       	rcall	.+0      	; 0x2b60 <TMR0_enuSetDutyCyclePhaseCorrection+0xa>
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	8b 83       	std	Y+3, r24	; 0x03
    2b66:	6c 83       	std	Y+4, r22	; 0x04

		/*-----------------------------Validation----------------------------------*/
		TMR0_enuErrorStatus_t returnError =TIMER0_enumNOk;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	8a 83       	std	Y+2, r24	; 0x02

		if ((Copy_u8DutyCycle<0)||(Copy_u8DutyCycle>100))
    2b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6e:	85 36       	cpi	r24, 0x65	; 101
    2b70:	18 f0       	brcs	.+6      	; 0x2b78 <TMR0_enuSetDutyCyclePhaseCorrection+0x22>
		{
			returnError=TIMER0_enuWrongDutyCycle;
    2b72:	83 e0       	ldi	r24, 0x03	; 3
    2b74:	8a 83       	std	Y+2, r24	; 0x02
    2b76:	53 c0       	rjmp	.+166    	; 0x2c1e <TMR0_enuSetDutyCyclePhaseCorrection+0xc8>
		}
		else if((Copy_u8PWMType!=INVERTING_MODE)&&(Copy_u8PWMType!=NON_INVERTING_MODE)){
    2b78:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7a:	83 30       	cpi	r24, 0x03	; 3
    2b7c:	31 f0       	breq	.+12     	; 0x2b8a <TMR0_enuSetDutyCyclePhaseCorrection+0x34>
    2b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b80:	82 30       	cpi	r24, 0x02	; 2
    2b82:	19 f0       	breq	.+6      	; 0x2b8a <TMR0_enuSetDutyCyclePhaseCorrection+0x34>

			returnError =TIMER0_enuWrongPWMType;
    2b84:	85 e0       	ldi	r24, 0x05	; 5
    2b86:	8a 83       	std	Y+2, r24	; 0x02
    2b88:	4a c0       	rjmp	.+148    	; 0x2c1e <TMR0_enuSetDutyCyclePhaseCorrection+0xc8>
		}else{
			returnError =TIMER0_enumOk;
    2b8a:	1a 82       	std	Y+2, r1	; 0x02
		/*-----------------------------Implementation--------------------------------*/
			/*OC0 as an output*/
			DIO_enumSetPinConfig(DIO_enumPortB,DIO_enumPin3,DIO_enumOutputLOW);
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	63 e0       	ldi	r22, 0x03	; 3
    2b90:	40 e0       	ldi	r20, 0x00	; 0
    2b92:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <DIO_enumSetPinConfig>

			OCR0 =0;
    2b96:	ec e5       	ldi	r30, 0x5C	; 92
    2b98:	f0 e0       	ldi	r31, 0x00	; 0
    2b9a:	10 82       	st	Z, r1

			u8 TCCR0_temp = TCCR0;
    2b9c:	e3 e5       	ldi	r30, 0x53	; 83
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	89 83       	std	Y+1, r24	; 0x01
			TCCR0_temp &=CLEAR_TYPE_MASK;
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	8f 7c       	andi	r24, 0xCF	; 207
    2ba8:	89 83       	std	Y+1, r24	; 0x01

			switch (Copy_u8PWMType)
    2baa:	8c 81       	ldd	r24, Y+4	; 0x04
    2bac:	28 2f       	mov	r18, r24
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	3e 83       	std	Y+6, r19	; 0x06
    2bb2:	2d 83       	std	Y+5, r18	; 0x05
    2bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb8:	82 30       	cpi	r24, 0x02	; 2
    2bba:	91 05       	cpc	r25, r1
    2bbc:	b9 f0       	breq	.+46     	; 0x2bec <TMR0_enuSetDutyCyclePhaseCorrection+0x96>
    2bbe:	2d 81       	ldd	r18, Y+5	; 0x05
    2bc0:	3e 81       	ldd	r19, Y+6	; 0x06
    2bc2:	23 30       	cpi	r18, 0x03	; 3
    2bc4:	31 05       	cpc	r19, r1
    2bc6:	39 f5       	brne	.+78     	; 0x2c16 <TMR0_enuSetDutyCyclePhaseCorrection+0xc0>
			{
				case INVERTING_MODE:
				TCCR0_temp |= (INVERTING_MODE<<SHIFT_COM_BITS);
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	80 63       	ori	r24, 0x30	; 48
    2bcc:	89 83       	std	Y+1, r24	; 0x01
				OCR0 = (Copy_u8DutyCycle *256)/100;;
    2bce:	ec e5       	ldi	r30, 0x5C	; 92
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd4:	88 2f       	mov	r24, r24
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	98 2f       	mov	r25, r24
    2bda:	88 27       	eor	r24, r24
    2bdc:	24 e6       	ldi	r18, 0x64	; 100
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	b9 01       	movw	r22, r18
    2be2:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <__divmodhi4>
    2be6:	cb 01       	movw	r24, r22
    2be8:	80 83       	st	Z, r24
    2bea:	15 c0       	rjmp	.+42     	; 0x2c16 <TMR0_enuSetDutyCyclePhaseCorrection+0xc0>
				break;
				case NON_INVERTING_MODE:
				TCCR0_temp |= (NON_INVERTING_MODE<<SHIFT_COM_BITS);
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	80 62       	ori	r24, 0x20	; 32
    2bf0:	89 83       	std	Y+1, r24	; 0x01
				OCR0 = ((100-Copy_u8DutyCycle)*256)/100;
    2bf2:	ec e5       	ldi	r30, 0x5C	; 92
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	28 2f       	mov	r18, r24
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	84 e6       	ldi	r24, 0x64	; 100
    2bfe:	90 e0       	ldi	r25, 0x00	; 0
    2c00:	82 1b       	sub	r24, r18
    2c02:	93 0b       	sbc	r25, r19
    2c04:	98 2f       	mov	r25, r24
    2c06:	88 27       	eor	r24, r24
    2c08:	24 e6       	ldi	r18, 0x64	; 100
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	b9 01       	movw	r22, r18
    2c0e:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <__divmodhi4>
    2c12:	cb 01       	movw	r24, r22
    2c14:	80 83       	st	Z, r24
				break;
			}
			TCCR0 =TCCR0_temp;
    2c16:	e3 e5       	ldi	r30, 0x53	; 83
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	80 83       	st	Z, r24

		}
		return returnError;
    2c1e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2c20:	26 96       	adiw	r28, 0x06	; 6
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	f8 94       	cli
    2c26:	de bf       	out	0x3e, r29	; 62
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	08 95       	ret

00002c32 <PORT_vidInit>:
 *@brief  : Function to Configure the Pins to be INPUT pin or OUTPUT pin. 
 *@param  : void
 *@return : void                                             
 */	

void PORT_vidInit(void){
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
    2c3a:	60 97       	sbiw	r28, 0x10	; 16
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	cd bf       	out	0x3d, r28	; 61
PORTS Loc_enuPortNum;
PINS Loc_enuPinNum;

extern PORT_enuPinOpt PORT_PinConfg[NUM_OF_PINS];

for(int i=0 ; i < NUM_OF_PINS ; i++){
    2c46:	1a 82       	std	Y+2, r1	; 0x02
    2c48:	19 82       	std	Y+1, r1	; 0x01
    2c4a:	38 c2       	rjmp	.+1136   	; 0x30bc <PORT_vidInit+0x48a>
	
	/*Get PORT Number -->PORTA = 0,PORTB = 1,PORTC = 2,PORTD = 3*/
	Loc_enuPortNum = i / 8;
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c50:	98 8b       	std	Y+16, r25	; 0x10
    2c52:	8f 87       	std	Y+15, r24	; 0x0f
    2c54:	2f 85       	ldd	r18, Y+15	; 0x0f
    2c56:	38 89       	ldd	r19, Y+16	; 0x10
    2c58:	33 23       	and	r19, r19
    2c5a:	2c f4       	brge	.+10     	; 0x2c66 <PORT_vidInit+0x34>
    2c5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c5e:	98 89       	ldd	r25, Y+16	; 0x10
    2c60:	07 96       	adiw	r24, 0x07	; 7
    2c62:	98 8b       	std	Y+16, r25	; 0x10
    2c64:	8f 87       	std	Y+15, r24	; 0x0f
    2c66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c68:	98 89       	ldd	r25, Y+16	; 0x10
    2c6a:	95 95       	asr	r25
    2c6c:	87 95       	ror	r24
    2c6e:	95 95       	asr	r25
    2c70:	87 95       	ror	r24
    2c72:	95 95       	asr	r25
    2c74:	87 95       	ror	r24
    2c76:	8c 83       	std	Y+4, r24	; 0x04
	
	/*Get PIN Number to use it to assign the values in DDRx and PORTx Registers*/
	Loc_enuPinNum  = i % 8;
    2c78:	89 81       	ldd	r24, Y+1	; 0x01
    2c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c7c:	28 e0       	ldi	r18, 0x08	; 8
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	b9 01       	movw	r22, r18
    2c82:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <__divmodhi4>
    2c86:	8b 83       	std	Y+3, r24	; 0x03
	
	/*Steps :
	1-Check on PORT Number : PORT_A ,PORT_B ,PORT_C,PORT_D
	2-Check on the configuration of the specific pin
	*/
	switch(Loc_enuPortNum){
    2c88:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8a:	28 2f       	mov	r18, r24
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	3e 87       	std	Y+14, r19	; 0x0e
    2c90:	2d 87       	std	Y+13, r18	; 0x0d
    2c92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c96:	81 30       	cpi	r24, 0x01	; 1
    2c98:	91 05       	cpc	r25, r1
    2c9a:	09 f4       	brne	.+2      	; 0x2c9e <PORT_vidInit+0x6c>
    2c9c:	94 c0       	rjmp	.+296    	; 0x2dc6 <PORT_vidInit+0x194>
    2c9e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ca0:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ca2:	22 30       	cpi	r18, 0x02	; 2
    2ca4:	31 05       	cpc	r19, r1
    2ca6:	2c f4       	brge	.+10     	; 0x2cb2 <PORT_vidInit+0x80>
    2ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cac:	00 97       	sbiw	r24, 0x00	; 0
    2cae:	71 f0       	breq	.+28     	; 0x2ccc <PORT_vidInit+0x9a>
    2cb0:	00 c2       	rjmp	.+1024   	; 0x30b2 <PORT_vidInit+0x480>
    2cb2:	2d 85       	ldd	r18, Y+13	; 0x0d
    2cb4:	3e 85       	ldd	r19, Y+14	; 0x0e
    2cb6:	22 30       	cpi	r18, 0x02	; 2
    2cb8:	31 05       	cpc	r19, r1
    2cba:	09 f4       	brne	.+2      	; 0x2cbe <PORT_vidInit+0x8c>
    2cbc:	01 c1       	rjmp	.+514    	; 0x2ec0 <PORT_vidInit+0x28e>
    2cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc2:	83 30       	cpi	r24, 0x03	; 3
    2cc4:	91 05       	cpc	r25, r1
    2cc6:	09 f4       	brne	.+2      	; 0x2cca <PORT_vidInit+0x98>
    2cc8:	78 c1       	rjmp	.+752    	; 0x2fba <PORT_vidInit+0x388>
    2cca:	f3 c1       	rjmp	.+998    	; 0x30b2 <PORT_vidInit+0x480>
		case PORT_A :
		switch(PORT_PinConfg[i]){
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	e4 54       	subi	r30, 0x44	; 68
    2cd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd6:	80 81       	ld	r24, Z
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	3c 87       	std	Y+12, r19	; 0x0c
    2cde:	2b 87       	std	Y+11, r18	; 0x0b
    2ce0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ce2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ce4:	81 30       	cpi	r24, 0x01	; 1
    2ce6:	91 05       	cpc	r25, r1
    2ce8:	91 f1       	breq	.+100    	; 0x2d4e <PORT_vidInit+0x11c>
    2cea:	2b 85       	ldd	r18, Y+11	; 0x0b
    2cec:	3c 85       	ldd	r19, Y+12	; 0x0c
    2cee:	22 30       	cpi	r18, 0x02	; 2
    2cf0:	31 05       	cpc	r19, r1
    2cf2:	09 f4       	brne	.+2      	; 0x2cf6 <PORT_vidInit+0xc4>
    2cf4:	54 c0       	rjmp	.+168    	; 0x2d9e <PORT_vidInit+0x16c>
    2cf6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cf8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	09 f0       	breq	.+2      	; 0x2d00 <PORT_vidInit+0xce>
    2cfe:	d9 c1       	rjmp	.+946    	; 0x30b2 <PORT_vidInit+0x480>
			case PORT_enuInput_PU:
			CLR_BIT(DDRA,Loc_enuPinNum);
    2d00:	aa e3       	ldi	r26, 0x3A	; 58
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	ea e3       	ldi	r30, 0x3A	; 58
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	48 2f       	mov	r20, r24
    2d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0e:	28 2f       	mov	r18, r24
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	02 c0       	rjmp	.+4      	; 0x2d1c <PORT_vidInit+0xea>
    2d18:	88 0f       	add	r24, r24
    2d1a:	99 1f       	adc	r25, r25
    2d1c:	2a 95       	dec	r18
    2d1e:	e2 f7       	brpl	.-8      	; 0x2d18 <PORT_vidInit+0xe6>
    2d20:	80 95       	com	r24
    2d22:	84 23       	and	r24, r20
    2d24:	8c 93       	st	X, r24
			SET_BIT(PORTA,Loc_enuPinNum);
    2d26:	ab e3       	ldi	r26, 0x3B	; 59
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	eb e3       	ldi	r30, 0x3B	; 59
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	48 2f       	mov	r20, r24
    2d32:	8b 81       	ldd	r24, Y+3	; 0x03
    2d34:	28 2f       	mov	r18, r24
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	02 2e       	mov	r0, r18
    2d3e:	02 c0       	rjmp	.+4      	; 0x2d44 <PORT_vidInit+0x112>
    2d40:	88 0f       	add	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	0a 94       	dec	r0
    2d46:	e2 f7       	brpl	.-8      	; 0x2d40 <PORT_vidInit+0x10e>
    2d48:	84 2b       	or	r24, r20
    2d4a:	8c 93       	st	X, r24
    2d4c:	b2 c1       	rjmp	.+868    	; 0x30b2 <PORT_vidInit+0x480>
			break;
			
			case PORT_enuInput_HI:
			CLR_BIT(DDRA,Loc_enuPinNum);
    2d4e:	aa e3       	ldi	r26, 0x3A	; 58
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	ea e3       	ldi	r30, 0x3A	; 58
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	48 2f       	mov	r20, r24
    2d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <PORT_vidInit+0x138>
    2d66:	88 0f       	add	r24, r24
    2d68:	99 1f       	adc	r25, r25
    2d6a:	2a 95       	dec	r18
    2d6c:	e2 f7       	brpl	.-8      	; 0x2d66 <PORT_vidInit+0x134>
    2d6e:	80 95       	com	r24
    2d70:	84 23       	and	r24, r20
    2d72:	8c 93       	st	X, r24
			CLR_BIT(PORTA,Loc_enuPinNum);
    2d74:	ab e3       	ldi	r26, 0x3B	; 59
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	eb e3       	ldi	r30, 0x3B	; 59
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	48 2f       	mov	r20, r24
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	02 2e       	mov	r0, r18
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <PORT_vidInit+0x160>
    2d8e:	88 0f       	add	r24, r24
    2d90:	99 1f       	adc	r25, r25
    2d92:	0a 94       	dec	r0
    2d94:	e2 f7       	brpl	.-8      	; 0x2d8e <PORT_vidInit+0x15c>
    2d96:	80 95       	com	r24
    2d98:	84 23       	and	r24, r20
    2d9a:	8c 93       	st	X, r24
    2d9c:	8a c1       	rjmp	.+788    	; 0x30b2 <PORT_vidInit+0x480>
			break;
			
			case PORT_enuOutput:
			SET_BIT(DDRA,Loc_enuPinNum);
    2d9e:	aa e3       	ldi	r26, 0x3A	; 58
    2da0:	b0 e0       	ldi	r27, 0x00	; 0
    2da2:	ea e3       	ldi	r30, 0x3A	; 58
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	80 81       	ld	r24, Z
    2da8:	48 2f       	mov	r20, r24
    2daa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dac:	28 2f       	mov	r18, r24
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	02 2e       	mov	r0, r18
    2db6:	02 c0       	rjmp	.+4      	; 0x2dbc <PORT_vidInit+0x18a>
    2db8:	88 0f       	add	r24, r24
    2dba:	99 1f       	adc	r25, r25
    2dbc:	0a 94       	dec	r0
    2dbe:	e2 f7       	brpl	.-8      	; 0x2db8 <PORT_vidInit+0x186>
    2dc0:	84 2b       	or	r24, r20
    2dc2:	8c 93       	st	X, r24
    2dc4:	76 c1       	rjmp	.+748    	; 0x30b2 <PORT_vidInit+0x480>
			break;
		}
		break;
		
		case PORT_B:
		switch(PORT_PinConfg[i]){
    2dc6:	89 81       	ldd	r24, Y+1	; 0x01
    2dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dca:	fc 01       	movw	r30, r24
    2dcc:	e4 54       	subi	r30, 0x44	; 68
    2dce:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd0:	80 81       	ld	r24, Z
    2dd2:	28 2f       	mov	r18, r24
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	3a 87       	std	Y+10, r19	; 0x0a
    2dd8:	29 87       	std	Y+9, r18	; 0x09
    2dda:	89 85       	ldd	r24, Y+9	; 0x09
    2ddc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dde:	81 30       	cpi	r24, 0x01	; 1
    2de0:	91 05       	cpc	r25, r1
    2de2:	91 f1       	breq	.+100    	; 0x2e48 <PORT_vidInit+0x216>
    2de4:	29 85       	ldd	r18, Y+9	; 0x09
    2de6:	3a 85       	ldd	r19, Y+10	; 0x0a
    2de8:	22 30       	cpi	r18, 0x02	; 2
    2dea:	31 05       	cpc	r19, r1
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <PORT_vidInit+0x1be>
    2dee:	54 c0       	rjmp	.+168    	; 0x2e98 <PORT_vidInit+0x266>
    2df0:	89 85       	ldd	r24, Y+9	; 0x09
    2df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df4:	00 97       	sbiw	r24, 0x00	; 0
    2df6:	09 f0       	breq	.+2      	; 0x2dfa <PORT_vidInit+0x1c8>
    2df8:	5c c1       	rjmp	.+696    	; 0x30b2 <PORT_vidInit+0x480>
			
			case PORT_enuInput_PU:
			CLR_BIT(DDRB,Loc_enuPinNum);
    2dfa:	a7 e3       	ldi	r26, 0x37	; 55
    2dfc:	b0 e0       	ldi	r27, 0x00	; 0
    2dfe:	e7 e3       	ldi	r30, 0x37	; 55
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	80 81       	ld	r24, Z
    2e04:	48 2f       	mov	r20, r24
    2e06:	8b 81       	ldd	r24, Y+3	; 0x03
    2e08:	28 2f       	mov	r18, r24
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	02 c0       	rjmp	.+4      	; 0x2e16 <PORT_vidInit+0x1e4>
    2e12:	88 0f       	add	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	2a 95       	dec	r18
    2e18:	e2 f7       	brpl	.-8      	; 0x2e12 <PORT_vidInit+0x1e0>
    2e1a:	80 95       	com	r24
    2e1c:	84 23       	and	r24, r20
    2e1e:	8c 93       	st	X, r24
			SET_BIT(PORTB,Loc_enuPinNum);
    2e20:	a8 e3       	ldi	r26, 0x38	; 56
    2e22:	b0 e0       	ldi	r27, 0x00	; 0
    2e24:	e8 e3       	ldi	r30, 0x38	; 56
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	80 81       	ld	r24, Z
    2e2a:	48 2f       	mov	r20, r24
    2e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2e:	28 2f       	mov	r18, r24
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	02 2e       	mov	r0, r18
    2e38:	02 c0       	rjmp	.+4      	; 0x2e3e <PORT_vidInit+0x20c>
    2e3a:	88 0f       	add	r24, r24
    2e3c:	99 1f       	adc	r25, r25
    2e3e:	0a 94       	dec	r0
    2e40:	e2 f7       	brpl	.-8      	; 0x2e3a <PORT_vidInit+0x208>
    2e42:	84 2b       	or	r24, r20
    2e44:	8c 93       	st	X, r24
    2e46:	35 c1       	rjmp	.+618    	; 0x30b2 <PORT_vidInit+0x480>
			break;
			
			case PORT_enuInput_HI:
			CLR_BIT(DDRB,Loc_enuPinNum);
    2e48:	a7 e3       	ldi	r26, 0x37	; 55
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	e7 e3       	ldi	r30, 0x37	; 55
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	48 2f       	mov	r20, r24
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	28 2f       	mov	r18, r24
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	02 c0       	rjmp	.+4      	; 0x2e64 <PORT_vidInit+0x232>
    2e60:	88 0f       	add	r24, r24
    2e62:	99 1f       	adc	r25, r25
    2e64:	2a 95       	dec	r18
    2e66:	e2 f7       	brpl	.-8      	; 0x2e60 <PORT_vidInit+0x22e>
    2e68:	80 95       	com	r24
    2e6a:	84 23       	and	r24, r20
    2e6c:	8c 93       	st	X, r24
			CLR_BIT(PORTB,Loc_enuPinNum);
    2e6e:	a8 e3       	ldi	r26, 0x38	; 56
    2e70:	b0 e0       	ldi	r27, 0x00	; 0
    2e72:	e8 e3       	ldi	r30, 0x38	; 56
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 81       	ld	r24, Z
    2e78:	48 2f       	mov	r20, r24
    2e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7c:	28 2f       	mov	r18, r24
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	90 e0       	ldi	r25, 0x00	; 0
    2e84:	02 2e       	mov	r0, r18
    2e86:	02 c0       	rjmp	.+4      	; 0x2e8c <PORT_vidInit+0x25a>
    2e88:	88 0f       	add	r24, r24
    2e8a:	99 1f       	adc	r25, r25
    2e8c:	0a 94       	dec	r0
    2e8e:	e2 f7       	brpl	.-8      	; 0x2e88 <PORT_vidInit+0x256>
    2e90:	80 95       	com	r24
    2e92:	84 23       	and	r24, r20
    2e94:	8c 93       	st	X, r24
    2e96:	0d c1       	rjmp	.+538    	; 0x30b2 <PORT_vidInit+0x480>
			break;
			
			case PORT_enuOutput:
			SET_BIT(DDRB,Loc_enuPinNum);
    2e98:	a7 e3       	ldi	r26, 0x37	; 55
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	e7 e3       	ldi	r30, 0x37	; 55
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	48 2f       	mov	r20, r24
    2ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea6:	28 2f       	mov	r18, r24
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	02 2e       	mov	r0, r18
    2eb0:	02 c0       	rjmp	.+4      	; 0x2eb6 <PORT_vidInit+0x284>
    2eb2:	88 0f       	add	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	0a 94       	dec	r0
    2eb8:	e2 f7       	brpl	.-8      	; 0x2eb2 <PORT_vidInit+0x280>
    2eba:	84 2b       	or	r24, r20
    2ebc:	8c 93       	st	X, r24
    2ebe:	f9 c0       	rjmp	.+498    	; 0x30b2 <PORT_vidInit+0x480>
			default:
			break;
		}
		break;
		case PORT_C:
		switch(PORT_PinConfg[i]){
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec4:	fc 01       	movw	r30, r24
    2ec6:	e4 54       	subi	r30, 0x44	; 68
    2ec8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eca:	80 81       	ld	r24, Z
    2ecc:	28 2f       	mov	r18, r24
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	38 87       	std	Y+8, r19	; 0x08
    2ed2:	2f 83       	std	Y+7, r18	; 0x07
    2ed4:	8f 81       	ldd	r24, Y+7	; 0x07
    2ed6:	98 85       	ldd	r25, Y+8	; 0x08
    2ed8:	81 30       	cpi	r24, 0x01	; 1
    2eda:	91 05       	cpc	r25, r1
    2edc:	91 f1       	breq	.+100    	; 0x2f42 <PORT_vidInit+0x310>
    2ede:	2f 81       	ldd	r18, Y+7	; 0x07
    2ee0:	38 85       	ldd	r19, Y+8	; 0x08
    2ee2:	22 30       	cpi	r18, 0x02	; 2
    2ee4:	31 05       	cpc	r19, r1
    2ee6:	09 f4       	brne	.+2      	; 0x2eea <PORT_vidInit+0x2b8>
    2ee8:	54 c0       	rjmp	.+168    	; 0x2f92 <PORT_vidInit+0x360>
    2eea:	8f 81       	ldd	r24, Y+7	; 0x07
    2eec:	98 85       	ldd	r25, Y+8	; 0x08
    2eee:	00 97       	sbiw	r24, 0x00	; 0
    2ef0:	09 f0       	breq	.+2      	; 0x2ef4 <PORT_vidInit+0x2c2>
    2ef2:	df c0       	rjmp	.+446    	; 0x30b2 <PORT_vidInit+0x480>
			case PORT_enuInput_PU:
			CLR_BIT(DDRC,Loc_enuPinNum);
    2ef4:	a4 e3       	ldi	r26, 0x34	; 52
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	e4 e3       	ldi	r30, 0x34	; 52
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	48 2f       	mov	r20, r24
    2f00:	8b 81       	ldd	r24, Y+3	; 0x03
    2f02:	28 2f       	mov	r18, r24
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	81 e0       	ldi	r24, 0x01	; 1
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	02 c0       	rjmp	.+4      	; 0x2f10 <PORT_vidInit+0x2de>
    2f0c:	88 0f       	add	r24, r24
    2f0e:	99 1f       	adc	r25, r25
    2f10:	2a 95       	dec	r18
    2f12:	e2 f7       	brpl	.-8      	; 0x2f0c <PORT_vidInit+0x2da>
    2f14:	80 95       	com	r24
    2f16:	84 23       	and	r24, r20
    2f18:	8c 93       	st	X, r24
			SET_BIT(PORTC,Loc_enuPinNum);
    2f1a:	a5 e3       	ldi	r26, 0x35	; 53
    2f1c:	b0 e0       	ldi	r27, 0x00	; 0
    2f1e:	e5 e3       	ldi	r30, 0x35	; 53
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	80 81       	ld	r24, Z
    2f24:	48 2f       	mov	r20, r24
    2f26:	8b 81       	ldd	r24, Y+3	; 0x03
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	02 2e       	mov	r0, r18
    2f32:	02 c0       	rjmp	.+4      	; 0x2f38 <PORT_vidInit+0x306>
    2f34:	88 0f       	add	r24, r24
    2f36:	99 1f       	adc	r25, r25
    2f38:	0a 94       	dec	r0
    2f3a:	e2 f7       	brpl	.-8      	; 0x2f34 <PORT_vidInit+0x302>
    2f3c:	84 2b       	or	r24, r20
    2f3e:	8c 93       	st	X, r24
    2f40:	b8 c0       	rjmp	.+368    	; 0x30b2 <PORT_vidInit+0x480>
			break;
			
			case PORT_enuInput_HI:
			CLR_BIT(DDRC,Loc_enuPinNum);
    2f42:	a4 e3       	ldi	r26, 0x34	; 52
    2f44:	b0 e0       	ldi	r27, 0x00	; 0
    2f46:	e4 e3       	ldi	r30, 0x34	; 52
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	80 81       	ld	r24, Z
    2f4c:	48 2f       	mov	r20, r24
    2f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f50:	28 2f       	mov	r18, r24
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	02 c0       	rjmp	.+4      	; 0x2f5e <PORT_vidInit+0x32c>
    2f5a:	88 0f       	add	r24, r24
    2f5c:	99 1f       	adc	r25, r25
    2f5e:	2a 95       	dec	r18
    2f60:	e2 f7       	brpl	.-8      	; 0x2f5a <PORT_vidInit+0x328>
    2f62:	80 95       	com	r24
    2f64:	84 23       	and	r24, r20
    2f66:	8c 93       	st	X, r24
			CLR_BIT(PORTC,Loc_enuPinNum);
    2f68:	a5 e3       	ldi	r26, 0x35	; 53
    2f6a:	b0 e0       	ldi	r27, 0x00	; 0
    2f6c:	e5 e3       	ldi	r30, 0x35	; 53
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	80 81       	ld	r24, Z
    2f72:	48 2f       	mov	r20, r24
    2f74:	8b 81       	ldd	r24, Y+3	; 0x03
    2f76:	28 2f       	mov	r18, r24
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	02 2e       	mov	r0, r18
    2f80:	02 c0       	rjmp	.+4      	; 0x2f86 <PORT_vidInit+0x354>
    2f82:	88 0f       	add	r24, r24
    2f84:	99 1f       	adc	r25, r25
    2f86:	0a 94       	dec	r0
    2f88:	e2 f7       	brpl	.-8      	; 0x2f82 <PORT_vidInit+0x350>
    2f8a:	80 95       	com	r24
    2f8c:	84 23       	and	r24, r20
    2f8e:	8c 93       	st	X, r24
    2f90:	90 c0       	rjmp	.+288    	; 0x30b2 <PORT_vidInit+0x480>
			break;
			
			case PORT_enuOutput:
			SET_BIT(DDRC,Loc_enuPinNum);
    2f92:	a4 e3       	ldi	r26, 0x34	; 52
    2f94:	b0 e0       	ldi	r27, 0x00	; 0
    2f96:	e4 e3       	ldi	r30, 0x34	; 52
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	80 81       	ld	r24, Z
    2f9c:	48 2f       	mov	r20, r24
    2f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa0:	28 2f       	mov	r18, r24
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	02 2e       	mov	r0, r18
    2faa:	02 c0       	rjmp	.+4      	; 0x2fb0 <PORT_vidInit+0x37e>
    2fac:	88 0f       	add	r24, r24
    2fae:	99 1f       	adc	r25, r25
    2fb0:	0a 94       	dec	r0
    2fb2:	e2 f7       	brpl	.-8      	; 0x2fac <PORT_vidInit+0x37a>
    2fb4:	84 2b       	or	r24, r20
    2fb6:	8c 93       	st	X, r24
    2fb8:	7c c0       	rjmp	.+248    	; 0x30b2 <PORT_vidInit+0x480>
			default:
			break;
		}
		break;
		case PORT_D:
		switch(PORT_PinConfg[i]){
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	e4 54       	subi	r30, 0x44	; 68
    2fc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc4:	80 81       	ld	r24, Z
    2fc6:	28 2f       	mov	r18, r24
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	3e 83       	std	Y+6, r19	; 0x06
    2fcc:	2d 83       	std	Y+5, r18	; 0x05
    2fce:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd2:	81 30       	cpi	r24, 0x01	; 1
    2fd4:	91 05       	cpc	r25, r1
    2fd6:	91 f1       	breq	.+100    	; 0x303c <PORT_vidInit+0x40a>
    2fd8:	2d 81       	ldd	r18, Y+5	; 0x05
    2fda:	3e 81       	ldd	r19, Y+6	; 0x06
    2fdc:	22 30       	cpi	r18, 0x02	; 2
    2fde:	31 05       	cpc	r19, r1
    2fe0:	09 f4       	brne	.+2      	; 0x2fe4 <PORT_vidInit+0x3b2>
    2fe2:	54 c0       	rjmp	.+168    	; 0x308c <PORT_vidInit+0x45a>
    2fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe8:	00 97       	sbiw	r24, 0x00	; 0
    2fea:	09 f0       	breq	.+2      	; 0x2fee <PORT_vidInit+0x3bc>
    2fec:	62 c0       	rjmp	.+196    	; 0x30b2 <PORT_vidInit+0x480>
			case PORT_enuInput_PU:
			CLR_BIT(DDRD,Loc_enuPinNum);
    2fee:	a1 e3       	ldi	r26, 0x31	; 49
    2ff0:	b0 e0       	ldi	r27, 0x00	; 0
    2ff2:	e1 e3       	ldi	r30, 0x31	; 49
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	80 81       	ld	r24, Z
    2ff8:	48 2f       	mov	r20, r24
    2ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffc:	28 2f       	mov	r18, r24
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	81 e0       	ldi	r24, 0x01	; 1
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	02 c0       	rjmp	.+4      	; 0x300a <PORT_vidInit+0x3d8>
    3006:	88 0f       	add	r24, r24
    3008:	99 1f       	adc	r25, r25
    300a:	2a 95       	dec	r18
    300c:	e2 f7       	brpl	.-8      	; 0x3006 <PORT_vidInit+0x3d4>
    300e:	80 95       	com	r24
    3010:	84 23       	and	r24, r20
    3012:	8c 93       	st	X, r24
			SET_BIT(PORTD,Loc_enuPinNum);
    3014:	a2 e3       	ldi	r26, 0x32	; 50
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	e2 e3       	ldi	r30, 0x32	; 50
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 81       	ld	r24, Z
    301e:	48 2f       	mov	r20, r24
    3020:	8b 81       	ldd	r24, Y+3	; 0x03
    3022:	28 2f       	mov	r18, r24
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	02 2e       	mov	r0, r18
    302c:	02 c0       	rjmp	.+4      	; 0x3032 <PORT_vidInit+0x400>
    302e:	88 0f       	add	r24, r24
    3030:	99 1f       	adc	r25, r25
    3032:	0a 94       	dec	r0
    3034:	e2 f7       	brpl	.-8      	; 0x302e <PORT_vidInit+0x3fc>
    3036:	84 2b       	or	r24, r20
    3038:	8c 93       	st	X, r24
    303a:	3b c0       	rjmp	.+118    	; 0x30b2 <PORT_vidInit+0x480>
			break;
			case PORT_enuInput_HI:
			CLR_BIT(DDRD,Loc_enuPinNum);
    303c:	a1 e3       	ldi	r26, 0x31	; 49
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	e1 e3       	ldi	r30, 0x31	; 49
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
    3046:	48 2f       	mov	r20, r24
    3048:	8b 81       	ldd	r24, Y+3	; 0x03
    304a:	28 2f       	mov	r18, r24
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	02 c0       	rjmp	.+4      	; 0x3058 <PORT_vidInit+0x426>
    3054:	88 0f       	add	r24, r24
    3056:	99 1f       	adc	r25, r25
    3058:	2a 95       	dec	r18
    305a:	e2 f7       	brpl	.-8      	; 0x3054 <PORT_vidInit+0x422>
    305c:	80 95       	com	r24
    305e:	84 23       	and	r24, r20
    3060:	8c 93       	st	X, r24
			CLR_BIT(PORTD,Loc_enuPinNum);
    3062:	a2 e3       	ldi	r26, 0x32	; 50
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	e2 e3       	ldi	r30, 0x32	; 50
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	80 81       	ld	r24, Z
    306c:	48 2f       	mov	r20, r24
    306e:	8b 81       	ldd	r24, Y+3	; 0x03
    3070:	28 2f       	mov	r18, r24
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	02 2e       	mov	r0, r18
    307a:	02 c0       	rjmp	.+4      	; 0x3080 <PORT_vidInit+0x44e>
    307c:	88 0f       	add	r24, r24
    307e:	99 1f       	adc	r25, r25
    3080:	0a 94       	dec	r0
    3082:	e2 f7       	brpl	.-8      	; 0x307c <PORT_vidInit+0x44a>
    3084:	80 95       	com	r24
    3086:	84 23       	and	r24, r20
    3088:	8c 93       	st	X, r24
    308a:	13 c0       	rjmp	.+38     	; 0x30b2 <PORT_vidInit+0x480>
			break;
			case PORT_enuOutput:
			SET_BIT(DDRD,Loc_enuPinNum);
    308c:	a1 e3       	ldi	r26, 0x31	; 49
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	e1 e3       	ldi	r30, 0x31	; 49
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	48 2f       	mov	r20, r24
    3098:	8b 81       	ldd	r24, Y+3	; 0x03
    309a:	28 2f       	mov	r18, r24
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	02 2e       	mov	r0, r18
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <PORT_vidInit+0x478>
    30a6:	88 0f       	add	r24, r24
    30a8:	99 1f       	adc	r25, r25
    30aa:	0a 94       	dec	r0
    30ac:	e2 f7       	brpl	.-8      	; 0x30a6 <PORT_vidInit+0x474>
    30ae:	84 2b       	or	r24, r20
    30b0:	8c 93       	st	X, r24
PORTS Loc_enuPortNum;
PINS Loc_enuPinNum;

extern PORT_enuPinOpt PORT_PinConfg[NUM_OF_PINS];

for(int i=0 ; i < NUM_OF_PINS ; i++){
    30b2:	89 81       	ldd	r24, Y+1	; 0x01
    30b4:	9a 81       	ldd	r25, Y+2	; 0x02
    30b6:	01 96       	adiw	r24, 0x01	; 1
    30b8:	9a 83       	std	Y+2, r25	; 0x02
    30ba:	89 83       	std	Y+1, r24	; 0x01
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	9a 81       	ldd	r25, Y+2	; 0x02
    30c0:	80 32       	cpi	r24, 0x20	; 32
    30c2:	91 05       	cpc	r25, r1
    30c4:	0c f4       	brge	.+2      	; 0x30c8 <PORT_vidInit+0x496>
    30c6:	c2 cd       	rjmp	.-1148   	; 0x2c4c <PORT_vidInit+0x1a>
		default:
		break;
}
#endif
}
    30c8:	60 96       	adiw	r28, 0x10	; 16
    30ca:	0f b6       	in	r0, 0x3f	; 63
    30cc:	f8 94       	cli
    30ce:	de bf       	out	0x3e, r29	; 62
    30d0:	0f be       	out	0x3f, r0	; 63
    30d2:	cd bf       	out	0x3d, r28	; 61
    30d4:	cf 91       	pop	r28
    30d6:	df 91       	pop	r29
    30d8:	08 95       	ret

000030da <Icu_vidInit>:
#define PRESCALER_8     2

#define F_CPU 8000000UL


void Icu_vidInit(void){
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	cd b7       	in	r28, 0x3d	; 61
    30e0:	de b7       	in	r29, 0x3e	; 62
/*1- Configure Timer1 in Overflow mode */
	TCCR1A = 0;
    30e2:	ef e4       	ldi	r30, 0x4F	; 79
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	10 82       	st	Z, r1
/*2- Clear ICF (Input Capture flag)  */
	TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag)  */
    30e8:	e8 e5       	ldi	r30, 0x58	; 88
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 e2       	ldi	r24, 0x20	; 32
    30ee:	80 83       	st	Z, r24



/*3-Activate Noise Canceler Mode*/
	 TCCR1B |=(ENABLE<<ICNC1);
    30f0:	ae e4       	ldi	r26, 0x4E	; 78
    30f2:	b0 e0       	ldi	r27, 0x00	; 0
    30f4:	ee e4       	ldi	r30, 0x4E	; 78
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	80 81       	ld	r24, Z
    30fa:	80 68       	ori	r24, 0x80	; 128
    30fc:	8c 93       	st	X, r24

/*4-Initial Capture Edge Select*/
	 /*Trigger at Rising Edge*/
	 TCCR1B |=(0<<ICES1);
    30fe:	ae e4       	ldi	r26, 0x4E	; 78
    3100:	b0 e0       	ldi	r27, 0x00	; 0
    3102:	ee e4       	ldi	r30, 0x4E	; 78
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	80 81       	ld	r24, Z
    3108:	8c 93       	st	X, r24

/*5- Select Prescaler of Timer1*/
	 TCCR1B |=(PRESCALER_8<<CS10);
    310a:	ae e4       	ldi	r26, 0x4E	; 78
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	ee e4       	ldi	r30, 0x4E	; 78
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	80 81       	ld	r24, Z
    3114:	82 60       	ori	r24, 0x02	; 2
    3116:	8c 93       	st	X, r24

}
    3118:	cf 91       	pop	r28
    311a:	df 91       	pop	r29
    311c:	08 95       	ret

0000311e <Icu_vidEnableInterrupt>:

void Icu_vidEnableInterrupt(void){
    311e:	df 93       	push	r29
    3120:	cf 93       	push	r28
    3122:	cd b7       	in	r28, 0x3d	; 61
    3124:	de b7       	in	r29, 0x3e	; 62

	 TIMSK |=(ENABLE<<TICIE1);
    3126:	a9 e5       	ldi	r26, 0x59	; 89
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	e9 e5       	ldi	r30, 0x59	; 89
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	80 62       	ori	r24, 0x20	; 32
    3132:	8c 93       	st	X, r24

}
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <Icu_vidDisableInterrupt>:

void Icu_vidDisableInterrupt(void){
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
	 TIMSK |=(DISABLE<<TICIE1);
    3142:	e9 e5       	ldi	r30, 0x59	; 89
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	a9 e5       	ldi	r26, 0x59	; 89
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	8c 91       	ld	r24, X
    314c:	80 83       	st	Z, r24
}
    314e:	cf 91       	pop	r28
    3150:	df 91       	pop	r29
    3152:	08 95       	ret

00003154 <Icu_vidChangeTrigger>:

void Icu_vidChangeTrigger(u8 Copy_u8TriggerSource){
    3154:	df 93       	push	r29
    3156:	cf 93       	push	r28
    3158:	00 d0       	rcall	.+0      	; 0x315a <Icu_vidChangeTrigger+0x6>
    315a:	0f 92       	push	r0
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
    3160:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8TriggerSource){
    3162:	89 81       	ldd	r24, Y+1	; 0x01
    3164:	28 2f       	mov	r18, r24
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	3b 83       	std	Y+3, r19	; 0x03
    316a:	2a 83       	std	Y+2, r18	; 0x02
    316c:	8a 81       	ldd	r24, Y+2	; 0x02
    316e:	9b 81       	ldd	r25, Y+3	; 0x03
    3170:	80 34       	cpi	r24, 0x40	; 64
    3172:	91 05       	cpc	r25, r1
    3174:	69 f0       	breq	.+26     	; 0x3190 <Icu_vidChangeTrigger+0x3c>
    3176:	2a 81       	ldd	r18, Y+2	; 0x02
    3178:	3b 81       	ldd	r19, Y+3	; 0x03
    317a:	2f 3b       	cpi	r18, 0xBF	; 191
    317c:	31 05       	cpc	r19, r1
    317e:	79 f4       	brne	.+30     	; 0x319e <Icu_vidChangeTrigger+0x4a>

		case FALLING_EDGE:
			TCCR1B &=(FALLING_EDGE);
    3180:	ae e4       	ldi	r26, 0x4E	; 78
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	ee e4       	ldi	r30, 0x4E	; 78
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	8f 7b       	andi	r24, 0xBF	; 191
    318c:	8c 93       	st	X, r24
    318e:	07 c0       	rjmp	.+14     	; 0x319e <Icu_vidChangeTrigger+0x4a>
			break;
		case RISING_EDGE:
			TCCR1B |=(RISING_EDGE);
    3190:	ae e4       	ldi	r26, 0x4E	; 78
    3192:	b0 e0       	ldi	r27, 0x00	; 0
    3194:	ee e4       	ldi	r30, 0x4E	; 78
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	80 81       	ld	r24, Z
    319a:	80 64       	ori	r24, 0x40	; 64
    319c:	8c 93       	st	X, r24
			break;
	}
}
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	cf 91       	pop	r28
    31a6:	df 91       	pop	r29
    31a8:	08 95       	ret

000031aa <Icu_vidReadValue>:

void Icu_vidReadValue(u16* Add_pu16Value){
    31aa:	df 93       	push	r29
    31ac:	cf 93       	push	r28
    31ae:	00 d0       	rcall	.+0      	; 0x31b0 <Icu_vidReadValue+0x6>
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
    31b4:	9a 83       	std	Y+2, r25	; 0x02
    31b6:	89 83       	std	Y+1, r24	; 0x01
	if(Add_pu16Value){
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	9a 81       	ldd	r25, Y+2	; 0x02
    31bc:	00 97       	sbiw	r24, 0x00	; 0
    31be:	41 f0       	breq	.+16     	; 0x31d0 <Icu_vidReadValue+0x26>
		*Add_pu16Value=ICR1;
    31c0:	e6 e4       	ldi	r30, 0x46	; 70
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	80 81       	ld	r24, Z
    31c6:	91 81       	ldd	r25, Z+1	; 0x01
    31c8:	e9 81       	ldd	r30, Y+1	; 0x01
    31ca:	fa 81       	ldd	r31, Y+2	; 0x02
    31cc:	91 83       	std	Z+1, r25	; 0x01
    31ce:	80 83       	st	Z, r24
	}
}
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	08 95       	ret

000031da <Icu_vidCalculations>:

void Icu_vidCalculations(u16* DutyCycle,u16* Frequency){
    31da:	ef 92       	push	r14
    31dc:	ff 92       	push	r15
    31de:	0f 93       	push	r16
    31e0:	1f 93       	push	r17
    31e2:	df 93       	push	r29
    31e4:	cf 93       	push	r28
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
    31ea:	2e 97       	sbiw	r28, 0x0e	; 14
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	de bf       	out	0x3e, r29	; 62
    31f2:	0f be       	out	0x3f, r0	; 63
    31f4:	cd bf       	out	0x3d, r28	; 61
    31f6:	9c 87       	std	Y+12, r25	; 0x0c
    31f8:	8b 87       	std	Y+11, r24	; 0x0b
    31fa:	7e 87       	std	Y+14, r23	; 0x0e
    31fc:	6d 87       	std	Y+13, r22	; 0x0d

		u16 firstRisingValue  = 0;
    31fe:	1e 82       	std	Y+6, r1	; 0x06
    3200:	1d 82       	std	Y+5, r1	; 0x05
		u16 firstFallingValue = 0;
    3202:	18 86       	std	Y+8, r1	; 0x08
    3204:	1f 82       	std	Y+7, r1	; 0x07
		u16 secondRisingValue = 0;
    3206:	1a 86       	std	Y+10, r1	; 0x0a
    3208:	19 86       	std	Y+9, r1	; 0x09
		u16 ON_Time = 0;
    320a:	1c 82       	std	Y+4, r1	; 0x04
    320c:	1b 82       	std	Y+3, r1	; 0x03
		u16 TotalPeriod =0;
    320e:	1a 82       	std	Y+2, r1	; 0x02
    3210:	19 82       	std	Y+1, r1	; 0x01

			TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag)  */
    3212:	e8 e5       	ldi	r30, 0x58	; 88
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	80 e2       	ldi	r24, 0x20	; 32
    3218:	80 83       	st	Z, r24

			Icu_vidChangeTrigger(RISING_EDGE);
    321a:	80 e4       	ldi	r24, 0x40	; 64
    321c:	0e 94 aa 18 	call	0x3154	; 0x3154 <Icu_vidChangeTrigger>
			while ((TIFR&(1<<ICF1)) == 0);
    3220:	e8 e5       	ldi	r30, 0x58	; 88
    3222:	f0 e0       	ldi	r31, 0x00	; 0
    3224:	80 81       	ld	r24, Z
    3226:	88 2f       	mov	r24, r24
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	80 72       	andi	r24, 0x20	; 32
    322c:	90 70       	andi	r25, 0x00	; 0
    322e:	00 97       	sbiw	r24, 0x00	; 0
    3230:	b9 f3       	breq	.-18     	; 0x3220 <Icu_vidCalculations+0x46>
			Icu_vidReadValue(&firstRisingValue);
    3232:	ce 01       	movw	r24, r28
    3234:	05 96       	adiw	r24, 0x05	; 5
    3236:	0e 94 d5 18 	call	0x31aa	; 0x31aa <Icu_vidReadValue>
			TIFR |= (CLER_FLAG<<ICF1);
    323a:	a8 e5       	ldi	r26, 0x58	; 88
    323c:	b0 e0       	ldi	r27, 0x00	; 0
    323e:	e8 e5       	ldi	r30, 0x58	; 88
    3240:	f0 e0       	ldi	r31, 0x00	; 0
    3242:	80 81       	ld	r24, Z
    3244:	80 62       	ori	r24, 0x20	; 32
    3246:	8c 93       	st	X, r24

			Icu_vidChangeTrigger(FALLING_EDGE);
    3248:	8f eb       	ldi	r24, 0xBF	; 191
    324a:	0e 94 aa 18 	call	0x3154	; 0x3154 <Icu_vidChangeTrigger>
			while ((TIFR&(1<<ICF1)) == 0);
    324e:	e8 e5       	ldi	r30, 0x58	; 88
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	80 81       	ld	r24, Z
    3254:	88 2f       	mov	r24, r24
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	80 72       	andi	r24, 0x20	; 32
    325a:	90 70       	andi	r25, 0x00	; 0
    325c:	00 97       	sbiw	r24, 0x00	; 0
    325e:	b9 f3       	breq	.-18     	; 0x324e <Icu_vidCalculations+0x74>
			Icu_vidReadValue(&firstFallingValue);
    3260:	ce 01       	movw	r24, r28
    3262:	07 96       	adiw	r24, 0x07	; 7
    3264:	0e 94 d5 18 	call	0x31aa	; 0x31aa <Icu_vidReadValue>
			TIFR |= (CLER_FLAG<<ICF1);
    3268:	a8 e5       	ldi	r26, 0x58	; 88
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	e8 e5       	ldi	r30, 0x58	; 88
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	80 81       	ld	r24, Z
    3272:	80 62       	ori	r24, 0x20	; 32
    3274:	8c 93       	st	X, r24

			Icu_vidChangeTrigger(RISING_EDGE);
    3276:	80 e4       	ldi	r24, 0x40	; 64
    3278:	0e 94 aa 18 	call	0x3154	; 0x3154 <Icu_vidChangeTrigger>
			while ((TIFR&(1<<ICF1)) == 0);
    327c:	e8 e5       	ldi	r30, 0x58	; 88
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	88 2f       	mov	r24, r24
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	80 72       	andi	r24, 0x20	; 32
    3288:	90 70       	andi	r25, 0x00	; 0
    328a:	00 97       	sbiw	r24, 0x00	; 0
    328c:	b9 f3       	breq	.-18     	; 0x327c <Icu_vidCalculations+0xa2>
			Icu_vidReadValue(&secondRisingValue);
    328e:	ce 01       	movw	r24, r28
    3290:	09 96       	adiw	r24, 0x09	; 9
    3292:	0e 94 d5 18 	call	0x31aa	; 0x31aa <Icu_vidReadValue>
			TIFR |= (CLER_FLAG<<ICF1);
    3296:	a8 e5       	ldi	r26, 0x58	; 88
    3298:	b0 e0       	ldi	r27, 0x00	; 0
    329a:	e8 e5       	ldi	r30, 0x58	; 88
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	80 62       	ori	r24, 0x20	; 32
    32a2:	8c 93       	st	X, r24


			if(firstRisingValue<firstFallingValue && firstFallingValue<secondRisingValue)  	/* Check for valid condition,
    32a4:	2d 81       	ldd	r18, Y+5	; 0x05
    32a6:	3e 81       	ldd	r19, Y+6	; 0x06
    32a8:	8f 81       	ldd	r24, Y+7	; 0x07
    32aa:	98 85       	ldd	r25, Y+8	; 0x08
    32ac:	28 17       	cp	r18, r24
    32ae:	39 07       	cpc	r19, r25
    32b0:	08 f0       	brcs	.+2      	; 0x32b4 <Icu_vidCalculations+0xda>
    32b2:	6d c0       	rjmp	.+218    	; 0x338e <Icu_vidCalculations+0x1b4>
    32b4:	2f 81       	ldd	r18, Y+7	; 0x07
    32b6:	38 85       	ldd	r19, Y+8	; 0x08
    32b8:	89 85       	ldd	r24, Y+9	; 0x09
    32ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    32bc:	28 17       	cp	r18, r24
    32be:	39 07       	cpc	r19, r25
    32c0:	08 f0       	brcs	.+2      	; 0x32c4 <Icu_vidCalculations+0xea>
    32c2:	65 c0       	rjmp	.+202    	; 0x338e <Icu_vidCalculations+0x1b4>
							          to avoid timer overflow reading */
			{
			ON_Time     =  firstFallingValue - firstRisingValue;
    32c4:	2f 81       	ldd	r18, Y+7	; 0x07
    32c6:	38 85       	ldd	r19, Y+8	; 0x08
    32c8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ca:	9e 81       	ldd	r25, Y+6	; 0x06
    32cc:	a9 01       	movw	r20, r18
    32ce:	48 1b       	sub	r20, r24
    32d0:	59 0b       	sbc	r21, r25
    32d2:	ca 01       	movw	r24, r20
    32d4:	9c 83       	std	Y+4, r25	; 0x04
    32d6:	8b 83       	std	Y+3, r24	; 0x03
			TotalPeriod =  secondRisingValue - firstRisingValue;
    32d8:	29 85       	ldd	r18, Y+9	; 0x09
    32da:	3a 85       	ldd	r19, Y+10	; 0x0a
    32dc:	8d 81       	ldd	r24, Y+5	; 0x05
    32de:	9e 81       	ldd	r25, Y+6	; 0x06
    32e0:	a9 01       	movw	r20, r18
    32e2:	48 1b       	sub	r20, r24
    32e4:	59 0b       	sbc	r21, r25
    32e6:	ca 01       	movw	r24, r20
    32e8:	9a 83       	std	Y+2, r25	; 0x02
    32ea:	89 83       	std	Y+1, r24	; 0x01
			*DutyCycle  =  ((float)ON_Time/TotalPeriod)*100;
    32ec:	8b 81       	ldd	r24, Y+3	; 0x03
    32ee:	9c 81       	ldd	r25, Y+4	; 0x04
    32f0:	cc 01       	movw	r24, r24
    32f2:	a0 e0       	ldi	r26, 0x00	; 0
    32f4:	b0 e0       	ldi	r27, 0x00	; 0
    32f6:	bc 01       	movw	r22, r24
    32f8:	cd 01       	movw	r24, r26
    32fa:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    32fe:	7b 01       	movw	r14, r22
    3300:	8c 01       	movw	r16, r24
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	9a 81       	ldd	r25, Y+2	; 0x02
    3306:	cc 01       	movw	r24, r24
    3308:	a0 e0       	ldi	r26, 0x00	; 0
    330a:	b0 e0       	ldi	r27, 0x00	; 0
    330c:	bc 01       	movw	r22, r24
    330e:	cd 01       	movw	r24, r26
    3310:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3314:	9b 01       	movw	r18, r22
    3316:	ac 01       	movw	r20, r24
    3318:	c8 01       	movw	r24, r16
    331a:	b7 01       	movw	r22, r14
    331c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3320:	dc 01       	movw	r26, r24
    3322:	cb 01       	movw	r24, r22
    3324:	bc 01       	movw	r22, r24
    3326:	cd 01       	movw	r24, r26
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	48 ec       	ldi	r20, 0xC8	; 200
    332e:	52 e4       	ldi	r21, 0x42	; 66
    3330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3334:	dc 01       	movw	r26, r24
    3336:	cb 01       	movw	r24, r22
    3338:	bc 01       	movw	r22, r24
    333a:	cd 01       	movw	r24, r26
    333c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3340:	dc 01       	movw	r26, r24
    3342:	cb 01       	movw	r24, r22
    3344:	eb 85       	ldd	r30, Y+11	; 0x0b
    3346:	fc 85       	ldd	r31, Y+12	; 0x0c
    3348:	91 83       	std	Z+1, r25	; 0x01
    334a:	80 83       	st	Z, r24
			*Frequency=     F_CPU/(TotalPeriod*8ul);
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	9a 81       	ldd	r25, Y+2	; 0x02
    3350:	cc 01       	movw	r24, r24
    3352:	a0 e0       	ldi	r26, 0x00	; 0
    3354:	b0 e0       	ldi	r27, 0x00	; 0
    3356:	88 0f       	add	r24, r24
    3358:	99 1f       	adc	r25, r25
    335a:	aa 1f       	adc	r26, r26
    335c:	bb 1f       	adc	r27, r27
    335e:	88 0f       	add	r24, r24
    3360:	99 1f       	adc	r25, r25
    3362:	aa 1f       	adc	r26, r26
    3364:	bb 1f       	adc	r27, r27
    3366:	88 0f       	add	r24, r24
    3368:	99 1f       	adc	r25, r25
    336a:	aa 1f       	adc	r26, r26
    336c:	bb 1f       	adc	r27, r27
    336e:	9c 01       	movw	r18, r24
    3370:	ad 01       	movw	r20, r26
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	92 e1       	ldi	r25, 0x12	; 18
    3376:	aa e7       	ldi	r26, 0x7A	; 122
    3378:	b0 e0       	ldi	r27, 0x00	; 0
    337a:	bc 01       	movw	r22, r24
    337c:	cd 01       	movw	r24, r26
    337e:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <__udivmodsi4>
    3382:	da 01       	movw	r26, r20
    3384:	c9 01       	movw	r24, r18
    3386:	ed 85       	ldd	r30, Y+13	; 0x0d
    3388:	fe 85       	ldd	r31, Y+14	; 0x0e
    338a:	91 83       	std	Z+1, r25	; 0x01
    338c:	80 83       	st	Z, r24

			}

}
    338e:	2e 96       	adiw	r28, 0x0e	; 14
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	de bf       	out	0x3e, r29	; 62
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	cd bf       	out	0x3d, r28	; 61
    339a:	cf 91       	pop	r28
    339c:	df 91       	pop	r29
    339e:	1f 91       	pop	r17
    33a0:	0f 91       	pop	r16
    33a2:	ff 90       	pop	r15
    33a4:	ef 90       	pop	r14
    33a6:	08 95       	ret

000033a8 <GetPower>:
 * @return:
 *      - The result of the base raised to the exponent
 * @Note: This function calculates the power of a base raised to an exponent.
 */

static int GetPower( u8 base ,u8 exponent ){
    33a8:	df 93       	push	r29
    33aa:	cf 93       	push	r28
    33ac:	00 d0       	rcall	.+0      	; 0x33ae <GetPower+0x6>
    33ae:	00 d0       	rcall	.+0      	; 0x33b0 <GetPower+0x8>
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
    33b4:	8b 83       	std	Y+3, r24	; 0x03
    33b6:	6c 83       	std	Y+4, r22	; 0x04
    int num=1;
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	9a 83       	std	Y+2, r25	; 0x02
    33be:	89 83       	std	Y+1, r24	; 0x01
    33c0:	12 c0       	rjmp	.+36     	; 0x33e6 <GetPower+0x3e>
	while (exponent >0){

		num*=base;
    33c2:	8b 81       	ldd	r24, Y+3	; 0x03
    33c4:	28 2f       	mov	r18, r24
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	89 81       	ldd	r24, Y+1	; 0x01
    33ca:	9a 81       	ldd	r25, Y+2	; 0x02
    33cc:	ac 01       	movw	r20, r24
    33ce:	42 9f       	mul	r20, r18
    33d0:	c0 01       	movw	r24, r0
    33d2:	43 9f       	mul	r20, r19
    33d4:	90 0d       	add	r25, r0
    33d6:	52 9f       	mul	r21, r18
    33d8:	90 0d       	add	r25, r0
    33da:	11 24       	eor	r1, r1
    33dc:	9a 83       	std	Y+2, r25	; 0x02
    33de:	89 83       	std	Y+1, r24	; 0x01
		exponent --;
    33e0:	8c 81       	ldd	r24, Y+4	; 0x04
    33e2:	81 50       	subi	r24, 0x01	; 1
    33e4:	8c 83       	std	Y+4, r24	; 0x04
 * @Note: This function calculates the power of a base raised to an exponent.
 */

static int GetPower( u8 base ,u8 exponent ){
    int num=1;
	while (exponent >0){
    33e6:	8c 81       	ldd	r24, Y+4	; 0x04
    33e8:	88 23       	and	r24, r24
    33ea:	59 f7       	brne	.-42     	; 0x33c2 <GetPower+0x1a>

		num*=base;
		exponent --;
	}
	return num;
    33ec:	89 81       	ldd	r24, Y+1	; 0x01
    33ee:	9a 81       	ldd	r25, Y+2	; 0x02
}
    33f0:	0f 90       	pop	r0
    33f2:	0f 90       	pop	r0
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	cf 91       	pop	r28
    33fa:	df 91       	pop	r29
    33fc:	08 95       	ret

000033fe <I2C_MASTER_init>:

/****************************************************/
/*********************Functions *********************/
/****************************************************/

I2C_enuErrorStatus I2C_MASTER_init(u16 clock){
    33fe:	cf 92       	push	r12
    3400:	df 92       	push	r13
    3402:	ef 92       	push	r14
    3404:	ff 92       	push	r15
    3406:	0f 93       	push	r16
    3408:	1f 93       	push	r17
    340a:	df 93       	push	r29
    340c:	cf 93       	push	r28
    340e:	00 d0       	rcall	.+0      	; 0x3410 <I2C_MASTER_init+0x12>
    3410:	0f 92       	push	r0
    3412:	cd b7       	in	r28, 0x3d	; 61
    3414:	de b7       	in	r29, 0x3e	; 62
    3416:	9b 83       	std	Y+3, r25	; 0x03
    3418:	8a 83       	std	Y+2, r24	; 0x02

	/*******************Validation Part*************************/
	I2C_enuErrorStatus returneError =I2C_enumOk;
    341a:	19 82       	std	Y+1, r1	; 0x01
	if(CLOCK_PRESCALER > PRESCALER_VALUE_64){
		returneError =I2C_enumWrongConfiguraion;
	}else{
	/*******************Implementation Part*************************/
		/*Set the prescaler of the clock*/
			TWSR = (CLOCK_PRESCALER<<TWPS0);
    341c:	e1 e2       	ldi	r30, 0x21	; 33
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	10 82       	st	Z, r1

		/*Get the value of Bit rate */
			TWBR =(u8) (((F_CPU/clock)-16)/(2*GetPower(4,CLOCK_PRESCALER)));
    3422:	cc 24       	eor	r12, r12
    3424:	dd 24       	eor	r13, r13
    3426:	68 94       	set
    3428:	c5 f8       	bld	r12, 5
    342a:	8a 81       	ldd	r24, Y+2	; 0x02
    342c:	9b 81       	ldd	r25, Y+3	; 0x03
    342e:	9c 01       	movw	r18, r24
    3430:	40 e0       	ldi	r20, 0x00	; 0
    3432:	50 e0       	ldi	r21, 0x00	; 0
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	92 e1       	ldi	r25, 0x12	; 18
    3438:	aa e7       	ldi	r26, 0x7A	; 122
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	bc 01       	movw	r22, r24
    343e:	cd 01       	movw	r24, r26
    3440:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <__udivmodsi4>
    3444:	da 01       	movw	r26, r20
    3446:	c9 01       	movw	r24, r18
    3448:	0f 2e       	mov	r0, r31
    344a:	f0 ef       	ldi	r31, 0xF0	; 240
    344c:	ef 2e       	mov	r14, r31
    344e:	ff ef       	ldi	r31, 0xFF	; 255
    3450:	ff 2e       	mov	r15, r31
    3452:	ff ef       	ldi	r31, 0xFF	; 255
    3454:	0f 2f       	mov	r16, r31
    3456:	ff ef       	ldi	r31, 0xFF	; 255
    3458:	1f 2f       	mov	r17, r31
    345a:	f0 2d       	mov	r31, r0
    345c:	e8 0e       	add	r14, r24
    345e:	f9 1e       	adc	r15, r25
    3460:	0a 1f       	adc	r16, r26
    3462:	1b 1f       	adc	r17, r27
    3464:	84 e0       	ldi	r24, 0x04	; 4
    3466:	60 e0       	ldi	r22, 0x00	; 0
    3468:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <GetPower>
    346c:	88 0f       	add	r24, r24
    346e:	99 1f       	adc	r25, r25
    3470:	9c 01       	movw	r18, r24
    3472:	44 27       	eor	r20, r20
    3474:	37 fd       	sbrc	r19, 7
    3476:	40 95       	com	r20
    3478:	54 2f       	mov	r21, r20
    347a:	c8 01       	movw	r24, r16
    347c:	b7 01       	movw	r22, r14
    347e:	0e 94 a9 25 	call	0x4b52	; 0x4b52 <__udivmodsi4>
    3482:	da 01       	movw	r26, r20
    3484:	c9 01       	movw	r24, r18
    3486:	f6 01       	movw	r30, r12
    3488:	80 83       	st	Z, r24
	}
	return returneError;
    348a:	89 81       	ldd	r24, Y+1	; 0x01
}
    348c:	0f 90       	pop	r0
    348e:	0f 90       	pop	r0
    3490:	0f 90       	pop	r0
    3492:	cf 91       	pop	r28
    3494:	df 91       	pop	r29
    3496:	1f 91       	pop	r17
    3498:	0f 91       	pop	r16
    349a:	ff 90       	pop	r15
    349c:	ef 90       	pop	r14
    349e:	df 90       	pop	r13
    34a0:	cf 90       	pop	r12
    34a2:	08 95       	ret

000034a4 <I2C_SendSTART>:
I2C_enuErrorStatus I2C_SendSTART(void){
    34a4:	df 93       	push	r29
    34a6:	cf 93       	push	r28
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
    34ac:	2a 97       	sbiw	r28, 0x0a	; 10
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	f8 94       	cli
    34b2:	de bf       	out	0x3e, r29	; 62
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	cd bf       	out	0x3d, r28	; 61

	/*******************Validation Part*************************/
	I2C_enuErrorStatus returneError =I2C_enumOk;
    34b8:	19 82       	std	Y+1, r1	; 0x01

	/*******************Implementation Part*************************/

	volatile u32 timeout =50000;
    34ba:	80 e5       	ldi	r24, 0x50	; 80
    34bc:	93 ec       	ldi	r25, 0xC3	; 195
    34be:	a0 e0       	ldi	r26, 0x00	; 0
    34c0:	b0 e0       	ldi	r27, 0x00	; 0
    34c2:	8a 83       	std	Y+2, r24	; 0x02
    34c4:	9b 83       	std	Y+3, r25	; 0x03
    34c6:	ac 83       	std	Y+4, r26	; 0x04
    34c8:	bd 83       	std	Y+5, r27	; 0x05

	/*Enable I2C, Clear Interrupt flag and Send Start Condition */
	TWCR =((ENABLE<<TWEN)|(ENABLE<<TWINT)|(ENABLE<<TWSTA));
    34ca:	e6 e5       	ldi	r30, 0x56	; 86
    34cc:	f0 e0       	ldi	r31, 0x00	; 0
    34ce:	84 ea       	ldi	r24, 0xA4	; 164
    34d0:	80 83       	st	Z, r24

	/*Wait on the TWI Interrupt Flag*/
	while(timeout--&&~((TWCR>>TWINT)&1));
    34d2:	8a 81       	ldd	r24, Y+2	; 0x02
    34d4:	9b 81       	ldd	r25, Y+3	; 0x03
    34d6:	ac 81       	ldd	r26, Y+4	; 0x04
    34d8:	bd 81       	ldd	r27, Y+5	; 0x05
    34da:	8f 83       	std	Y+7, r24	; 0x07
    34dc:	98 87       	std	Y+8, r25	; 0x08
    34de:	a9 87       	std	Y+9, r26	; 0x09
    34e0:	ba 87       	std	Y+10, r27	; 0x0a
    34e2:	1e 82       	std	Y+6, r1	; 0x06
    34e4:	8f 81       	ldd	r24, Y+7	; 0x07
    34e6:	98 85       	ldd	r25, Y+8	; 0x08
    34e8:	a9 85       	ldd	r26, Y+9	; 0x09
    34ea:	ba 85       	ldd	r27, Y+10	; 0x0a
    34ec:	00 97       	sbiw	r24, 0x00	; 0
    34ee:	a1 05       	cpc	r26, r1
    34f0:	b1 05       	cpc	r27, r1
    34f2:	11 f0       	breq	.+4      	; 0x34f8 <I2C_SendSTART+0x54>
    34f4:	91 e0       	ldi	r25, 0x01	; 1
    34f6:	9e 83       	std	Y+6, r25	; 0x06
    34f8:	8f 81       	ldd	r24, Y+7	; 0x07
    34fa:	98 85       	ldd	r25, Y+8	; 0x08
    34fc:	a9 85       	ldd	r26, Y+9	; 0x09
    34fe:	ba 85       	ldd	r27, Y+10	; 0x0a
    3500:	01 97       	sbiw	r24, 0x01	; 1
    3502:	a1 09       	sbc	r26, r1
    3504:	b1 09       	sbc	r27, r1
    3506:	8a 83       	std	Y+2, r24	; 0x02
    3508:	9b 83       	std	Y+3, r25	; 0x03
    350a:	ac 83       	std	Y+4, r26	; 0x04
    350c:	bd 83       	std	Y+5, r27	; 0x05
    350e:	81 e0       	ldi	r24, 0x01	; 1
    3510:	ae 81       	ldd	r26, Y+6	; 0x06
    3512:	8a 27       	eor	r24, r26
    3514:	88 23       	and	r24, r24
    3516:	61 f4       	brne	.+24     	; 0x3530 <I2C_SendSTART+0x8c>
    3518:	e6 e5       	ldi	r30, 0x56	; 86
    351a:	f0 e0       	ldi	r31, 0x00	; 0
    351c:	80 81       	ld	r24, Z
    351e:	88 1f       	adc	r24, r24
    3520:	88 27       	eor	r24, r24
    3522:	88 1f       	adc	r24, r24
    3524:	88 2f       	mov	r24, r24
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	bf ef       	ldi	r27, 0xFF	; 255
    352a:	8f 3f       	cpi	r24, 0xFF	; 255
    352c:	9b 07       	cpc	r25, r27
    352e:	89 f6       	brne	.-94     	; 0x34d2 <I2C_SendSTART+0x2e>

	/*Check on time out*/
	if(timeout == 0){
    3530:	8a 81       	ldd	r24, Y+2	; 0x02
    3532:	9b 81       	ldd	r25, Y+3	; 0x03
    3534:	ac 81       	ldd	r26, Y+4	; 0x04
    3536:	bd 81       	ldd	r27, Y+5	; 0x05
    3538:	00 97       	sbiw	r24, 0x00	; 0
    353a:	a1 05       	cpc	r26, r1
    353c:	b1 05       	cpc	r27, r1
    353e:	11 f4       	brne	.+4      	; 0x3544 <I2C_SendSTART+0xa0>
		returneError = I2C_enumTimeOut;
    3540:	83 e0       	ldi	r24, 0x03	; 3
    3542:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Check on the value of status of TWI*/
	if((TWSR & GET_STATUS_MSK)!=START_COND_TRANSMITTED){
    3544:	e1 e2       	ldi	r30, 0x21	; 33
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	80 81       	ld	r24, Z
    354a:	88 2f       	mov	r24, r24
    354c:	90 e0       	ldi	r25, 0x00	; 0
    354e:	88 7f       	andi	r24, 0xF8	; 248
    3550:	90 70       	andi	r25, 0x00	; 0
    3552:	88 30       	cpi	r24, 0x08	; 8
    3554:	91 05       	cpc	r25, r1
    3556:	11 f0       	breq	.+4      	; 0x355c <I2C_SendSTART+0xb8>
		returneError = I2C_enumWrongInOperation;
    3558:	82 e0       	ldi	r24, 0x02	; 2
    355a:	89 83       	std	Y+1, r24	; 0x01
	}
	return returneError;
    355c:	89 81       	ldd	r24, Y+1	; 0x01

}
    355e:	2a 96       	adiw	r28, 0x0a	; 10
    3560:	0f b6       	in	r0, 0x3f	; 63
    3562:	f8 94       	cli
    3564:	de bf       	out	0x3e, r29	; 62
    3566:	0f be       	out	0x3f, r0	; 63
    3568:	cd bf       	out	0x3d, r28	; 61
    356a:	cf 91       	pop	r28
    356c:	df 91       	pop	r29
    356e:	08 95       	ret

00003570 <I2C_SendSTOP>:
void I2C_SendSTOP(void){
    3570:	df 93       	push	r29
    3572:	cf 93       	push	r28
    3574:	cd b7       	in	r28, 0x3d	; 61
    3576:	de b7       	in	r29, 0x3e	; 62

	/*******************Implementation Part*************************/
	/*Clear Interrupt flag, and Send Stop Condition  */
	TWCR =(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    3578:	e6 e5       	ldi	r30, 0x56	; 86
    357a:	f0 e0       	ldi	r31, 0x00	; 0
    357c:	84 e9       	ldi	r24, 0x94	; 148
    357e:	80 83       	st	Z, r24
}
    3580:	cf 91       	pop	r28
    3582:	df 91       	pop	r29
    3584:	08 95       	ret

00003586 <I2C_SetSlaveAddress>:

I2C_enuErrorStatus I2C_SetSlaveAddress(u8 address,u8 generalCallActivate){
    3586:	df 93       	push	r29
    3588:	cf 93       	push	r28
    358a:	00 d0       	rcall	.+0      	; 0x358c <I2C_SetSlaveAddress+0x6>
    358c:	0f 92       	push	r0
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
    3592:	8a 83       	std	Y+2, r24	; 0x02
    3594:	6b 83       	std	Y+3, r22	; 0x03
	/*******************Validation Part*************************/
	I2C_enuErrorStatus returneError =I2C_enumOk;
    3596:	19 82       	std	Y+1, r1	; 0x01

	/*******************Implementation Part*************************/

	if (address>MAX_ADDRESS_OF_SLAVES){
    3598:	8a 81       	ldd	r24, Y+2	; 0x02
    359a:	82 38       	cpi	r24, 0x82	; 130
    359c:	40 f4       	brcc	.+16     	; 0x35ae <I2C_SetSlaveAddress+0x28>
		//Error
	}else{

		TWAR = (address<<1)+generalCallActivate;
    359e:	e2 e2       	ldi	r30, 0x22	; 34
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	8a 81       	ldd	r24, Y+2	; 0x02
    35a4:	98 2f       	mov	r25, r24
    35a6:	99 0f       	add	r25, r25
    35a8:	8b 81       	ldd	r24, Y+3	; 0x03
    35aa:	89 0f       	add	r24, r25
    35ac:	80 83       	st	Z, r24
	}
	return returneError;
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    35b0:	0f 90       	pop	r0
    35b2:	0f 90       	pop	r0
    35b4:	0f 90       	pop	r0
    35b6:	cf 91       	pop	r28
    35b8:	df 91       	pop	r29
    35ba:	08 95       	ret

000035bc <I2C_SendData>:
I2C_enuErrorStatus I2C_SendData(u8 data){
    35bc:	df 93       	push	r29
    35be:	cf 93       	push	r28
    35c0:	cd b7       	in	r28, 0x3d	; 61
    35c2:	de b7       	in	r29, 0x3e	; 62
    35c4:	2b 97       	sbiw	r28, 0x0b	; 11
    35c6:	0f b6       	in	r0, 0x3f	; 63
    35c8:	f8 94       	cli
    35ca:	de bf       	out	0x3e, r29	; 62
    35cc:	0f be       	out	0x3f, r0	; 63
    35ce:	cd bf       	out	0x3d, r28	; 61
    35d0:	8e 83       	std	Y+6, r24	; 0x06

	/*******************Validation Part*************************/
	I2C_enuErrorStatus returneError =I2C_enumOk;
    35d2:	19 82       	std	Y+1, r1	; 0x01
	if(data > MAX_DATA_VALUE){
		returneError = I2C_enumWrongData;

	}else{
		/*******************Implementation Part*************************/
		volatile u32 timeout =50000;
    35d4:	80 e5       	ldi	r24, 0x50	; 80
    35d6:	93 ec       	ldi	r25, 0xC3	; 195
    35d8:	a0 e0       	ldi	r26, 0x00	; 0
    35da:	b0 e0       	ldi	r27, 0x00	; 0
    35dc:	8a 83       	std	Y+2, r24	; 0x02
    35de:	9b 83       	std	Y+3, r25	; 0x03
    35e0:	ac 83       	std	Y+4, r26	; 0x04
    35e2:	bd 83       	std	Y+5, r27	; 0x05
		TWDR= data;
    35e4:	e3 e2       	ldi	r30, 0x23	; 35
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	8e 81       	ldd	r24, Y+6	; 0x06
    35ea:	80 83       	st	Z, r24

		/*Clear Interrupt flag and enable TWI*/
		TWCR =(ENABLE<<TWINT)|(ENABLE<<TWEN);
    35ec:	e6 e5       	ldi	r30, 0x56	; 86
    35ee:	f0 e0       	ldi	r31, 0x00	; 0
    35f0:	84 e8       	ldi	r24, 0x84	; 132
    35f2:	80 83       	st	Z, r24

		/*Wait on the TWI Interrupt Flag*/
		while(timeout--&&~((TWCR>>TWINT)&1));
    35f4:	8a 81       	ldd	r24, Y+2	; 0x02
    35f6:	9b 81       	ldd	r25, Y+3	; 0x03
    35f8:	ac 81       	ldd	r26, Y+4	; 0x04
    35fa:	bd 81       	ldd	r27, Y+5	; 0x05
    35fc:	88 87       	std	Y+8, r24	; 0x08
    35fe:	99 87       	std	Y+9, r25	; 0x09
    3600:	aa 87       	std	Y+10, r26	; 0x0a
    3602:	bb 87       	std	Y+11, r27	; 0x0b
    3604:	1f 82       	std	Y+7, r1	; 0x07
    3606:	88 85       	ldd	r24, Y+8	; 0x08
    3608:	99 85       	ldd	r25, Y+9	; 0x09
    360a:	aa 85       	ldd	r26, Y+10	; 0x0a
    360c:	bb 85       	ldd	r27, Y+11	; 0x0b
    360e:	00 97       	sbiw	r24, 0x00	; 0
    3610:	a1 05       	cpc	r26, r1
    3612:	b1 05       	cpc	r27, r1
    3614:	11 f0       	breq	.+4      	; 0x361a <I2C_SendData+0x5e>
    3616:	91 e0       	ldi	r25, 0x01	; 1
    3618:	9f 83       	std	Y+7, r25	; 0x07
    361a:	88 85       	ldd	r24, Y+8	; 0x08
    361c:	99 85       	ldd	r25, Y+9	; 0x09
    361e:	aa 85       	ldd	r26, Y+10	; 0x0a
    3620:	bb 85       	ldd	r27, Y+11	; 0x0b
    3622:	01 97       	sbiw	r24, 0x01	; 1
    3624:	a1 09       	sbc	r26, r1
    3626:	b1 09       	sbc	r27, r1
    3628:	8a 83       	std	Y+2, r24	; 0x02
    362a:	9b 83       	std	Y+3, r25	; 0x03
    362c:	ac 83       	std	Y+4, r26	; 0x04
    362e:	bd 83       	std	Y+5, r27	; 0x05
    3630:	81 e0       	ldi	r24, 0x01	; 1
    3632:	af 81       	ldd	r26, Y+7	; 0x07
    3634:	8a 27       	eor	r24, r26
    3636:	88 23       	and	r24, r24
    3638:	61 f4       	brne	.+24     	; 0x3652 <I2C_SendData+0x96>
    363a:	e6 e5       	ldi	r30, 0x56	; 86
    363c:	f0 e0       	ldi	r31, 0x00	; 0
    363e:	80 81       	ld	r24, Z
    3640:	88 1f       	adc	r24, r24
    3642:	88 27       	eor	r24, r24
    3644:	88 1f       	adc	r24, r24
    3646:	88 2f       	mov	r24, r24
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	bf ef       	ldi	r27, 0xFF	; 255
    364c:	8f 3f       	cpi	r24, 0xFF	; 255
    364e:	9b 07       	cpc	r25, r27
    3650:	89 f6       	brne	.-94     	; 0x35f4 <I2C_SendData+0x38>

		/*Check on time out*/
		if(timeout == 0){
    3652:	8a 81       	ldd	r24, Y+2	; 0x02
    3654:	9b 81       	ldd	r25, Y+3	; 0x03
    3656:	ac 81       	ldd	r26, Y+4	; 0x04
    3658:	bd 81       	ldd	r27, Y+5	; 0x05
    365a:	00 97       	sbiw	r24, 0x00	; 0
    365c:	a1 05       	cpc	r26, r1
    365e:	b1 05       	cpc	r27, r1
    3660:	11 f4       	brne	.+4      	; 0x3666 <I2C_SendData+0xaa>
			returneError = I2C_enumTimeOut;
    3662:	83 e0       	ldi	r24, 0x03	; 3
    3664:	89 83       	std	Y+1, r24	; 0x01
		}

		/*Check on the value of status of TWI*/
		if((TWSR & GET_STATUS_MSK)!=TX_DATA_TRANSMITTED_PLUS_ACK_RECEIVED){
    3666:	e1 e2       	ldi	r30, 0x21	; 33
    3668:	f0 e0       	ldi	r31, 0x00	; 0
    366a:	80 81       	ld	r24, Z
    366c:	88 2f       	mov	r24, r24
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	88 7f       	andi	r24, 0xF8	; 248
    3672:	90 70       	andi	r25, 0x00	; 0
    3674:	88 32       	cpi	r24, 0x28	; 40
    3676:	91 05       	cpc	r25, r1
    3678:	11 f0       	breq	.+4      	; 0x367e <I2C_SendData+0xc2>
			returneError = I2C_enumWrongInOperation;
    367a:	82 e0       	ldi	r24, 0x02	; 2
    367c:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return returneError;
    367e:	89 81       	ldd	r24, Y+1	; 0x01

}
    3680:	2b 96       	adiw	r28, 0x0b	; 11
    3682:	0f b6       	in	r0, 0x3f	; 63
    3684:	f8 94       	cli
    3686:	de bf       	out	0x3e, r29	; 62
    3688:	0f be       	out	0x3f, r0	; 63
    368a:	cd bf       	out	0x3d, r28	; 61
    368c:	cf 91       	pop	r28
    368e:	df 91       	pop	r29
    3690:	08 95       	ret

00003692 <I2C_SendAddress>:

I2C_enuErrorStatus I2C_SendAddress(u8 address,u8 operation){
    3692:	df 93       	push	r29
    3694:	cf 93       	push	r28
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
    369a:	2c 97       	sbiw	r28, 0x0c	; 12
    369c:	0f b6       	in	r0, 0x3f	; 63
    369e:	f8 94       	cli
    36a0:	de bf       	out	0x3e, r29	; 62
    36a2:	0f be       	out	0x3f, r0	; 63
    36a4:	cd bf       	out	0x3d, r28	; 61
    36a6:	8e 83       	std	Y+6, r24	; 0x06
    36a8:	6f 83       	std	Y+7, r22	; 0x07

	/*******************Validation Part*************************/
	I2C_enuErrorStatus returneError =I2C_enumOk;
    36aa:	19 82       	std	Y+1, r1	; 0x01

	/*Check on the slave address*/
	if (address > MAX_ADDRESS_OF_SLAVES){
    36ac:	8e 81       	ldd	r24, Y+6	; 0x06
    36ae:	82 38       	cpi	r24, 0x82	; 130
    36b0:	18 f0       	brcs	.+6      	; 0x36b8 <I2C_SendAddress+0x26>
		returneError =I2C_enumWrongAddress;
    36b2:	85 e0       	ldi	r24, 0x05	; 5
    36b4:	89 83       	std	Y+1, r24	; 0x01
    36b6:	59 c0       	rjmp	.+178    	; 0x376a <I2C_SendAddress+0xd8>

	}else{
		/*******************Implementation Part*************************/
		volatile u32 timeout =50000;
    36b8:	80 e5       	ldi	r24, 0x50	; 80
    36ba:	93 ec       	ldi	r25, 0xC3	; 195
    36bc:	a0 e0       	ldi	r26, 0x00	; 0
    36be:	b0 e0       	ldi	r27, 0x00	; 0
    36c0:	8a 83       	std	Y+2, r24	; 0x02
    36c2:	9b 83       	std	Y+3, r25	; 0x03
    36c4:	ac 83       	std	Y+4, r26	; 0x04
    36c6:	bd 83       	std	Y+5, r27	; 0x05

		TWDR= (address<<1)+operation;
    36c8:	e3 e2       	ldi	r30, 0x23	; 35
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	8e 81       	ldd	r24, Y+6	; 0x06
    36ce:	98 2f       	mov	r25, r24
    36d0:	99 0f       	add	r25, r25
    36d2:	8f 81       	ldd	r24, Y+7	; 0x07
    36d4:	89 0f       	add	r24, r25
    36d6:	80 83       	st	Z, r24

		/*Clear Interrupt flag and enable TWI*/
		TWCR =(ENABLE<<TWINT)|(ENABLE<<TWEN);
    36d8:	e6 e5       	ldi	r30, 0x56	; 86
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	84 e8       	ldi	r24, 0x84	; 132
    36de:	80 83       	st	Z, r24

		/*Wait on the TWI Interrupt Flag*/
		while(timeout--&&~((TWCR>>TWINT)&1));
    36e0:	8a 81       	ldd	r24, Y+2	; 0x02
    36e2:	9b 81       	ldd	r25, Y+3	; 0x03
    36e4:	ac 81       	ldd	r26, Y+4	; 0x04
    36e6:	bd 81       	ldd	r27, Y+5	; 0x05
    36e8:	89 87       	std	Y+9, r24	; 0x09
    36ea:	9a 87       	std	Y+10, r25	; 0x0a
    36ec:	ab 87       	std	Y+11, r26	; 0x0b
    36ee:	bc 87       	std	Y+12, r27	; 0x0c
    36f0:	18 86       	std	Y+8, r1	; 0x08
    36f2:	89 85       	ldd	r24, Y+9	; 0x09
    36f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f6:	ab 85       	ldd	r26, Y+11	; 0x0b
    36f8:	bc 85       	ldd	r27, Y+12	; 0x0c
    36fa:	00 97       	sbiw	r24, 0x00	; 0
    36fc:	a1 05       	cpc	r26, r1
    36fe:	b1 05       	cpc	r27, r1
    3700:	11 f0       	breq	.+4      	; 0x3706 <I2C_SendAddress+0x74>
    3702:	91 e0       	ldi	r25, 0x01	; 1
    3704:	98 87       	std	Y+8, r25	; 0x08
    3706:	89 85       	ldd	r24, Y+9	; 0x09
    3708:	9a 85       	ldd	r25, Y+10	; 0x0a
    370a:	ab 85       	ldd	r26, Y+11	; 0x0b
    370c:	bc 85       	ldd	r27, Y+12	; 0x0c
    370e:	01 97       	sbiw	r24, 0x01	; 1
    3710:	a1 09       	sbc	r26, r1
    3712:	b1 09       	sbc	r27, r1
    3714:	8a 83       	std	Y+2, r24	; 0x02
    3716:	9b 83       	std	Y+3, r25	; 0x03
    3718:	ac 83       	std	Y+4, r26	; 0x04
    371a:	bd 83       	std	Y+5, r27	; 0x05
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	a8 85       	ldd	r26, Y+8	; 0x08
    3720:	8a 27       	eor	r24, r26
    3722:	88 23       	and	r24, r24
    3724:	61 f4       	brne	.+24     	; 0x373e <I2C_SendAddress+0xac>
    3726:	e6 e5       	ldi	r30, 0x56	; 86
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	80 81       	ld	r24, Z
    372c:	88 1f       	adc	r24, r24
    372e:	88 27       	eor	r24, r24
    3730:	88 1f       	adc	r24, r24
    3732:	88 2f       	mov	r24, r24
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	bf ef       	ldi	r27, 0xFF	; 255
    3738:	8f 3f       	cpi	r24, 0xFF	; 255
    373a:	9b 07       	cpc	r25, r27
    373c:	89 f6       	brne	.-94     	; 0x36e0 <I2C_SendAddress+0x4e>

		/*Check on time out*/
		if(timeout == 0){
    373e:	8a 81       	ldd	r24, Y+2	; 0x02
    3740:	9b 81       	ldd	r25, Y+3	; 0x03
    3742:	ac 81       	ldd	r26, Y+4	; 0x04
    3744:	bd 81       	ldd	r27, Y+5	; 0x05
    3746:	00 97       	sbiw	r24, 0x00	; 0
    3748:	a1 05       	cpc	r26, r1
    374a:	b1 05       	cpc	r27, r1
    374c:	11 f4       	brne	.+4      	; 0x3752 <I2C_SendAddress+0xc0>
			returneError = I2C_enumTimeOut;
    374e:	83 e0       	ldi	r24, 0x03	; 3
    3750:	89 83       	std	Y+1, r24	; 0x01
		}

		/*Check on the value of status of TWI*/
		if((TWSR & GET_STATUS_MSK)!=TX_SLA_W_TRANSMITTED_PLUS_ACK_RECEIVED){
    3752:	e1 e2       	ldi	r30, 0x21	; 33
    3754:	f0 e0       	ldi	r31, 0x00	; 0
    3756:	80 81       	ld	r24, Z
    3758:	88 2f       	mov	r24, r24
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	88 7f       	andi	r24, 0xF8	; 248
    375e:	90 70       	andi	r25, 0x00	; 0
    3760:	88 31       	cpi	r24, 0x18	; 24
    3762:	91 05       	cpc	r25, r1
    3764:	11 f0       	breq	.+4      	; 0x376a <I2C_SendAddress+0xd8>
			returneError = I2C_enumWrongInOperation;
    3766:	82 e0       	ldi	r24, 0x02	; 2
    3768:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return returneError;
    376a:	89 81       	ldd	r24, Y+1	; 0x01
}
    376c:	2c 96       	adiw	r28, 0x0c	; 12
    376e:	0f b6       	in	r0, 0x3f	; 63
    3770:	f8 94       	cli
    3772:	de bf       	out	0x3e, r29	; 62
    3774:	0f be       	out	0x3f, r0	; 63
    3776:	cd bf       	out	0x3d, r28	; 61
    3778:	cf 91       	pop	r28
    377a:	df 91       	pop	r29
    377c:	08 95       	ret

0000377e <I2C_SlaveReadData>:
I2C_enuErrorStatus I2C_SlaveReadData(u8* data){
    377e:	df 93       	push	r29
    3780:	cf 93       	push	r28
    3782:	cd b7       	in	r28, 0x3d	; 61
    3784:	de b7       	in	r29, 0x3e	; 62
    3786:	65 97       	sbiw	r28, 0x15	; 21
    3788:	0f b6       	in	r0, 0x3f	; 63
    378a:	f8 94       	cli
    378c:	de bf       	out	0x3e, r29	; 62
    378e:	0f be       	out	0x3f, r0	; 63
    3790:	cd bf       	out	0x3d, r28	; 61
    3792:	9b 87       	std	Y+11, r25	; 0x0b
    3794:	8a 87       	std	Y+10, r24	; 0x0a

	/*******************Validation Part*************************/
	I2C_enuErrorStatus returneError =I2C_enumOk;
    3796:	19 82       	std	Y+1, r1	; 0x01

	/*Check on the data pointer value*/
	if(data == NULL){
    3798:	8a 85       	ldd	r24, Y+10	; 0x0a
    379a:	9b 85       	ldd	r25, Y+11	; 0x0b
    379c:	00 97       	sbiw	r24, 0x00	; 0
    379e:	19 f4       	brne	.+6      	; 0x37a6 <I2C_SlaveReadData+0x28>
		returneError =I2C_enumNULLPointer;
    37a0:	86 e0       	ldi	r24, 0x06	; 6
    37a2:	89 83       	std	Y+1, r24	; 0x01
    37a4:	a8 c0       	rjmp	.+336    	; 0x38f6 <I2C_SlaveReadData+0x178>
	}else{
		/*******************Implementation Part*************************/

		volatile u32 timeout =50000;
    37a6:	80 e5       	ldi	r24, 0x50	; 80
    37a8:	93 ec       	ldi	r25, 0xC3	; 195
    37aa:	a0 e0       	ldi	r26, 0x00	; 0
    37ac:	b0 e0       	ldi	r27, 0x00	; 0
    37ae:	8a 83       	std	Y+2, r24	; 0x02
    37b0:	9b 83       	std	Y+3, r25	; 0x03
    37b2:	ac 83       	std	Y+4, r26	; 0x04
    37b4:	bd 83       	std	Y+5, r27	; 0x05

		/*First, Receive Slave Address*/

		/*Clear Interrupt flag, enable TWI and ACK*/
		TWCR =(ENABLE<<TWINT)|(ENABLE<<TWEN)|(ENABLE<<TWEA);
    37b6:	e6 e5       	ldi	r30, 0x56	; 86
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	84 ec       	ldi	r24, 0xC4	; 196
    37bc:	80 83       	st	Z, r24

		/*Wait on the TWI Interrupt Flag*/
		while(timeout--&&~((TWCR>>TWINT)&1));
    37be:	8a 81       	ldd	r24, Y+2	; 0x02
    37c0:	9b 81       	ldd	r25, Y+3	; 0x03
    37c2:	ac 81       	ldd	r26, Y+4	; 0x04
    37c4:	bd 81       	ldd	r27, Y+5	; 0x05
    37c6:	8a 8b       	std	Y+18, r24	; 0x12
    37c8:	9b 8b       	std	Y+19, r25	; 0x13
    37ca:	ac 8b       	std	Y+20, r26	; 0x14
    37cc:	bd 8b       	std	Y+21, r27	; 0x15
    37ce:	19 8a       	std	Y+17, r1	; 0x11
    37d0:	8a 89       	ldd	r24, Y+18	; 0x12
    37d2:	9b 89       	ldd	r25, Y+19	; 0x13
    37d4:	ac 89       	ldd	r26, Y+20	; 0x14
    37d6:	bd 89       	ldd	r27, Y+21	; 0x15
    37d8:	00 97       	sbiw	r24, 0x00	; 0
    37da:	a1 05       	cpc	r26, r1
    37dc:	b1 05       	cpc	r27, r1
    37de:	11 f0       	breq	.+4      	; 0x37e4 <I2C_SlaveReadData+0x66>
    37e0:	91 e0       	ldi	r25, 0x01	; 1
    37e2:	99 8b       	std	Y+17, r25	; 0x11
    37e4:	8a 89       	ldd	r24, Y+18	; 0x12
    37e6:	9b 89       	ldd	r25, Y+19	; 0x13
    37e8:	ac 89       	ldd	r26, Y+20	; 0x14
    37ea:	bd 89       	ldd	r27, Y+21	; 0x15
    37ec:	01 97       	sbiw	r24, 0x01	; 1
    37ee:	a1 09       	sbc	r26, r1
    37f0:	b1 09       	sbc	r27, r1
    37f2:	8a 83       	std	Y+2, r24	; 0x02
    37f4:	9b 83       	std	Y+3, r25	; 0x03
    37f6:	ac 83       	std	Y+4, r26	; 0x04
    37f8:	bd 83       	std	Y+5, r27	; 0x05
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	a9 89       	ldd	r26, Y+17	; 0x11
    37fe:	8a 27       	eor	r24, r26
    3800:	88 23       	and	r24, r24
    3802:	61 f4       	brne	.+24     	; 0x381c <I2C_SlaveReadData+0x9e>
    3804:	e6 e5       	ldi	r30, 0x56	; 86
    3806:	f0 e0       	ldi	r31, 0x00	; 0
    3808:	80 81       	ld	r24, Z
    380a:	88 1f       	adc	r24, r24
    380c:	88 27       	eor	r24, r24
    380e:	88 1f       	adc	r24, r24
    3810:	88 2f       	mov	r24, r24
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	bf ef       	ldi	r27, 0xFF	; 255
    3816:	8f 3f       	cpi	r24, 0xFF	; 255
    3818:	9b 07       	cpc	r25, r27
    381a:	89 f6       	brne	.-94     	; 0x37be <I2C_SlaveReadData+0x40>

		/*Check on time out*/
		if(timeout == 0){
    381c:	8a 81       	ldd	r24, Y+2	; 0x02
    381e:	9b 81       	ldd	r25, Y+3	; 0x03
    3820:	ac 81       	ldd	r26, Y+4	; 0x04
    3822:	bd 81       	ldd	r27, Y+5	; 0x05
    3824:	00 97       	sbiw	r24, 0x00	; 0
    3826:	a1 05       	cpc	r26, r1
    3828:	b1 05       	cpc	r27, r1
    382a:	11 f4       	brne	.+4      	; 0x3830 <I2C_SlaveReadData+0xb2>
			returneError = I2C_enumTimeOut;
    382c:	83 e0       	ldi	r24, 0x03	; 3
    382e:	89 83       	std	Y+1, r24	; 0x01
		}


		/*Check on the value of status of TWI*/
		if((TWSR & GET_STATUS_MSK)!=SLA_W_RECEIVED_PLUS_ACK_RETURNED){
    3830:	e1 e2       	ldi	r30, 0x21	; 33
    3832:	f0 e0       	ldi	r31, 0x00	; 0
    3834:	80 81       	ld	r24, Z
    3836:	88 2f       	mov	r24, r24
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	88 7f       	andi	r24, 0xF8	; 248
    383c:	90 70       	andi	r25, 0x00	; 0
    383e:	80 36       	cpi	r24, 0x60	; 96
    3840:	91 05       	cpc	r25, r1
    3842:	11 f0       	breq	.+4      	; 0x3848 <I2C_SlaveReadData+0xca>
			returneError = I2C_enumWrongInOperation;
    3844:	82 e0       	ldi	r24, 0x02	; 2
    3846:	89 83       	std	Y+1, r24	; 0x01
		}

		/*Second, Receive data*/
		volatile u32  timeout2 =50000;
    3848:	80 e5       	ldi	r24, 0x50	; 80
    384a:	93 ec       	ldi	r25, 0xC3	; 195
    384c:	a0 e0       	ldi	r26, 0x00	; 0
    384e:	b0 e0       	ldi	r27, 0x00	; 0
    3850:	8e 83       	std	Y+6, r24	; 0x06
    3852:	9f 83       	std	Y+7, r25	; 0x07
    3854:	a8 87       	std	Y+8, r26	; 0x08
    3856:	b9 87       	std	Y+9, r27	; 0x09

		/*Clear Interrupt flag, enable TWI and ACK*/
		TWCR =(ENABLE<<TWINT)|(ENABLE<<TWEN)|(ENABLE<<TWEA);
    3858:	e6 e5       	ldi	r30, 0x56	; 86
    385a:	f0 e0       	ldi	r31, 0x00	; 0
    385c:	84 ec       	ldi	r24, 0xC4	; 196
    385e:	80 83       	st	Z, r24

		/*Wait on the TWI Interrupt Flag*/
		while(timeout2--&&~((TWCR>>TWINT)&1));
    3860:	8e 81       	ldd	r24, Y+6	; 0x06
    3862:	9f 81       	ldd	r25, Y+7	; 0x07
    3864:	a8 85       	ldd	r26, Y+8	; 0x08
    3866:	b9 85       	ldd	r27, Y+9	; 0x09
    3868:	8d 87       	std	Y+13, r24	; 0x0d
    386a:	9e 87       	std	Y+14, r25	; 0x0e
    386c:	af 87       	std	Y+15, r26	; 0x0f
    386e:	b8 8b       	std	Y+16, r27	; 0x10
    3870:	1c 86       	std	Y+12, r1	; 0x0c
    3872:	8d 85       	ldd	r24, Y+13	; 0x0d
    3874:	9e 85       	ldd	r25, Y+14	; 0x0e
    3876:	af 85       	ldd	r26, Y+15	; 0x0f
    3878:	b8 89       	ldd	r27, Y+16	; 0x10
    387a:	00 97       	sbiw	r24, 0x00	; 0
    387c:	a1 05       	cpc	r26, r1
    387e:	b1 05       	cpc	r27, r1
    3880:	11 f0       	breq	.+4      	; 0x3886 <I2C_SlaveReadData+0x108>
    3882:	91 e0       	ldi	r25, 0x01	; 1
    3884:	9c 87       	std	Y+12, r25	; 0x0c
    3886:	8d 85       	ldd	r24, Y+13	; 0x0d
    3888:	9e 85       	ldd	r25, Y+14	; 0x0e
    388a:	af 85       	ldd	r26, Y+15	; 0x0f
    388c:	b8 89       	ldd	r27, Y+16	; 0x10
    388e:	01 97       	sbiw	r24, 0x01	; 1
    3890:	a1 09       	sbc	r26, r1
    3892:	b1 09       	sbc	r27, r1
    3894:	8e 83       	std	Y+6, r24	; 0x06
    3896:	9f 83       	std	Y+7, r25	; 0x07
    3898:	a8 87       	std	Y+8, r26	; 0x08
    389a:	b9 87       	std	Y+9, r27	; 0x09
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	ac 85       	ldd	r26, Y+12	; 0x0c
    38a0:	8a 27       	eor	r24, r26
    38a2:	88 23       	and	r24, r24
    38a4:	61 f4       	brne	.+24     	; 0x38be <I2C_SlaveReadData+0x140>
    38a6:	e6 e5       	ldi	r30, 0x56	; 86
    38a8:	f0 e0       	ldi	r31, 0x00	; 0
    38aa:	80 81       	ld	r24, Z
    38ac:	88 1f       	adc	r24, r24
    38ae:	88 27       	eor	r24, r24
    38b0:	88 1f       	adc	r24, r24
    38b2:	88 2f       	mov	r24, r24
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	bf ef       	ldi	r27, 0xFF	; 255
    38b8:	8f 3f       	cpi	r24, 0xFF	; 255
    38ba:	9b 07       	cpc	r25, r27
    38bc:	89 f6       	brne	.-94     	; 0x3860 <I2C_SlaveReadData+0xe2>

		/*Check on time out*/
		if(timeout2 == 0){
    38be:	8e 81       	ldd	r24, Y+6	; 0x06
    38c0:	9f 81       	ldd	r25, Y+7	; 0x07
    38c2:	a8 85       	ldd	r26, Y+8	; 0x08
    38c4:	b9 85       	ldd	r27, Y+9	; 0x09
    38c6:	00 97       	sbiw	r24, 0x00	; 0
    38c8:	a1 05       	cpc	r26, r1
    38ca:	b1 05       	cpc	r27, r1
    38cc:	11 f4       	brne	.+4      	; 0x38d2 <I2C_SlaveReadData+0x154>
			returneError = I2C_enumTimeOut;
    38ce:	83 e0       	ldi	r24, 0x03	; 3
    38d0:	89 83       	std	Y+1, r24	; 0x01
		}

		/*Check on the value of status of TWI*/
		if((TWSR & GET_STATUS_MSK)!=DATA_RECEIVED_SLA_PLUS_ACK_RETURNED){
    38d2:	e1 e2       	ldi	r30, 0x21	; 33
    38d4:	f0 e0       	ldi	r31, 0x00	; 0
    38d6:	80 81       	ld	r24, Z
    38d8:	88 2f       	mov	r24, r24
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	88 7f       	andi	r24, 0xF8	; 248
    38de:	90 70       	andi	r25, 0x00	; 0
    38e0:	80 38       	cpi	r24, 0x80	; 128
    38e2:	91 05       	cpc	r25, r1
    38e4:	11 f0       	breq	.+4      	; 0x38ea <I2C_SlaveReadData+0x16c>
			returneError = I2C_enumWrongInOperation;
    38e6:	82 e0       	ldi	r24, 0x02	; 2
    38e8:	89 83       	std	Y+1, r24	; 0x01
		}

		*data = TWDR;
    38ea:	e3 e2       	ldi	r30, 0x23	; 35
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	ea 85       	ldd	r30, Y+10	; 0x0a
    38f2:	fb 85       	ldd	r31, Y+11	; 0x0b
    38f4:	80 83       	st	Z, r24

	}
	return returneError;
    38f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    38f8:	65 96       	adiw	r28, 0x15	; 21
    38fa:	0f b6       	in	r0, 0x3f	; 63
    38fc:	f8 94       	cli
    38fe:	de bf       	out	0x3e, r29	; 62
    3900:	0f be       	out	0x3f, r0	; 63
    3902:	cd bf       	out	0x3d, r28	; 61
    3904:	cf 91       	pop	r28
    3906:	df 91       	pop	r29
    3908:	08 95       	ret

0000390a <I2C_SendRepeatedStart>:
I2C_enuErrorStatus I2C_SendRepeatedStart(void){
    390a:	df 93       	push	r29
    390c:	cf 93       	push	r28
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	2a 97       	sbiw	r28, 0x0a	; 10
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	cd bf       	out	0x3d, r28	; 61

	/*******************Validation Part*************************/
	I2C_enuErrorStatus returneError =I2C_enumOk;
    391e:	19 82       	std	Y+1, r1	; 0x01

	/*******************Implementation Part*************************/

	volatile u32 timeout =50000;
    3920:	80 e5       	ldi	r24, 0x50	; 80
    3922:	93 ec       	ldi	r25, 0xC3	; 195
    3924:	a0 e0       	ldi	r26, 0x00	; 0
    3926:	b0 e0       	ldi	r27, 0x00	; 0
    3928:	8a 83       	std	Y+2, r24	; 0x02
    392a:	9b 83       	std	Y+3, r25	; 0x03
    392c:	ac 83       	std	Y+4, r26	; 0x04
    392e:	bd 83       	std	Y+5, r27	; 0x05

	/*Enable I2C, Clear Interrupt flag and Send Start Condition */
	TWCR =((ENABLE<<TWEN)|(ENABLE<<TWINT)|(ENABLE<<TWSTA));
    3930:	e6 e5       	ldi	r30, 0x56	; 86
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	84 ea       	ldi	r24, 0xA4	; 164
    3936:	80 83       	st	Z, r24

	/*Wait on the TWI Interrupt Flag*/
	while(timeout--&&~((TWCR>>TWINT)&1));
    3938:	8a 81       	ldd	r24, Y+2	; 0x02
    393a:	9b 81       	ldd	r25, Y+3	; 0x03
    393c:	ac 81       	ldd	r26, Y+4	; 0x04
    393e:	bd 81       	ldd	r27, Y+5	; 0x05
    3940:	8f 83       	std	Y+7, r24	; 0x07
    3942:	98 87       	std	Y+8, r25	; 0x08
    3944:	a9 87       	std	Y+9, r26	; 0x09
    3946:	ba 87       	std	Y+10, r27	; 0x0a
    3948:	1e 82       	std	Y+6, r1	; 0x06
    394a:	8f 81       	ldd	r24, Y+7	; 0x07
    394c:	98 85       	ldd	r25, Y+8	; 0x08
    394e:	a9 85       	ldd	r26, Y+9	; 0x09
    3950:	ba 85       	ldd	r27, Y+10	; 0x0a
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	a1 05       	cpc	r26, r1
    3956:	b1 05       	cpc	r27, r1
    3958:	11 f0       	breq	.+4      	; 0x395e <I2C_SendRepeatedStart+0x54>
    395a:	91 e0       	ldi	r25, 0x01	; 1
    395c:	9e 83       	std	Y+6, r25	; 0x06
    395e:	8f 81       	ldd	r24, Y+7	; 0x07
    3960:	98 85       	ldd	r25, Y+8	; 0x08
    3962:	a9 85       	ldd	r26, Y+9	; 0x09
    3964:	ba 85       	ldd	r27, Y+10	; 0x0a
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	a1 09       	sbc	r26, r1
    396a:	b1 09       	sbc	r27, r1
    396c:	8a 83       	std	Y+2, r24	; 0x02
    396e:	9b 83       	std	Y+3, r25	; 0x03
    3970:	ac 83       	std	Y+4, r26	; 0x04
    3972:	bd 83       	std	Y+5, r27	; 0x05
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	ae 81       	ldd	r26, Y+6	; 0x06
    3978:	8a 27       	eor	r24, r26
    397a:	88 23       	and	r24, r24
    397c:	61 f4       	brne	.+24     	; 0x3996 <I2C_SendRepeatedStart+0x8c>
    397e:	e6 e5       	ldi	r30, 0x56	; 86
    3980:	f0 e0       	ldi	r31, 0x00	; 0
    3982:	80 81       	ld	r24, Z
    3984:	88 1f       	adc	r24, r24
    3986:	88 27       	eor	r24, r24
    3988:	88 1f       	adc	r24, r24
    398a:	88 2f       	mov	r24, r24
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	bf ef       	ldi	r27, 0xFF	; 255
    3990:	8f 3f       	cpi	r24, 0xFF	; 255
    3992:	9b 07       	cpc	r25, r27
    3994:	89 f6       	brne	.-94     	; 0x3938 <I2C_SendRepeatedStart+0x2e>

	/*Check on time out*/
	if(timeout == 0){
    3996:	8a 81       	ldd	r24, Y+2	; 0x02
    3998:	9b 81       	ldd	r25, Y+3	; 0x03
    399a:	ac 81       	ldd	r26, Y+4	; 0x04
    399c:	bd 81       	ldd	r27, Y+5	; 0x05
    399e:	00 97       	sbiw	r24, 0x00	; 0
    39a0:	a1 05       	cpc	r26, r1
    39a2:	b1 05       	cpc	r27, r1
    39a4:	11 f4       	brne	.+4      	; 0x39aa <I2C_SendRepeatedStart+0xa0>
		returneError = I2C_enumTimeOut;
    39a6:	83 e0       	ldi	r24, 0x03	; 3
    39a8:	89 83       	std	Y+1, r24	; 0x01
	}

	/*Check on the value of status of TWI*/
	if((TWSR & GET_STATUS_MSK)!=REPEATED_START_COND_TRANSMITTED){
    39aa:	e1 e2       	ldi	r30, 0x21	; 33
    39ac:	f0 e0       	ldi	r31, 0x00	; 0
    39ae:	80 81       	ld	r24, Z
    39b0:	88 2f       	mov	r24, r24
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	88 7f       	andi	r24, 0xF8	; 248
    39b6:	90 70       	andi	r25, 0x00	; 0
    39b8:	80 31       	cpi	r24, 0x10	; 16
    39ba:	91 05       	cpc	r25, r1
    39bc:	11 f0       	breq	.+4      	; 0x39c2 <I2C_SendRepeatedStart+0xb8>
		returneError = I2C_enumWrongInOperation;
    39be:	82 e0       	ldi	r24, 0x02	; 2
    39c0:	89 83       	std	Y+1, r24	; 0x01
	}
	return returneError;
    39c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    39c4:	2a 96       	adiw	r28, 0x0a	; 10
    39c6:	0f b6       	in	r0, 0x3f	; 63
    39c8:	f8 94       	cli
    39ca:	de bf       	out	0x3e, r29	; 62
    39cc:	0f be       	out	0x3f, r0	; 63
    39ce:	cd bf       	out	0x3d, r28	; 61
    39d0:	cf 91       	pop	r28
    39d2:	df 91       	pop	r29
    39d4:	08 95       	ret

000039d6 <I2C_MasterReadDataWithACK>:

I2C_enuErrorStatus I2C_MasterReadDataWithACK(u8* data){
    39d6:	df 93       	push	r29
    39d8:	cf 93       	push	r28
    39da:	cd b7       	in	r28, 0x3d	; 61
    39dc:	de b7       	in	r29, 0x3e	; 62
    39de:	2c 97       	sbiw	r28, 0x0c	; 12
    39e0:	0f b6       	in	r0, 0x3f	; 63
    39e2:	f8 94       	cli
    39e4:	de bf       	out	0x3e, r29	; 62
    39e6:	0f be       	out	0x3f, r0	; 63
    39e8:	cd bf       	out	0x3d, r28	; 61
    39ea:	9f 83       	std	Y+7, r25	; 0x07
    39ec:	8e 83       	std	Y+6, r24	; 0x06
	/*******************Validation Part*************************/
	I2C_enuErrorStatus returneError =I2C_enumOk;
    39ee:	19 82       	std	Y+1, r1	; 0x01

	/*Check on the data pointer value*/
	if(data == NULL){
    39f0:	8e 81       	ldd	r24, Y+6	; 0x06
    39f2:	9f 81       	ldd	r25, Y+7	; 0x07
    39f4:	00 97       	sbiw	r24, 0x00	; 0
    39f6:	19 f4       	brne	.+6      	; 0x39fe <I2C_MasterReadDataWithACK+0x28>
		returneError =I2C_enumNULLPointer;
    39f8:	86 e0       	ldi	r24, 0x06	; 6
    39fa:	89 83       	std	Y+1, r24	; 0x01
    39fc:	57 c0       	rjmp	.+174    	; 0x3aac <I2C_MasterReadDataWithACK+0xd6>
	}else{
		/*******************Implementation Part*************************/

		volatile u32 timeout =50000;
    39fe:	80 e5       	ldi	r24, 0x50	; 80
    3a00:	93 ec       	ldi	r25, 0xC3	; 195
    3a02:	a0 e0       	ldi	r26, 0x00	; 0
    3a04:	b0 e0       	ldi	r27, 0x00	; 0
    3a06:	8a 83       	std	Y+2, r24	; 0x02
    3a08:	9b 83       	std	Y+3, r25	; 0x03
    3a0a:	ac 83       	std	Y+4, r26	; 0x04
    3a0c:	bd 83       	std	Y+5, r27	; 0x05

		/*First, Receive Slave Address*/

		/*Clear Interrupt flag, enable TWI and ACK*/
		TWCR =(ENABLE<<TWINT)|(ENABLE<<TWEN)|(ENABLE<<TWEA);
    3a0e:	e6 e5       	ldi	r30, 0x56	; 86
    3a10:	f0 e0       	ldi	r31, 0x00	; 0
    3a12:	84 ec       	ldi	r24, 0xC4	; 196
    3a14:	80 83       	st	Z, r24

		/*Wait on the TWI Interrupt Flag*/
		while(timeout--&&~((TWCR>>TWINT)&1));
    3a16:	8a 81       	ldd	r24, Y+2	; 0x02
    3a18:	9b 81       	ldd	r25, Y+3	; 0x03
    3a1a:	ac 81       	ldd	r26, Y+4	; 0x04
    3a1c:	bd 81       	ldd	r27, Y+5	; 0x05
    3a1e:	89 87       	std	Y+9, r24	; 0x09
    3a20:	9a 87       	std	Y+10, r25	; 0x0a
    3a22:	ab 87       	std	Y+11, r26	; 0x0b
    3a24:	bc 87       	std	Y+12, r27	; 0x0c
    3a26:	18 86       	std	Y+8, r1	; 0x08
    3a28:	89 85       	ldd	r24, Y+9	; 0x09
    3a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2c:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a2e:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a30:	00 97       	sbiw	r24, 0x00	; 0
    3a32:	a1 05       	cpc	r26, r1
    3a34:	b1 05       	cpc	r27, r1
    3a36:	11 f0       	breq	.+4      	; 0x3a3c <I2C_MasterReadDataWithACK+0x66>
    3a38:	91 e0       	ldi	r25, 0x01	; 1
    3a3a:	98 87       	std	Y+8, r25	; 0x08
    3a3c:	89 85       	ldd	r24, Y+9	; 0x09
    3a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a40:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a42:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a44:	01 97       	sbiw	r24, 0x01	; 1
    3a46:	a1 09       	sbc	r26, r1
    3a48:	b1 09       	sbc	r27, r1
    3a4a:	8a 83       	std	Y+2, r24	; 0x02
    3a4c:	9b 83       	std	Y+3, r25	; 0x03
    3a4e:	ac 83       	std	Y+4, r26	; 0x04
    3a50:	bd 83       	std	Y+5, r27	; 0x05
    3a52:	81 e0       	ldi	r24, 0x01	; 1
    3a54:	a8 85       	ldd	r26, Y+8	; 0x08
    3a56:	8a 27       	eor	r24, r26
    3a58:	88 23       	and	r24, r24
    3a5a:	61 f4       	brne	.+24     	; 0x3a74 <I2C_MasterReadDataWithACK+0x9e>
    3a5c:	e6 e5       	ldi	r30, 0x56	; 86
    3a5e:	f0 e0       	ldi	r31, 0x00	; 0
    3a60:	80 81       	ld	r24, Z
    3a62:	88 1f       	adc	r24, r24
    3a64:	88 27       	eor	r24, r24
    3a66:	88 1f       	adc	r24, r24
    3a68:	88 2f       	mov	r24, r24
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	bf ef       	ldi	r27, 0xFF	; 255
    3a6e:	8f 3f       	cpi	r24, 0xFF	; 255
    3a70:	9b 07       	cpc	r25, r27
    3a72:	89 f6       	brne	.-94     	; 0x3a16 <I2C_MasterReadDataWithACK+0x40>

		/*Check on time out*/
		if(timeout == 0){
    3a74:	8a 81       	ldd	r24, Y+2	; 0x02
    3a76:	9b 81       	ldd	r25, Y+3	; 0x03
    3a78:	ac 81       	ldd	r26, Y+4	; 0x04
    3a7a:	bd 81       	ldd	r27, Y+5	; 0x05
    3a7c:	00 97       	sbiw	r24, 0x00	; 0
    3a7e:	a1 05       	cpc	r26, r1
    3a80:	b1 05       	cpc	r27, r1
    3a82:	11 f4       	brne	.+4      	; 0x3a88 <I2C_MasterReadDataWithACK+0xb2>
			returneError = I2C_enumTimeOut;
    3a84:	83 e0       	ldi	r24, 0x03	; 3
    3a86:	89 83       	std	Y+1, r24	; 0x01
		}


		/*Check on the value of status of TWI*/
		if((TWSR & GET_STATUS_MSK)!=RX_DATA_TRANSMITTED_PLUS_ACK_RECEIVED){
    3a88:	e1 e2       	ldi	r30, 0x21	; 33
    3a8a:	f0 e0       	ldi	r31, 0x00	; 0
    3a8c:	80 81       	ld	r24, Z
    3a8e:	88 2f       	mov	r24, r24
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	88 7f       	andi	r24, 0xF8	; 248
    3a94:	90 70       	andi	r25, 0x00	; 0
    3a96:	80 35       	cpi	r24, 0x50	; 80
    3a98:	91 05       	cpc	r25, r1
    3a9a:	11 f0       	breq	.+4      	; 0x3aa0 <I2C_MasterReadDataWithACK+0xca>
			returneError = I2C_enumWrongInOperation;
    3a9c:	82 e0       	ldi	r24, 0x02	; 2
    3a9e:	89 83       	std	Y+1, r24	; 0x01
		}

		*data = TWDR;
    3aa0:	e3 e2       	ldi	r30, 0x23	; 35
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	80 81       	ld	r24, Z
    3aa6:	ee 81       	ldd	r30, Y+6	; 0x06
    3aa8:	ff 81       	ldd	r31, Y+7	; 0x07
    3aaa:	80 83       	st	Z, r24

	}
	return returneError;
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
}
    3aae:	2c 96       	adiw	r28, 0x0c	; 12
    3ab0:	0f b6       	in	r0, 0x3f	; 63
    3ab2:	f8 94       	cli
    3ab4:	de bf       	out	0x3e, r29	; 62
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	cd bf       	out	0x3d, r28	; 61
    3aba:	cf 91       	pop	r28
    3abc:	df 91       	pop	r29
    3abe:	08 95       	ret

00003ac0 <I2C_MasterReadDataWithNACK>:
I2C_enuErrorStatus I2C_MasterReadDataWithNACK(u8* data){
    3ac0:	df 93       	push	r29
    3ac2:	cf 93       	push	r28
    3ac4:	cd b7       	in	r28, 0x3d	; 61
    3ac6:	de b7       	in	r29, 0x3e	; 62
    3ac8:	2c 97       	sbiw	r28, 0x0c	; 12
    3aca:	0f b6       	in	r0, 0x3f	; 63
    3acc:	f8 94       	cli
    3ace:	de bf       	out	0x3e, r29	; 62
    3ad0:	0f be       	out	0x3f, r0	; 63
    3ad2:	cd bf       	out	0x3d, r28	; 61
    3ad4:	9f 83       	std	Y+7, r25	; 0x07
    3ad6:	8e 83       	std	Y+6, r24	; 0x06

	/*******************Validation Part*************************/
	I2C_enuErrorStatus returneError =I2C_enumOk;
    3ad8:	19 82       	std	Y+1, r1	; 0x01

	/*Check on the data pointer value*/
	if(data == NULL){
    3ada:	8e 81       	ldd	r24, Y+6	; 0x06
    3adc:	9f 81       	ldd	r25, Y+7	; 0x07
    3ade:	00 97       	sbiw	r24, 0x00	; 0
    3ae0:	19 f4       	brne	.+6      	; 0x3ae8 <I2C_MasterReadDataWithNACK+0x28>
		returneError =I2C_enumNULLPointer;
    3ae2:	86 e0       	ldi	r24, 0x06	; 6
    3ae4:	89 83       	std	Y+1, r24	; 0x01
    3ae6:	57 c0       	rjmp	.+174    	; 0x3b96 <I2C_MasterReadDataWithNACK+0xd6>
	}else{
		/*******************Implementation Part*************************/

		volatile u32 timeout =50000;
    3ae8:	80 e5       	ldi	r24, 0x50	; 80
    3aea:	93 ec       	ldi	r25, 0xC3	; 195
    3aec:	a0 e0       	ldi	r26, 0x00	; 0
    3aee:	b0 e0       	ldi	r27, 0x00	; 0
    3af0:	8a 83       	std	Y+2, r24	; 0x02
    3af2:	9b 83       	std	Y+3, r25	; 0x03
    3af4:	ac 83       	std	Y+4, r26	; 0x04
    3af6:	bd 83       	std	Y+5, r27	; 0x05

		/*First, Receive Slave Address*/

		/*Clear Interrupt flag and enable TWI*/
		TWCR =(ENABLE<<TWINT)|(ENABLE<<TWEN);
    3af8:	e6 e5       	ldi	r30, 0x56	; 86
    3afa:	f0 e0       	ldi	r31, 0x00	; 0
    3afc:	84 e8       	ldi	r24, 0x84	; 132
    3afe:	80 83       	st	Z, r24

		/*Wait on the TWI Interrupt Flag*/
		while(timeout--&&~((TWCR>>TWINT)&1));
    3b00:	8a 81       	ldd	r24, Y+2	; 0x02
    3b02:	9b 81       	ldd	r25, Y+3	; 0x03
    3b04:	ac 81       	ldd	r26, Y+4	; 0x04
    3b06:	bd 81       	ldd	r27, Y+5	; 0x05
    3b08:	89 87       	std	Y+9, r24	; 0x09
    3b0a:	9a 87       	std	Y+10, r25	; 0x0a
    3b0c:	ab 87       	std	Y+11, r26	; 0x0b
    3b0e:	bc 87       	std	Y+12, r27	; 0x0c
    3b10:	18 86       	std	Y+8, r1	; 0x08
    3b12:	89 85       	ldd	r24, Y+9	; 0x09
    3b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b16:	ab 85       	ldd	r26, Y+11	; 0x0b
    3b18:	bc 85       	ldd	r27, Y+12	; 0x0c
    3b1a:	00 97       	sbiw	r24, 0x00	; 0
    3b1c:	a1 05       	cpc	r26, r1
    3b1e:	b1 05       	cpc	r27, r1
    3b20:	11 f0       	breq	.+4      	; 0x3b26 <I2C_MasterReadDataWithNACK+0x66>
    3b22:	91 e0       	ldi	r25, 0x01	; 1
    3b24:	98 87       	std	Y+8, r25	; 0x08
    3b26:	89 85       	ldd	r24, Y+9	; 0x09
    3b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b2a:	ab 85       	ldd	r26, Y+11	; 0x0b
    3b2c:	bc 85       	ldd	r27, Y+12	; 0x0c
    3b2e:	01 97       	sbiw	r24, 0x01	; 1
    3b30:	a1 09       	sbc	r26, r1
    3b32:	b1 09       	sbc	r27, r1
    3b34:	8a 83       	std	Y+2, r24	; 0x02
    3b36:	9b 83       	std	Y+3, r25	; 0x03
    3b38:	ac 83       	std	Y+4, r26	; 0x04
    3b3a:	bd 83       	std	Y+5, r27	; 0x05
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	a8 85       	ldd	r26, Y+8	; 0x08
    3b40:	8a 27       	eor	r24, r26
    3b42:	88 23       	and	r24, r24
    3b44:	61 f4       	brne	.+24     	; 0x3b5e <I2C_MasterReadDataWithNACK+0x9e>
    3b46:	e6 e5       	ldi	r30, 0x56	; 86
    3b48:	f0 e0       	ldi	r31, 0x00	; 0
    3b4a:	80 81       	ld	r24, Z
    3b4c:	88 1f       	adc	r24, r24
    3b4e:	88 27       	eor	r24, r24
    3b50:	88 1f       	adc	r24, r24
    3b52:	88 2f       	mov	r24, r24
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	bf ef       	ldi	r27, 0xFF	; 255
    3b58:	8f 3f       	cpi	r24, 0xFF	; 255
    3b5a:	9b 07       	cpc	r25, r27
    3b5c:	89 f6       	brne	.-94     	; 0x3b00 <I2C_MasterReadDataWithNACK+0x40>

		/*Check on time out*/
		if(timeout == 0){
    3b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b60:	9b 81       	ldd	r25, Y+3	; 0x03
    3b62:	ac 81       	ldd	r26, Y+4	; 0x04
    3b64:	bd 81       	ldd	r27, Y+5	; 0x05
    3b66:	00 97       	sbiw	r24, 0x00	; 0
    3b68:	a1 05       	cpc	r26, r1
    3b6a:	b1 05       	cpc	r27, r1
    3b6c:	11 f4       	brne	.+4      	; 0x3b72 <I2C_MasterReadDataWithNACK+0xb2>
			returneError = I2C_enumTimeOut;
    3b6e:	83 e0       	ldi	r24, 0x03	; 3
    3b70:	89 83       	std	Y+1, r24	; 0x01
		}


		/*Check on the value of status of TWI*/
		if((TWSR & GET_STATUS_MSK)!=RX_DATA_TRANSMITTED_PLUS_NACK_RECEIVED){
    3b72:	e1 e2       	ldi	r30, 0x21	; 33
    3b74:	f0 e0       	ldi	r31, 0x00	; 0
    3b76:	80 81       	ld	r24, Z
    3b78:	88 2f       	mov	r24, r24
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	88 7f       	andi	r24, 0xF8	; 248
    3b7e:	90 70       	andi	r25, 0x00	; 0
    3b80:	88 35       	cpi	r24, 0x58	; 88
    3b82:	91 05       	cpc	r25, r1
    3b84:	11 f0       	breq	.+4      	; 0x3b8a <I2C_MasterReadDataWithNACK+0xca>
			returneError = I2C_enumWrongInOperation;
    3b86:	82 e0       	ldi	r24, 0x02	; 2
    3b88:	89 83       	std	Y+1, r24	; 0x01
		}

		*data = TWDR;
    3b8a:	e3 e2       	ldi	r30, 0x23	; 35
    3b8c:	f0 e0       	ldi	r31, 0x00	; 0
    3b8e:	80 81       	ld	r24, Z
    3b90:	ee 81       	ldd	r30, Y+6	; 0x06
    3b92:	ff 81       	ldd	r31, Y+7	; 0x07
    3b94:	80 83       	st	Z, r24

	}
	return returneError;
    3b96:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b98:	2c 96       	adiw	r28, 0x0c	; 12
    3b9a:	0f b6       	in	r0, 0x3f	; 63
    3b9c:	f8 94       	cli
    3b9e:	de bf       	out	0x3e, r29	; 62
    3ba0:	0f be       	out	0x3f, r0	; 63
    3ba2:	cd bf       	out	0x3d, r28	; 61
    3ba4:	cf 91       	pop	r28
    3ba6:	df 91       	pop	r29
    3ba8:	08 95       	ret

00003baa <EXT_INT_enumInit>:
/*
*@brief  : Function to initialize all Interrupts
*@param  : void
*@return : void
*/
void EXT_INT_enumInit(void){
    3baa:	df 93       	push	r29
    3bac:	cf 93       	push	r28
    3bae:	00 d0       	rcall	.+0      	; 0x3bb0 <EXT_INT_enumInit+0x6>
    3bb0:	cd b7       	in	r28, 0x3d	; 61
    3bb2:	de b7       	in	r29, 0x3e	; 62
	
	/*Set Global Enable --> I bit*/
	SET_BIT(SREG,I_BIT);
    3bb4:	af e5       	ldi	r26, 0x5F	; 95
    3bb6:	b0 e0       	ldi	r27, 0x00	; 0
    3bb8:	ef e5       	ldi	r30, 0x5F	; 95
    3bba:	f0 e0       	ldi	r31, 0x00	; 0
    3bbc:	80 81       	ld	r24, Z
    3bbe:	80 68       	ori	r24, 0x80	; 128
    3bc0:	8c 93       	st	X, r24
	
	/*Set Peripheral Interrupt Enables*/
	/*For Interrupt 0*/
    #if(EXT_INT0_MODE == ENABLE)
		SET_BIT(GICR,INT0);
    3bc2:	ab e5       	ldi	r26, 0x5B	; 91
    3bc4:	b0 e0       	ldi	r27, 0x00	; 0
    3bc6:	eb e5       	ldi	r30, 0x5B	; 91
    3bc8:	f0 e0       	ldi	r31, 0x00	; 0
    3bca:	80 81       	ld	r24, Z
    3bcc:	80 64       	ori	r24, 0x40	; 64
    3bce:	8c 93       	st	X, r24
		CLR_BIT(GICR,INT0);
	#endif	
	
	/*For Interrupt 1*/
	#if(EXT_INT1_MODE == ENABLE)
		SET_BIT(GICR,INT1);
    3bd0:	ab e5       	ldi	r26, 0x5B	; 91
    3bd2:	b0 e0       	ldi	r27, 0x00	; 0
    3bd4:	eb e5       	ldi	r30, 0x5B	; 91
    3bd6:	f0 e0       	ldi	r31, 0x00	; 0
    3bd8:	80 81       	ld	r24, Z
    3bda:	80 68       	ori	r24, 0x80	; 128
    3bdc:	8c 93       	st	X, r24
		CLR_BIT(GICR,INT1);
	#endif
	
	/*For Interrupt 2*/
	#if(EXT_INT2_MODE == ENABLE)
		SET_BIT(GICR,INT2);
    3bde:	ab e5       	ldi	r26, 0x5B	; 91
    3be0:	b0 e0       	ldi	r27, 0x00	; 0
    3be2:	eb e5       	ldi	r30, 0x5B	; 91
    3be4:	f0 e0       	ldi	r31, 0x00	; 0
    3be6:	80 81       	ld	r24, Z
    3be8:	80 62       	ori	r24, 0x20	; 32
    3bea:	8c 93       	st	X, r24
	3- Clear the specific bits in the variable
	4- Insert new configuration 
	5- Reassign the new variable in the register
	*/
	/*For Interrupt 0*/
	u8 Loc_u8RegValueINT0 = MCUCR ;
    3bec:	e5 e5       	ldi	r30, 0x55	; 85
    3bee:	f0 e0       	ldi	r31, 0x00	; 0
    3bf0:	80 81       	ld	r24, Z
    3bf2:	8a 83       	std	Y+2, r24	; 0x02
	Loc_u8RegValueINT0   &= MCUCR_INT0_MASK ;
    3bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf6:	8c 7f       	andi	r24, 0xFC	; 252
    3bf8:	8a 83       	std	Y+2, r24	; 0x02
	Loc_u8RegValueINT0   |= INT0_SENSE_MODE;
    3bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    3bfc:	82 60       	ori	r24, 0x02	; 2
    3bfe:	8a 83       	std	Y+2, r24	; 0x02
	MCUCR = Loc_u8RegValueINT0;
    3c00:	e5 e5       	ldi	r30, 0x55	; 85
    3c02:	f0 e0       	ldi	r31, 0x00	; 0
    3c04:	8a 81       	ldd	r24, Y+2	; 0x02
    3c06:	80 83       	st	Z, r24
	
	/*For Interrupt 1*/
	u8 Loc_u8RegValueINT1 = MCUCR ;
    3c08:	e5 e5       	ldi	r30, 0x55	; 85
    3c0a:	f0 e0       	ldi	r31, 0x00	; 0
    3c0c:	80 81       	ld	r24, Z
    3c0e:	89 83       	std	Y+1, r24	; 0x01
	Loc_u8RegValueINT1   &= MCUCR_INT1_MASK ;
    3c10:	89 81       	ldd	r24, Y+1	; 0x01
    3c12:	83 7f       	andi	r24, 0xF3	; 243
    3c14:	89 83       	std	Y+1, r24	; 0x01
	Loc_u8RegValueINT1   |= INT1_SENSE_MODE;
    3c16:	89 81       	ldd	r24, Y+1	; 0x01
    3c18:	83 60       	ori	r24, 0x03	; 3
    3c1a:	89 83       	std	Y+1, r24	; 0x01
		
	/*For Interrupt 2*/
	#if (INT2_SENSE_MODE == INT2_RISING_EDGE_TRIG)
		SET_BIT(MCUCSR,ISC2);
    3c1c:	a4 e5       	ldi	r26, 0x54	; 84
    3c1e:	b0 e0       	ldi	r27, 0x00	; 0
    3c20:	e4 e5       	ldi	r30, 0x54	; 84
    3c22:	f0 e0       	ldi	r31, 0x00	; 0
    3c24:	80 81       	ld	r24, Z
    3c26:	80 64       	ori	r24, 0x40	; 64
    3c28:	8c 93       	st	X, r24
	#else
	    CLR_BIT(MCUCSR,ISC2);
	#endif	
	
}
    3c2a:	0f 90       	pop	r0
    3c2c:	0f 90       	pop	r0
    3c2e:	cf 91       	pop	r28
    3c30:	df 91       	pop	r29
    3c32:	08 95       	ret

00003c34 <setcallback_INT0>:
/*
*@brief  : Function to set the application function to ISR
*@param  : pointer to function
*@return : void
*/
void setcallback_INT0(void (*cpf)(void)){
    3c34:	df 93       	push	r29
    3c36:	cf 93       	push	r28
    3c38:	00 d0       	rcall	.+0      	; 0x3c3a <setcallback_INT0+0x6>
    3c3a:	cd b7       	in	r28, 0x3d	; 61
    3c3c:	de b7       	in	r29, 0x3e	; 62
    3c3e:	9a 83       	std	Y+2, r25	; 0x02
    3c40:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_ISR = cpf;
    3c42:	89 81       	ldd	r24, Y+1	; 0x01
    3c44:	9a 81       	ldd	r25, Y+2	; 0x02
    3c46:	90 93 e7 01 	sts	0x01E7, r25
    3c4a:	80 93 e6 01 	sts	0x01E6, r24
}
    3c4e:	0f 90       	pop	r0
    3c50:	0f 90       	pop	r0
    3c52:	cf 91       	pop	r28
    3c54:	df 91       	pop	r29
    3c56:	08 95       	ret

00003c58 <setcallback_INT1>:
void setcallback_INT1(void (*cpf)(void)){
    3c58:	df 93       	push	r29
    3c5a:	cf 93       	push	r28
    3c5c:	00 d0       	rcall	.+0      	; 0x3c5e <setcallback_INT1+0x6>
    3c5e:	cd b7       	in	r28, 0x3d	; 61
    3c60:	de b7       	in	r29, 0x3e	; 62
    3c62:	9a 83       	std	Y+2, r25	; 0x02
    3c64:	89 83       	std	Y+1, r24	; 0x01
	EXTI1_ISR = cpf;
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6a:	90 93 e9 01 	sts	0x01E9, r25
    3c6e:	80 93 e8 01 	sts	0x01E8, r24
}
    3c72:	0f 90       	pop	r0
    3c74:	0f 90       	pop	r0
    3c76:	cf 91       	pop	r28
    3c78:	df 91       	pop	r29
    3c7a:	08 95       	ret

00003c7c <setcallback_INT2>:
void setcallback_INT2(void (*cpf)(void)){
    3c7c:	df 93       	push	r29
    3c7e:	cf 93       	push	r28
    3c80:	00 d0       	rcall	.+0      	; 0x3c82 <setcallback_INT2+0x6>
    3c82:	cd b7       	in	r28, 0x3d	; 61
    3c84:	de b7       	in	r29, 0x3e	; 62
    3c86:	9a 83       	std	Y+2, r25	; 0x02
    3c88:	89 83       	std	Y+1, r24	; 0x01
	EXTI2_ISR = cpf;
    3c8a:	89 81       	ldd	r24, Y+1	; 0x01
    3c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c8e:	90 93 eb 01 	sts	0x01EB, r25
    3c92:	80 93 ea 01 	sts	0x01EA, r24
}
    3c96:	0f 90       	pop	r0
    3c98:	0f 90       	pop	r0
    3c9a:	cf 91       	pop	r28
    3c9c:	df 91       	pop	r29
    3c9e:	08 95       	ret

00003ca0 <__vector_1>:
*/

/*For INT 0*/

void __vector_1(void) __attribute__((signal));
void __vector_1(void){
    3ca0:	1f 92       	push	r1
    3ca2:	0f 92       	push	r0
    3ca4:	0f b6       	in	r0, 0x3f	; 63
    3ca6:	0f 92       	push	r0
    3ca8:	11 24       	eor	r1, r1
    3caa:	2f 93       	push	r18
    3cac:	3f 93       	push	r19
    3cae:	4f 93       	push	r20
    3cb0:	5f 93       	push	r21
    3cb2:	6f 93       	push	r22
    3cb4:	7f 93       	push	r23
    3cb6:	8f 93       	push	r24
    3cb8:	9f 93       	push	r25
    3cba:	af 93       	push	r26
    3cbc:	bf 93       	push	r27
    3cbe:	ef 93       	push	r30
    3cc0:	ff 93       	push	r31
    3cc2:	df 93       	push	r29
    3cc4:	cf 93       	push	r28
    3cc6:	cd b7       	in	r28, 0x3d	; 61
    3cc8:	de b7       	in	r29, 0x3e	; 62
	/*Check if the pointer is assigned by a function from APP layer or still holds a NULL value*/
	if(EXTI0_ISR != NULL){
    3cca:	80 91 e6 01 	lds	r24, 0x01E6
    3cce:	90 91 e7 01 	lds	r25, 0x01E7
    3cd2:	00 97       	sbiw	r24, 0x00	; 0
    3cd4:	29 f0       	breq	.+10     	; 0x3ce0 <__vector_1+0x40>
		EXTI0_ISR();
    3cd6:	e0 91 e6 01 	lds	r30, 0x01E6
    3cda:	f0 91 e7 01 	lds	r31, 0x01E7
    3cde:	09 95       	icall
	}
} 
    3ce0:	cf 91       	pop	r28
    3ce2:	df 91       	pop	r29
    3ce4:	ff 91       	pop	r31
    3ce6:	ef 91       	pop	r30
    3ce8:	bf 91       	pop	r27
    3cea:	af 91       	pop	r26
    3cec:	9f 91       	pop	r25
    3cee:	8f 91       	pop	r24
    3cf0:	7f 91       	pop	r23
    3cf2:	6f 91       	pop	r22
    3cf4:	5f 91       	pop	r21
    3cf6:	4f 91       	pop	r20
    3cf8:	3f 91       	pop	r19
    3cfa:	2f 91       	pop	r18
    3cfc:	0f 90       	pop	r0
    3cfe:	0f be       	out	0x3f, r0	; 63
    3d00:	0f 90       	pop	r0
    3d02:	1f 90       	pop	r1
    3d04:	18 95       	reti

00003d06 <__vector_2>:

/*For INT 1*/
void __vector_2(void) __attribute__((signal));
void __vector_2(void) {
    3d06:	1f 92       	push	r1
    3d08:	0f 92       	push	r0
    3d0a:	0f b6       	in	r0, 0x3f	; 63
    3d0c:	0f 92       	push	r0
    3d0e:	11 24       	eor	r1, r1
    3d10:	2f 93       	push	r18
    3d12:	3f 93       	push	r19
    3d14:	4f 93       	push	r20
    3d16:	5f 93       	push	r21
    3d18:	6f 93       	push	r22
    3d1a:	7f 93       	push	r23
    3d1c:	8f 93       	push	r24
    3d1e:	9f 93       	push	r25
    3d20:	af 93       	push	r26
    3d22:	bf 93       	push	r27
    3d24:	ef 93       	push	r30
    3d26:	ff 93       	push	r31
    3d28:	df 93       	push	r29
    3d2a:	cf 93       	push	r28
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
	
	/*Check if the pointer is assigned by a function from APP layer or still holds a NULL value*/
	if (EXTI1_ISR != NULL){
    3d30:	80 91 e8 01 	lds	r24, 0x01E8
    3d34:	90 91 e9 01 	lds	r25, 0x01E9
    3d38:	00 97       	sbiw	r24, 0x00	; 0
    3d3a:	29 f0       	breq	.+10     	; 0x3d46 <__vector_2+0x40>
		EXTI1_ISR();
    3d3c:	e0 91 e8 01 	lds	r30, 0x01E8
    3d40:	f0 91 e9 01 	lds	r31, 0x01E9
    3d44:	09 95       	icall
	}
}
    3d46:	cf 91       	pop	r28
    3d48:	df 91       	pop	r29
    3d4a:	ff 91       	pop	r31
    3d4c:	ef 91       	pop	r30
    3d4e:	bf 91       	pop	r27
    3d50:	af 91       	pop	r26
    3d52:	9f 91       	pop	r25
    3d54:	8f 91       	pop	r24
    3d56:	7f 91       	pop	r23
    3d58:	6f 91       	pop	r22
    3d5a:	5f 91       	pop	r21
    3d5c:	4f 91       	pop	r20
    3d5e:	3f 91       	pop	r19
    3d60:	2f 91       	pop	r18
    3d62:	0f 90       	pop	r0
    3d64:	0f be       	out	0x3f, r0	; 63
    3d66:	0f 90       	pop	r0
    3d68:	1f 90       	pop	r1
    3d6a:	18 95       	reti

00003d6c <__vector_3>:

/*For INT 2*/
void __vector_3(void) __attribute__((signal));
void __vector_3(void){
    3d6c:	1f 92       	push	r1
    3d6e:	0f 92       	push	r0
    3d70:	0f b6       	in	r0, 0x3f	; 63
    3d72:	0f 92       	push	r0
    3d74:	11 24       	eor	r1, r1
    3d76:	2f 93       	push	r18
    3d78:	3f 93       	push	r19
    3d7a:	4f 93       	push	r20
    3d7c:	5f 93       	push	r21
    3d7e:	6f 93       	push	r22
    3d80:	7f 93       	push	r23
    3d82:	8f 93       	push	r24
    3d84:	9f 93       	push	r25
    3d86:	af 93       	push	r26
    3d88:	bf 93       	push	r27
    3d8a:	ef 93       	push	r30
    3d8c:	ff 93       	push	r31
    3d8e:	df 93       	push	r29
    3d90:	cf 93       	push	r28
    3d92:	cd b7       	in	r28, 0x3d	; 61
    3d94:	de b7       	in	r29, 0x3e	; 62
	
	/*Check if the pointer is assigned by a function from APP layer or still holds a NULL value*/
	if (EXTI2_ISR != NULL){
    3d96:	80 91 ea 01 	lds	r24, 0x01EA
    3d9a:	90 91 eb 01 	lds	r25, 0x01EB
    3d9e:	00 97       	sbiw	r24, 0x00	; 0
    3da0:	29 f0       	breq	.+10     	; 0x3dac <__vector_3+0x40>
		EXTI2_ISR();
    3da2:	e0 91 ea 01 	lds	r30, 0x01EA
    3da6:	f0 91 eb 01 	lds	r31, 0x01EB
    3daa:	09 95       	icall
	}
    3dac:	cf 91       	pop	r28
    3dae:	df 91       	pop	r29
    3db0:	ff 91       	pop	r31
    3db2:	ef 91       	pop	r30
    3db4:	bf 91       	pop	r27
    3db6:	af 91       	pop	r26
    3db8:	9f 91       	pop	r25
    3dba:	8f 91       	pop	r24
    3dbc:	7f 91       	pop	r23
    3dbe:	6f 91       	pop	r22
    3dc0:	5f 91       	pop	r21
    3dc2:	4f 91       	pop	r20
    3dc4:	3f 91       	pop	r19
    3dc6:	2f 91       	pop	r18
    3dc8:	0f 90       	pop	r0
    3dca:	0f be       	out	0x3f, r0	; 63
    3dcc:	0f 90       	pop	r0
    3dce:	1f 90       	pop	r1
    3dd0:	18 95       	reti

00003dd2 <DIO_enumSetPinConfig>:
/**
 *@brief  : Function to Configure the Pins to be INPUT pin or OUTPUT pin.
 *@param  : Port Number,Pin Number,Configuration type(Input/Output).
 *@return : Error State                                               
 */	
DIO_enumError_t DIO_enumSetPinConfig(DIO_enumPorts_t Copy_enumPortNum,DIO_enumPins_t Copy_enumPinNum,DIO_enumConfig_t Copy_enumConfig){
    3dd2:	df 93       	push	r29
    3dd4:	cf 93       	push	r28
    3dd6:	cd b7       	in	r28, 0x3d	; 61
    3dd8:	de b7       	in	r29, 0x3e	; 62
    3dda:	2e 97       	sbiw	r28, 0x0e	; 14
    3ddc:	0f b6       	in	r0, 0x3f	; 63
    3dde:	f8 94       	cli
    3de0:	de bf       	out	0x3e, r29	; 62
    3de2:	0f be       	out	0x3f, r0	; 63
    3de4:	cd bf       	out	0x3d, r28	; 61
    3de6:	8a 83       	std	Y+2, r24	; 0x02
    3de8:	6b 83       	std	Y+3, r22	; 0x03
    3dea:	4c 83       	std	Y+4, r20	; 0x04
	DIO_enumError_t Ret_enumErrorStatus = DIO_enumNOk;
    3dec:	81 e0       	ldi	r24, 0x01	; 1
    3dee:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_enumPortNum>DIO_enumPortD)
    3df0:	8a 81       	ldd	r24, Y+2	; 0x02
    3df2:	84 30       	cpi	r24, 0x04	; 4
    3df4:	18 f0       	brcs	.+6      	; 0x3dfc <DIO_enumSetPinConfig+0x2a>
	{
		Ret_enumErrorStatus = DIO_enumWrongPort;
    3df6:	83 e0       	ldi	r24, 0x03	; 3
    3df8:	89 83       	std	Y+1, r24	; 0x01
    3dfa:	26 c3       	rjmp	.+1612   	; 0x4448 <DIO_enumSetPinConfig+0x676>
	}
	else if(Copy_enumPinNum>DIO_enumPin7)
    3dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfe:	88 30       	cpi	r24, 0x08	; 8
    3e00:	18 f0       	brcs	.+6      	; 0x3e08 <DIO_enumSetPinConfig+0x36>
	{
		Ret_enumErrorStatus = DIO_enumWrongPin;
    3e02:	84 e0       	ldi	r24, 0x04	; 4
    3e04:	89 83       	std	Y+1, r24	; 0x01
    3e06:	20 c3       	rjmp	.+1600   	; 0x4448 <DIO_enumSetPinConfig+0x676>
	}
	else if(Copy_enumConfig>DIO_enumInputExternalPD)
    3e08:	8c 81       	ldd	r24, Y+4	; 0x04
    3e0a:	84 30       	cpi	r24, 0x04	; 4
    3e0c:	18 f0       	brcs	.+6      	; 0x3e14 <DIO_enumSetPinConfig+0x42>
	{
		Ret_enumErrorStatus = DIO_enumWrongConfig;
    3e0e:	85 e0       	ldi	r24, 0x05	; 5
    3e10:	89 83       	std	Y+1, r24	; 0x01
    3e12:	1a c3       	rjmp	.+1588   	; 0x4448 <DIO_enumSetPinConfig+0x676>
	}
	else
	{
		Ret_enumErrorStatus = DIO_enumOk;
    3e14:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_enumPortNum)
    3e16:	8a 81       	ldd	r24, Y+2	; 0x02
    3e18:	28 2f       	mov	r18, r24
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	3e 87       	std	Y+14, r19	; 0x0e
    3e1e:	2d 87       	std	Y+13, r18	; 0x0d
    3e20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e24:	81 30       	cpi	r24, 0x01	; 1
    3e26:	91 05       	cpc	r25, r1
    3e28:	09 f4       	brne	.+2      	; 0x3e2c <DIO_enumSetPinConfig+0x5a>
    3e2a:	d5 c0       	rjmp	.+426    	; 0x3fd6 <DIO_enumSetPinConfig+0x204>
    3e2c:	2d 85       	ldd	r18, Y+13	; 0x0d
    3e2e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3e30:	22 30       	cpi	r18, 0x02	; 2
    3e32:	31 05       	cpc	r19, r1
    3e34:	2c f4       	brge	.+10     	; 0x3e40 <DIO_enumSetPinConfig+0x6e>
    3e36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e3a:	00 97       	sbiw	r24, 0x00	; 0
    3e3c:	71 f0       	breq	.+28     	; 0x3e5a <DIO_enumSetPinConfig+0x88>
    3e3e:	04 c3       	rjmp	.+1544   	; 0x4448 <DIO_enumSetPinConfig+0x676>
    3e40:	2d 85       	ldd	r18, Y+13	; 0x0d
    3e42:	3e 85       	ldd	r19, Y+14	; 0x0e
    3e44:	22 30       	cpi	r18, 0x02	; 2
    3e46:	31 05       	cpc	r19, r1
    3e48:	09 f4       	brne	.+2      	; 0x3e4c <DIO_enumSetPinConfig+0x7a>
    3e4a:	83 c1       	rjmp	.+774    	; 0x4152 <DIO_enumSetPinConfig+0x380>
    3e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e50:	83 30       	cpi	r24, 0x03	; 3
    3e52:	91 05       	cpc	r25, r1
    3e54:	09 f4       	brne	.+2      	; 0x3e58 <DIO_enumSetPinConfig+0x86>
    3e56:	3b c2       	rjmp	.+1142   	; 0x42ce <DIO_enumSetPinConfig+0x4fc>
    3e58:	f7 c2       	rjmp	.+1518   	; 0x4448 <DIO_enumSetPinConfig+0x676>
		{
			case DIO_enumPortA:
			switch(Copy_enumConfig)
    3e5a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e5c:	28 2f       	mov	r18, r24
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
    3e60:	3c 87       	std	Y+12, r19	; 0x0c
    3e62:	2b 87       	std	Y+11, r18	; 0x0b
    3e64:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e66:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e68:	81 30       	cpi	r24, 0x01	; 1
    3e6a:	91 05       	cpc	r25, r1
    3e6c:	09 f4       	brne	.+2      	; 0x3e70 <DIO_enumSetPinConfig+0x9e>
    3e6e:	3e c0       	rjmp	.+124    	; 0x3eec <DIO_enumSetPinConfig+0x11a>
    3e70:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e72:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e74:	22 30       	cpi	r18, 0x02	; 2
    3e76:	31 05       	cpc	r19, r1
    3e78:	2c f4       	brge	.+10     	; 0x3e84 <DIO_enumSetPinConfig+0xb2>
    3e7a:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e7c:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e7e:	00 97       	sbiw	r24, 0x00	; 0
    3e80:	71 f0       	breq	.+28     	; 0x3e9e <DIO_enumSetPinConfig+0xcc>
    3e82:	e2 c2       	rjmp	.+1476   	; 0x4448 <DIO_enumSetPinConfig+0x676>
    3e84:	2b 85       	ldd	r18, Y+11	; 0x0b
    3e86:	3c 85       	ldd	r19, Y+12	; 0x0c
    3e88:	22 30       	cpi	r18, 0x02	; 2
    3e8a:	31 05       	cpc	r19, r1
    3e8c:	09 f4       	brne	.+2      	; 0x3e90 <DIO_enumSetPinConfig+0xbe>
    3e8e:	54 c0       	rjmp	.+168    	; 0x3f38 <DIO_enumSetPinConfig+0x166>
    3e90:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e92:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e94:	83 30       	cpi	r24, 0x03	; 3
    3e96:	91 05       	cpc	r25, r1
    3e98:	09 f4       	brne	.+2      	; 0x3e9c <DIO_enumSetPinConfig+0xca>
    3e9a:	75 c0       	rjmp	.+234    	; 0x3f86 <DIO_enumSetPinConfig+0x1b4>
    3e9c:	d5 c2       	rjmp	.+1450   	; 0x4448 <DIO_enumSetPinConfig+0x676>
			{
				case DIO_enumOutputLOW:
				SET_BIT(DDRA,Copy_enumPinNum);
    3e9e:	aa e3       	ldi	r26, 0x3A	; 58
    3ea0:	b0 e0       	ldi	r27, 0x00	; 0
    3ea2:	ea e3       	ldi	r30, 0x3A	; 58
    3ea4:	f0 e0       	ldi	r31, 0x00	; 0
    3ea6:	80 81       	ld	r24, Z
    3ea8:	48 2f       	mov	r20, r24
    3eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    3eac:	28 2f       	mov	r18, r24
    3eae:	30 e0       	ldi	r19, 0x00	; 0
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	90 e0       	ldi	r25, 0x00	; 0
    3eb4:	02 c0       	rjmp	.+4      	; 0x3eba <DIO_enumSetPinConfig+0xe8>
    3eb6:	88 0f       	add	r24, r24
    3eb8:	99 1f       	adc	r25, r25
    3eba:	2a 95       	dec	r18
    3ebc:	e2 f7       	brpl	.-8      	; 0x3eb6 <DIO_enumSetPinConfig+0xe4>
    3ebe:	84 2b       	or	r24, r20
    3ec0:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Copy_enumPinNum);
    3ec2:	ab e3       	ldi	r26, 0x3B	; 59
    3ec4:	b0 e0       	ldi	r27, 0x00	; 0
    3ec6:	eb e3       	ldi	r30, 0x3B	; 59
    3ec8:	f0 e0       	ldi	r31, 0x00	; 0
    3eca:	80 81       	ld	r24, Z
    3ecc:	48 2f       	mov	r20, r24
    3ece:	8b 81       	ldd	r24, Y+3	; 0x03
    3ed0:	28 2f       	mov	r18, r24
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	02 2e       	mov	r0, r18
    3eda:	02 c0       	rjmp	.+4      	; 0x3ee0 <DIO_enumSetPinConfig+0x10e>
    3edc:	88 0f       	add	r24, r24
    3ede:	99 1f       	adc	r25, r25
    3ee0:	0a 94       	dec	r0
    3ee2:	e2 f7       	brpl	.-8      	; 0x3edc <DIO_enumSetPinConfig+0x10a>
    3ee4:	80 95       	com	r24
    3ee6:	84 23       	and	r24, r20
    3ee8:	8c 93       	st	X, r24
    3eea:	ae c2       	rjmp	.+1372   	; 0x4448 <DIO_enumSetPinConfig+0x676>
				break;
				case DIO_enumOutputHIGH:
				SET_BIT(DDRA,Copy_enumPinNum);
    3eec:	aa e3       	ldi	r26, 0x3A	; 58
    3eee:	b0 e0       	ldi	r27, 0x00	; 0
    3ef0:	ea e3       	ldi	r30, 0x3A	; 58
    3ef2:	f0 e0       	ldi	r31, 0x00	; 0
    3ef4:	80 81       	ld	r24, Z
    3ef6:	48 2f       	mov	r20, r24
    3ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    3efa:	28 2f       	mov	r18, r24
    3efc:	30 e0       	ldi	r19, 0x00	; 0
    3efe:	81 e0       	ldi	r24, 0x01	; 1
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	02 c0       	rjmp	.+4      	; 0x3f08 <DIO_enumSetPinConfig+0x136>
    3f04:	88 0f       	add	r24, r24
    3f06:	99 1f       	adc	r25, r25
    3f08:	2a 95       	dec	r18
    3f0a:	e2 f7       	brpl	.-8      	; 0x3f04 <DIO_enumSetPinConfig+0x132>
    3f0c:	84 2b       	or	r24, r20
    3f0e:	8c 93       	st	X, r24
				SET_BIT(PORTA,Copy_enumPinNum);
    3f10:	ab e3       	ldi	r26, 0x3B	; 59
    3f12:	b0 e0       	ldi	r27, 0x00	; 0
    3f14:	eb e3       	ldi	r30, 0x3B	; 59
    3f16:	f0 e0       	ldi	r31, 0x00	; 0
    3f18:	80 81       	ld	r24, Z
    3f1a:	48 2f       	mov	r20, r24
    3f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f1e:	28 2f       	mov	r18, r24
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	81 e0       	ldi	r24, 0x01	; 1
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	02 2e       	mov	r0, r18
    3f28:	02 c0       	rjmp	.+4      	; 0x3f2e <DIO_enumSetPinConfig+0x15c>
    3f2a:	88 0f       	add	r24, r24
    3f2c:	99 1f       	adc	r25, r25
    3f2e:	0a 94       	dec	r0
    3f30:	e2 f7       	brpl	.-8      	; 0x3f2a <DIO_enumSetPinConfig+0x158>
    3f32:	84 2b       	or	r24, r20
    3f34:	8c 93       	st	X, r24
    3f36:	88 c2       	rjmp	.+1296   	; 0x4448 <DIO_enumSetPinConfig+0x676>
				break;
				case DIO_enumInputInternalPU:
				CLR_BIT(DDRA,Copy_enumPinNum);
    3f38:	aa e3       	ldi	r26, 0x3A	; 58
    3f3a:	b0 e0       	ldi	r27, 0x00	; 0
    3f3c:	ea e3       	ldi	r30, 0x3A	; 58
    3f3e:	f0 e0       	ldi	r31, 0x00	; 0
    3f40:	80 81       	ld	r24, Z
    3f42:	48 2f       	mov	r20, r24
    3f44:	8b 81       	ldd	r24, Y+3	; 0x03
    3f46:	28 2f       	mov	r18, r24
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	02 c0       	rjmp	.+4      	; 0x3f54 <DIO_enumSetPinConfig+0x182>
    3f50:	88 0f       	add	r24, r24
    3f52:	99 1f       	adc	r25, r25
    3f54:	2a 95       	dec	r18
    3f56:	e2 f7       	brpl	.-8      	; 0x3f50 <DIO_enumSetPinConfig+0x17e>
    3f58:	80 95       	com	r24
    3f5a:	84 23       	and	r24, r20
    3f5c:	8c 93       	st	X, r24
				SET_BIT(PORTA,Copy_enumPinNum);
    3f5e:	ab e3       	ldi	r26, 0x3B	; 59
    3f60:	b0 e0       	ldi	r27, 0x00	; 0
    3f62:	eb e3       	ldi	r30, 0x3B	; 59
    3f64:	f0 e0       	ldi	r31, 0x00	; 0
    3f66:	80 81       	ld	r24, Z
    3f68:	48 2f       	mov	r20, r24
    3f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6c:	28 2f       	mov	r18, r24
    3f6e:	30 e0       	ldi	r19, 0x00	; 0
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	02 2e       	mov	r0, r18
    3f76:	02 c0       	rjmp	.+4      	; 0x3f7c <DIO_enumSetPinConfig+0x1aa>
    3f78:	88 0f       	add	r24, r24
    3f7a:	99 1f       	adc	r25, r25
    3f7c:	0a 94       	dec	r0
    3f7e:	e2 f7       	brpl	.-8      	; 0x3f78 <DIO_enumSetPinConfig+0x1a6>
    3f80:	84 2b       	or	r24, r20
    3f82:	8c 93       	st	X, r24
    3f84:	61 c2       	rjmp	.+1218   	; 0x4448 <DIO_enumSetPinConfig+0x676>
				break;
				case DIO_enumInputExternalPD:
				CLR_BIT(DDRA,Copy_enumPinNum);
    3f86:	aa e3       	ldi	r26, 0x3A	; 58
    3f88:	b0 e0       	ldi	r27, 0x00	; 0
    3f8a:	ea e3       	ldi	r30, 0x3A	; 58
    3f8c:	f0 e0       	ldi	r31, 0x00	; 0
    3f8e:	80 81       	ld	r24, Z
    3f90:	48 2f       	mov	r20, r24
    3f92:	8b 81       	ldd	r24, Y+3	; 0x03
    3f94:	28 2f       	mov	r18, r24
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	81 e0       	ldi	r24, 0x01	; 1
    3f9a:	90 e0       	ldi	r25, 0x00	; 0
    3f9c:	02 c0       	rjmp	.+4      	; 0x3fa2 <DIO_enumSetPinConfig+0x1d0>
    3f9e:	88 0f       	add	r24, r24
    3fa0:	99 1f       	adc	r25, r25
    3fa2:	2a 95       	dec	r18
    3fa4:	e2 f7       	brpl	.-8      	; 0x3f9e <DIO_enumSetPinConfig+0x1cc>
    3fa6:	80 95       	com	r24
    3fa8:	84 23       	and	r24, r20
    3faa:	8c 93       	st	X, r24
				CLR_BIT(PORTA,Copy_enumPinNum);
    3fac:	ab e3       	ldi	r26, 0x3B	; 59
    3fae:	b0 e0       	ldi	r27, 0x00	; 0
    3fb0:	eb e3       	ldi	r30, 0x3B	; 59
    3fb2:	f0 e0       	ldi	r31, 0x00	; 0
    3fb4:	80 81       	ld	r24, Z
    3fb6:	48 2f       	mov	r20, r24
    3fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3fba:	28 2f       	mov	r18, r24
    3fbc:	30 e0       	ldi	r19, 0x00	; 0
    3fbe:	81 e0       	ldi	r24, 0x01	; 1
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	02 2e       	mov	r0, r18
    3fc4:	02 c0       	rjmp	.+4      	; 0x3fca <DIO_enumSetPinConfig+0x1f8>
    3fc6:	88 0f       	add	r24, r24
    3fc8:	99 1f       	adc	r25, r25
    3fca:	0a 94       	dec	r0
    3fcc:	e2 f7       	brpl	.-8      	; 0x3fc6 <DIO_enumSetPinConfig+0x1f4>
    3fce:	80 95       	com	r24
    3fd0:	84 23       	and	r24, r20
    3fd2:	8c 93       	st	X, r24
    3fd4:	39 c2       	rjmp	.+1138   	; 0x4448 <DIO_enumSetPinConfig+0x676>
				break;
			}
			break;

			case DIO_enumPortB:
			switch(Copy_enumConfig)
    3fd6:	8c 81       	ldd	r24, Y+4	; 0x04
    3fd8:	28 2f       	mov	r18, r24
    3fda:	30 e0       	ldi	r19, 0x00	; 0
    3fdc:	3a 87       	std	Y+10, r19	; 0x0a
    3fde:	29 87       	std	Y+9, r18	; 0x09
    3fe0:	89 85       	ldd	r24, Y+9	; 0x09
    3fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe4:	81 30       	cpi	r24, 0x01	; 1
    3fe6:	91 05       	cpc	r25, r1
    3fe8:	09 f4       	brne	.+2      	; 0x3fec <DIO_enumSetPinConfig+0x21a>
    3fea:	3e c0       	rjmp	.+124    	; 0x4068 <DIO_enumSetPinConfig+0x296>
    3fec:	29 85       	ldd	r18, Y+9	; 0x09
    3fee:	3a 85       	ldd	r19, Y+10	; 0x0a
    3ff0:	22 30       	cpi	r18, 0x02	; 2
    3ff2:	31 05       	cpc	r19, r1
    3ff4:	2c f4       	brge	.+10     	; 0x4000 <DIO_enumSetPinConfig+0x22e>
    3ff6:	89 85       	ldd	r24, Y+9	; 0x09
    3ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ffa:	00 97       	sbiw	r24, 0x00	; 0
    3ffc:	71 f0       	breq	.+28     	; 0x401a <DIO_enumSetPinConfig+0x248>
    3ffe:	24 c2       	rjmp	.+1096   	; 0x4448 <DIO_enumSetPinConfig+0x676>
    4000:	29 85       	ldd	r18, Y+9	; 0x09
    4002:	3a 85       	ldd	r19, Y+10	; 0x0a
    4004:	22 30       	cpi	r18, 0x02	; 2
    4006:	31 05       	cpc	r19, r1
    4008:	09 f4       	brne	.+2      	; 0x400c <DIO_enumSetPinConfig+0x23a>
    400a:	54 c0       	rjmp	.+168    	; 0x40b4 <DIO_enumSetPinConfig+0x2e2>
    400c:	89 85       	ldd	r24, Y+9	; 0x09
    400e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4010:	83 30       	cpi	r24, 0x03	; 3
    4012:	91 05       	cpc	r25, r1
    4014:	09 f4       	brne	.+2      	; 0x4018 <DIO_enumSetPinConfig+0x246>
    4016:	75 c0       	rjmp	.+234    	; 0x4102 <DIO_enumSetPinConfig+0x330>
    4018:	17 c2       	rjmp	.+1070   	; 0x4448 <DIO_enumSetPinConfig+0x676>
			{
				case DIO_enumOutputLOW:
				SET_BIT(DDRB,Copy_enumPinNum);
    401a:	a7 e3       	ldi	r26, 0x37	; 55
    401c:	b0 e0       	ldi	r27, 0x00	; 0
    401e:	e7 e3       	ldi	r30, 0x37	; 55
    4020:	f0 e0       	ldi	r31, 0x00	; 0
    4022:	80 81       	ld	r24, Z
    4024:	48 2f       	mov	r20, r24
    4026:	8b 81       	ldd	r24, Y+3	; 0x03
    4028:	28 2f       	mov	r18, r24
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	02 c0       	rjmp	.+4      	; 0x4036 <DIO_enumSetPinConfig+0x264>
    4032:	88 0f       	add	r24, r24
    4034:	99 1f       	adc	r25, r25
    4036:	2a 95       	dec	r18
    4038:	e2 f7       	brpl	.-8      	; 0x4032 <DIO_enumSetPinConfig+0x260>
    403a:	84 2b       	or	r24, r20
    403c:	8c 93       	st	X, r24
				CLR_BIT(PORTB,Copy_enumPinNum);
    403e:	a8 e3       	ldi	r26, 0x38	; 56
    4040:	b0 e0       	ldi	r27, 0x00	; 0
    4042:	e8 e3       	ldi	r30, 0x38	; 56
    4044:	f0 e0       	ldi	r31, 0x00	; 0
    4046:	80 81       	ld	r24, Z
    4048:	48 2f       	mov	r20, r24
    404a:	8b 81       	ldd	r24, Y+3	; 0x03
    404c:	28 2f       	mov	r18, r24
    404e:	30 e0       	ldi	r19, 0x00	; 0
    4050:	81 e0       	ldi	r24, 0x01	; 1
    4052:	90 e0       	ldi	r25, 0x00	; 0
    4054:	02 2e       	mov	r0, r18
    4056:	02 c0       	rjmp	.+4      	; 0x405c <DIO_enumSetPinConfig+0x28a>
    4058:	88 0f       	add	r24, r24
    405a:	99 1f       	adc	r25, r25
    405c:	0a 94       	dec	r0
    405e:	e2 f7       	brpl	.-8      	; 0x4058 <DIO_enumSetPinConfig+0x286>
    4060:	80 95       	com	r24
    4062:	84 23       	and	r24, r20
    4064:	8c 93       	st	X, r24
    4066:	f0 c1       	rjmp	.+992    	; 0x4448 <DIO_enumSetPinConfig+0x676>
				break;
				case DIO_enumOutputHIGH:
				SET_BIT(DDRB,Copy_enumPinNum);
    4068:	a7 e3       	ldi	r26, 0x37	; 55
    406a:	b0 e0       	ldi	r27, 0x00	; 0
    406c:	e7 e3       	ldi	r30, 0x37	; 55
    406e:	f0 e0       	ldi	r31, 0x00	; 0
    4070:	80 81       	ld	r24, Z
    4072:	48 2f       	mov	r20, r24
    4074:	8b 81       	ldd	r24, Y+3	; 0x03
    4076:	28 2f       	mov	r18, r24
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	90 e0       	ldi	r25, 0x00	; 0
    407e:	02 c0       	rjmp	.+4      	; 0x4084 <DIO_enumSetPinConfig+0x2b2>
    4080:	88 0f       	add	r24, r24
    4082:	99 1f       	adc	r25, r25
    4084:	2a 95       	dec	r18
    4086:	e2 f7       	brpl	.-8      	; 0x4080 <DIO_enumSetPinConfig+0x2ae>
    4088:	84 2b       	or	r24, r20
    408a:	8c 93       	st	X, r24
				SET_BIT(PORTB,Copy_enumPinNum);
    408c:	a8 e3       	ldi	r26, 0x38	; 56
    408e:	b0 e0       	ldi	r27, 0x00	; 0
    4090:	e8 e3       	ldi	r30, 0x38	; 56
    4092:	f0 e0       	ldi	r31, 0x00	; 0
    4094:	80 81       	ld	r24, Z
    4096:	48 2f       	mov	r20, r24
    4098:	8b 81       	ldd	r24, Y+3	; 0x03
    409a:	28 2f       	mov	r18, r24
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	81 e0       	ldi	r24, 0x01	; 1
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	02 2e       	mov	r0, r18
    40a4:	02 c0       	rjmp	.+4      	; 0x40aa <DIO_enumSetPinConfig+0x2d8>
    40a6:	88 0f       	add	r24, r24
    40a8:	99 1f       	adc	r25, r25
    40aa:	0a 94       	dec	r0
    40ac:	e2 f7       	brpl	.-8      	; 0x40a6 <DIO_enumSetPinConfig+0x2d4>
    40ae:	84 2b       	or	r24, r20
    40b0:	8c 93       	st	X, r24
    40b2:	ca c1       	rjmp	.+916    	; 0x4448 <DIO_enumSetPinConfig+0x676>
				break;
				case DIO_enumInputInternalPU:
				CLR_BIT(DDRB,Copy_enumPinNum);
    40b4:	a7 e3       	ldi	r26, 0x37	; 55
    40b6:	b0 e0       	ldi	r27, 0x00	; 0
    40b8:	e7 e3       	ldi	r30, 0x37	; 55
    40ba:	f0 e0       	ldi	r31, 0x00	; 0
    40bc:	80 81       	ld	r24, Z
    40be:	48 2f       	mov	r20, r24
    40c0:	8b 81       	ldd	r24, Y+3	; 0x03
    40c2:	28 2f       	mov	r18, r24
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	02 c0       	rjmp	.+4      	; 0x40d0 <DIO_enumSetPinConfig+0x2fe>
    40cc:	88 0f       	add	r24, r24
    40ce:	99 1f       	adc	r25, r25
    40d0:	2a 95       	dec	r18
    40d2:	e2 f7       	brpl	.-8      	; 0x40cc <DIO_enumSetPinConfig+0x2fa>
    40d4:	80 95       	com	r24
    40d6:	84 23       	and	r24, r20
    40d8:	8c 93       	st	X, r24
				SET_BIT(PORTB,Copy_enumPinNum);
    40da:	a8 e3       	ldi	r26, 0x38	; 56
    40dc:	b0 e0       	ldi	r27, 0x00	; 0
    40de:	e8 e3       	ldi	r30, 0x38	; 56
    40e0:	f0 e0       	ldi	r31, 0x00	; 0
    40e2:	80 81       	ld	r24, Z
    40e4:	48 2f       	mov	r20, r24
    40e6:	8b 81       	ldd	r24, Y+3	; 0x03
    40e8:	28 2f       	mov	r18, r24
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	02 2e       	mov	r0, r18
    40f2:	02 c0       	rjmp	.+4      	; 0x40f8 <DIO_enumSetPinConfig+0x326>
    40f4:	88 0f       	add	r24, r24
    40f6:	99 1f       	adc	r25, r25
    40f8:	0a 94       	dec	r0
    40fa:	e2 f7       	brpl	.-8      	; 0x40f4 <DIO_enumSetPinConfig+0x322>
    40fc:	84 2b       	or	r24, r20
    40fe:	8c 93       	st	X, r24
    4100:	a3 c1       	rjmp	.+838    	; 0x4448 <DIO_enumSetPinConfig+0x676>
				break;
				case DIO_enumInputExternalPD:
				CLR_BIT(DDRB,Copy_enumPinNum);
    4102:	a7 e3       	ldi	r26, 0x37	; 55
    4104:	b0 e0       	ldi	r27, 0x00	; 0
    4106:	e7 e3       	ldi	r30, 0x37	; 55
    4108:	f0 e0       	ldi	r31, 0x00	; 0
    410a:	80 81       	ld	r24, Z
    410c:	48 2f       	mov	r20, r24
    410e:	8b 81       	ldd	r24, Y+3	; 0x03
    4110:	28 2f       	mov	r18, r24
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	81 e0       	ldi	r24, 0x01	; 1
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	02 c0       	rjmp	.+4      	; 0x411e <DIO_enumSetPinConfig+0x34c>
    411a:	88 0f       	add	r24, r24
    411c:	99 1f       	adc	r25, r25
    411e:	2a 95       	dec	r18
    4120:	e2 f7       	brpl	.-8      	; 0x411a <DIO_enumSetPinConfig+0x348>
    4122:	80 95       	com	r24
    4124:	84 23       	and	r24, r20
    4126:	8c 93       	st	X, r24
				CLR_BIT(PORTB,Copy_enumPinNum);
    4128:	a8 e3       	ldi	r26, 0x38	; 56
    412a:	b0 e0       	ldi	r27, 0x00	; 0
    412c:	e8 e3       	ldi	r30, 0x38	; 56
    412e:	f0 e0       	ldi	r31, 0x00	; 0
    4130:	80 81       	ld	r24, Z
    4132:	48 2f       	mov	r20, r24
    4134:	8b 81       	ldd	r24, Y+3	; 0x03
    4136:	28 2f       	mov	r18, r24
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	02 2e       	mov	r0, r18
    4140:	02 c0       	rjmp	.+4      	; 0x4146 <DIO_enumSetPinConfig+0x374>
    4142:	88 0f       	add	r24, r24
    4144:	99 1f       	adc	r25, r25
    4146:	0a 94       	dec	r0
    4148:	e2 f7       	brpl	.-8      	; 0x4142 <DIO_enumSetPinConfig+0x370>
    414a:	80 95       	com	r24
    414c:	84 23       	and	r24, r20
    414e:	8c 93       	st	X, r24
    4150:	7b c1       	rjmp	.+758    	; 0x4448 <DIO_enumSetPinConfig+0x676>
				break;
			}
			break;

			case DIO_enumPortC:
			switch(Copy_enumConfig)
    4152:	8c 81       	ldd	r24, Y+4	; 0x04
    4154:	28 2f       	mov	r18, r24
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	38 87       	std	Y+8, r19	; 0x08
    415a:	2f 83       	std	Y+7, r18	; 0x07
    415c:	8f 81       	ldd	r24, Y+7	; 0x07
    415e:	98 85       	ldd	r25, Y+8	; 0x08
    4160:	81 30       	cpi	r24, 0x01	; 1
    4162:	91 05       	cpc	r25, r1
    4164:	09 f4       	brne	.+2      	; 0x4168 <DIO_enumSetPinConfig+0x396>
    4166:	3e c0       	rjmp	.+124    	; 0x41e4 <DIO_enumSetPinConfig+0x412>
    4168:	2f 81       	ldd	r18, Y+7	; 0x07
    416a:	38 85       	ldd	r19, Y+8	; 0x08
    416c:	22 30       	cpi	r18, 0x02	; 2
    416e:	31 05       	cpc	r19, r1
    4170:	2c f4       	brge	.+10     	; 0x417c <DIO_enumSetPinConfig+0x3aa>
    4172:	8f 81       	ldd	r24, Y+7	; 0x07
    4174:	98 85       	ldd	r25, Y+8	; 0x08
    4176:	00 97       	sbiw	r24, 0x00	; 0
    4178:	71 f0       	breq	.+28     	; 0x4196 <DIO_enumSetPinConfig+0x3c4>
    417a:	66 c1       	rjmp	.+716    	; 0x4448 <DIO_enumSetPinConfig+0x676>
    417c:	2f 81       	ldd	r18, Y+7	; 0x07
    417e:	38 85       	ldd	r19, Y+8	; 0x08
    4180:	22 30       	cpi	r18, 0x02	; 2
    4182:	31 05       	cpc	r19, r1
    4184:	09 f4       	brne	.+2      	; 0x4188 <DIO_enumSetPinConfig+0x3b6>
    4186:	54 c0       	rjmp	.+168    	; 0x4230 <DIO_enumSetPinConfig+0x45e>
    4188:	8f 81       	ldd	r24, Y+7	; 0x07
    418a:	98 85       	ldd	r25, Y+8	; 0x08
    418c:	83 30       	cpi	r24, 0x03	; 3
    418e:	91 05       	cpc	r25, r1
    4190:	09 f4       	brne	.+2      	; 0x4194 <DIO_enumSetPinConfig+0x3c2>
    4192:	75 c0       	rjmp	.+234    	; 0x427e <DIO_enumSetPinConfig+0x4ac>
    4194:	59 c1       	rjmp	.+690    	; 0x4448 <DIO_enumSetPinConfig+0x676>
			{
				case DIO_enumOutputLOW:
				SET_BIT(DDRC,Copy_enumPinNum);
    4196:	a4 e3       	ldi	r26, 0x34	; 52
    4198:	b0 e0       	ldi	r27, 0x00	; 0
    419a:	e4 e3       	ldi	r30, 0x34	; 52
    419c:	f0 e0       	ldi	r31, 0x00	; 0
    419e:	80 81       	ld	r24, Z
    41a0:	48 2f       	mov	r20, r24
    41a2:	8b 81       	ldd	r24, Y+3	; 0x03
    41a4:	28 2f       	mov	r18, r24
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	81 e0       	ldi	r24, 0x01	; 1
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	02 c0       	rjmp	.+4      	; 0x41b2 <DIO_enumSetPinConfig+0x3e0>
    41ae:	88 0f       	add	r24, r24
    41b0:	99 1f       	adc	r25, r25
    41b2:	2a 95       	dec	r18
    41b4:	e2 f7       	brpl	.-8      	; 0x41ae <DIO_enumSetPinConfig+0x3dc>
    41b6:	84 2b       	or	r24, r20
    41b8:	8c 93       	st	X, r24
				CLR_BIT(PORTC,Copy_enumPinNum);
    41ba:	a5 e3       	ldi	r26, 0x35	; 53
    41bc:	b0 e0       	ldi	r27, 0x00	; 0
    41be:	e5 e3       	ldi	r30, 0x35	; 53
    41c0:	f0 e0       	ldi	r31, 0x00	; 0
    41c2:	80 81       	ld	r24, Z
    41c4:	48 2f       	mov	r20, r24
    41c6:	8b 81       	ldd	r24, Y+3	; 0x03
    41c8:	28 2f       	mov	r18, r24
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	02 2e       	mov	r0, r18
    41d2:	02 c0       	rjmp	.+4      	; 0x41d8 <DIO_enumSetPinConfig+0x406>
    41d4:	88 0f       	add	r24, r24
    41d6:	99 1f       	adc	r25, r25
    41d8:	0a 94       	dec	r0
    41da:	e2 f7       	brpl	.-8      	; 0x41d4 <DIO_enumSetPinConfig+0x402>
    41dc:	80 95       	com	r24
    41de:	84 23       	and	r24, r20
    41e0:	8c 93       	st	X, r24
    41e2:	32 c1       	rjmp	.+612    	; 0x4448 <DIO_enumSetPinConfig+0x676>
				break;
				case DIO_enumOutputHIGH:
				SET_BIT(DDRC,Copy_enumPinNum);
    41e4:	a4 e3       	ldi	r26, 0x34	; 52
    41e6:	b0 e0       	ldi	r27, 0x00	; 0
    41e8:	e4 e3       	ldi	r30, 0x34	; 52
    41ea:	f0 e0       	ldi	r31, 0x00	; 0
    41ec:	80 81       	ld	r24, Z
    41ee:	48 2f       	mov	r20, r24
    41f0:	8b 81       	ldd	r24, Y+3	; 0x03
    41f2:	28 2f       	mov	r18, r24
    41f4:	30 e0       	ldi	r19, 0x00	; 0
    41f6:	81 e0       	ldi	r24, 0x01	; 1
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	02 c0       	rjmp	.+4      	; 0x4200 <DIO_enumSetPinConfig+0x42e>
    41fc:	88 0f       	add	r24, r24
    41fe:	99 1f       	adc	r25, r25
    4200:	2a 95       	dec	r18
    4202:	e2 f7       	brpl	.-8      	; 0x41fc <DIO_enumSetPinConfig+0x42a>
    4204:	84 2b       	or	r24, r20
    4206:	8c 93       	st	X, r24
				SET_BIT(PORTC,Copy_enumPinNum);
    4208:	a5 e3       	ldi	r26, 0x35	; 53
    420a:	b0 e0       	ldi	r27, 0x00	; 0
    420c:	e5 e3       	ldi	r30, 0x35	; 53
    420e:	f0 e0       	ldi	r31, 0x00	; 0
    4210:	80 81       	ld	r24, Z
    4212:	48 2f       	mov	r20, r24
    4214:	8b 81       	ldd	r24, Y+3	; 0x03
    4216:	28 2f       	mov	r18, r24
    4218:	30 e0       	ldi	r19, 0x00	; 0
    421a:	81 e0       	ldi	r24, 0x01	; 1
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	02 2e       	mov	r0, r18
    4220:	02 c0       	rjmp	.+4      	; 0x4226 <DIO_enumSetPinConfig+0x454>
    4222:	88 0f       	add	r24, r24
    4224:	99 1f       	adc	r25, r25
    4226:	0a 94       	dec	r0
    4228:	e2 f7       	brpl	.-8      	; 0x4222 <DIO_enumSetPinConfig+0x450>
    422a:	84 2b       	or	r24, r20
    422c:	8c 93       	st	X, r24
    422e:	0c c1       	rjmp	.+536    	; 0x4448 <DIO_enumSetPinConfig+0x676>
				break;
				case DIO_enumInputInternalPU:
				CLR_BIT(DDRC,Copy_enumPinNum);
    4230:	a4 e3       	ldi	r26, 0x34	; 52
    4232:	b0 e0       	ldi	r27, 0x00	; 0
    4234:	e4 e3       	ldi	r30, 0x34	; 52
    4236:	f0 e0       	ldi	r31, 0x00	; 0
    4238:	80 81       	ld	r24, Z
    423a:	48 2f       	mov	r20, r24
    423c:	8b 81       	ldd	r24, Y+3	; 0x03
    423e:	28 2f       	mov	r18, r24
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	81 e0       	ldi	r24, 0x01	; 1
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	02 c0       	rjmp	.+4      	; 0x424c <DIO_enumSetPinConfig+0x47a>
    4248:	88 0f       	add	r24, r24
    424a:	99 1f       	adc	r25, r25
    424c:	2a 95       	dec	r18
    424e:	e2 f7       	brpl	.-8      	; 0x4248 <DIO_enumSetPinConfig+0x476>
    4250:	80 95       	com	r24
    4252:	84 23       	and	r24, r20
    4254:	8c 93       	st	X, r24
				SET_BIT(PORTC,Copy_enumPinNum);
    4256:	a5 e3       	ldi	r26, 0x35	; 53
    4258:	b0 e0       	ldi	r27, 0x00	; 0
    425a:	e5 e3       	ldi	r30, 0x35	; 53
    425c:	f0 e0       	ldi	r31, 0x00	; 0
    425e:	80 81       	ld	r24, Z
    4260:	48 2f       	mov	r20, r24
    4262:	8b 81       	ldd	r24, Y+3	; 0x03
    4264:	28 2f       	mov	r18, r24
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	81 e0       	ldi	r24, 0x01	; 1
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	02 2e       	mov	r0, r18
    426e:	02 c0       	rjmp	.+4      	; 0x4274 <DIO_enumSetPinConfig+0x4a2>
    4270:	88 0f       	add	r24, r24
    4272:	99 1f       	adc	r25, r25
    4274:	0a 94       	dec	r0
    4276:	e2 f7       	brpl	.-8      	; 0x4270 <DIO_enumSetPinConfig+0x49e>
    4278:	84 2b       	or	r24, r20
    427a:	8c 93       	st	X, r24
    427c:	e5 c0       	rjmp	.+458    	; 0x4448 <DIO_enumSetPinConfig+0x676>
				break;
				case DIO_enumInputExternalPD:
				CLR_BIT(DDRC,Copy_enumPinNum);
    427e:	a4 e3       	ldi	r26, 0x34	; 52
    4280:	b0 e0       	ldi	r27, 0x00	; 0
    4282:	e4 e3       	ldi	r30, 0x34	; 52
    4284:	f0 e0       	ldi	r31, 0x00	; 0
    4286:	80 81       	ld	r24, Z
    4288:	48 2f       	mov	r20, r24
    428a:	8b 81       	ldd	r24, Y+3	; 0x03
    428c:	28 2f       	mov	r18, r24
    428e:	30 e0       	ldi	r19, 0x00	; 0
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	02 c0       	rjmp	.+4      	; 0x429a <DIO_enumSetPinConfig+0x4c8>
    4296:	88 0f       	add	r24, r24
    4298:	99 1f       	adc	r25, r25
    429a:	2a 95       	dec	r18
    429c:	e2 f7       	brpl	.-8      	; 0x4296 <DIO_enumSetPinConfig+0x4c4>
    429e:	80 95       	com	r24
    42a0:	84 23       	and	r24, r20
    42a2:	8c 93       	st	X, r24
				CLR_BIT(PORTC,Copy_enumPinNum);
    42a4:	a5 e3       	ldi	r26, 0x35	; 53
    42a6:	b0 e0       	ldi	r27, 0x00	; 0
    42a8:	e5 e3       	ldi	r30, 0x35	; 53
    42aa:	f0 e0       	ldi	r31, 0x00	; 0
    42ac:	80 81       	ld	r24, Z
    42ae:	48 2f       	mov	r20, r24
    42b0:	8b 81       	ldd	r24, Y+3	; 0x03
    42b2:	28 2f       	mov	r18, r24
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	81 e0       	ldi	r24, 0x01	; 1
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	02 2e       	mov	r0, r18
    42bc:	02 c0       	rjmp	.+4      	; 0x42c2 <DIO_enumSetPinConfig+0x4f0>
    42be:	88 0f       	add	r24, r24
    42c0:	99 1f       	adc	r25, r25
    42c2:	0a 94       	dec	r0
    42c4:	e2 f7       	brpl	.-8      	; 0x42be <DIO_enumSetPinConfig+0x4ec>
    42c6:	80 95       	com	r24
    42c8:	84 23       	and	r24, r20
    42ca:	8c 93       	st	X, r24
    42cc:	bd c0       	rjmp	.+378    	; 0x4448 <DIO_enumSetPinConfig+0x676>
				break;
			}
			break;

			case DIO_enumPortD:
			switch(Copy_enumConfig)
    42ce:	8c 81       	ldd	r24, Y+4	; 0x04
    42d0:	28 2f       	mov	r18, r24
    42d2:	30 e0       	ldi	r19, 0x00	; 0
    42d4:	3e 83       	std	Y+6, r19	; 0x06
    42d6:	2d 83       	std	Y+5, r18	; 0x05
    42d8:	8d 81       	ldd	r24, Y+5	; 0x05
    42da:	9e 81       	ldd	r25, Y+6	; 0x06
    42dc:	81 30       	cpi	r24, 0x01	; 1
    42de:	91 05       	cpc	r25, r1
    42e0:	09 f4       	brne	.+2      	; 0x42e4 <DIO_enumSetPinConfig+0x512>
    42e2:	3e c0       	rjmp	.+124    	; 0x4360 <DIO_enumSetPinConfig+0x58e>
    42e4:	2d 81       	ldd	r18, Y+5	; 0x05
    42e6:	3e 81       	ldd	r19, Y+6	; 0x06
    42e8:	22 30       	cpi	r18, 0x02	; 2
    42ea:	31 05       	cpc	r19, r1
    42ec:	2c f4       	brge	.+10     	; 0x42f8 <DIO_enumSetPinConfig+0x526>
    42ee:	8d 81       	ldd	r24, Y+5	; 0x05
    42f0:	9e 81       	ldd	r25, Y+6	; 0x06
    42f2:	00 97       	sbiw	r24, 0x00	; 0
    42f4:	71 f0       	breq	.+28     	; 0x4312 <DIO_enumSetPinConfig+0x540>
    42f6:	a8 c0       	rjmp	.+336    	; 0x4448 <DIO_enumSetPinConfig+0x676>
    42f8:	2d 81       	ldd	r18, Y+5	; 0x05
    42fa:	3e 81       	ldd	r19, Y+6	; 0x06
    42fc:	22 30       	cpi	r18, 0x02	; 2
    42fe:	31 05       	cpc	r19, r1
    4300:	09 f4       	brne	.+2      	; 0x4304 <DIO_enumSetPinConfig+0x532>
    4302:	54 c0       	rjmp	.+168    	; 0x43ac <DIO_enumSetPinConfig+0x5da>
    4304:	8d 81       	ldd	r24, Y+5	; 0x05
    4306:	9e 81       	ldd	r25, Y+6	; 0x06
    4308:	83 30       	cpi	r24, 0x03	; 3
    430a:	91 05       	cpc	r25, r1
    430c:	09 f4       	brne	.+2      	; 0x4310 <DIO_enumSetPinConfig+0x53e>
    430e:	75 c0       	rjmp	.+234    	; 0x43fa <DIO_enumSetPinConfig+0x628>
    4310:	9b c0       	rjmp	.+310    	; 0x4448 <DIO_enumSetPinConfig+0x676>
			{
				case DIO_enumOutputLOW:
				SET_BIT(DDRD,Copy_enumPinNum);
    4312:	a1 e3       	ldi	r26, 0x31	; 49
    4314:	b0 e0       	ldi	r27, 0x00	; 0
    4316:	e1 e3       	ldi	r30, 0x31	; 49
    4318:	f0 e0       	ldi	r31, 0x00	; 0
    431a:	80 81       	ld	r24, Z
    431c:	48 2f       	mov	r20, r24
    431e:	8b 81       	ldd	r24, Y+3	; 0x03
    4320:	28 2f       	mov	r18, r24
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	81 e0       	ldi	r24, 0x01	; 1
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	02 c0       	rjmp	.+4      	; 0x432e <DIO_enumSetPinConfig+0x55c>
    432a:	88 0f       	add	r24, r24
    432c:	99 1f       	adc	r25, r25
    432e:	2a 95       	dec	r18
    4330:	e2 f7       	brpl	.-8      	; 0x432a <DIO_enumSetPinConfig+0x558>
    4332:	84 2b       	or	r24, r20
    4334:	8c 93       	st	X, r24
				CLR_BIT(PORTD,Copy_enumPinNum);
    4336:	a2 e3       	ldi	r26, 0x32	; 50
    4338:	b0 e0       	ldi	r27, 0x00	; 0
    433a:	e2 e3       	ldi	r30, 0x32	; 50
    433c:	f0 e0       	ldi	r31, 0x00	; 0
    433e:	80 81       	ld	r24, Z
    4340:	48 2f       	mov	r20, r24
    4342:	8b 81       	ldd	r24, Y+3	; 0x03
    4344:	28 2f       	mov	r18, r24
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	81 e0       	ldi	r24, 0x01	; 1
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	02 2e       	mov	r0, r18
    434e:	02 c0       	rjmp	.+4      	; 0x4354 <DIO_enumSetPinConfig+0x582>
    4350:	88 0f       	add	r24, r24
    4352:	99 1f       	adc	r25, r25
    4354:	0a 94       	dec	r0
    4356:	e2 f7       	brpl	.-8      	; 0x4350 <DIO_enumSetPinConfig+0x57e>
    4358:	80 95       	com	r24
    435a:	84 23       	and	r24, r20
    435c:	8c 93       	st	X, r24
    435e:	74 c0       	rjmp	.+232    	; 0x4448 <DIO_enumSetPinConfig+0x676>
				break;
				case DIO_enumOutputHIGH:
				SET_BIT(DDRD,Copy_enumPinNum);
    4360:	a1 e3       	ldi	r26, 0x31	; 49
    4362:	b0 e0       	ldi	r27, 0x00	; 0
    4364:	e1 e3       	ldi	r30, 0x31	; 49
    4366:	f0 e0       	ldi	r31, 0x00	; 0
    4368:	80 81       	ld	r24, Z
    436a:	48 2f       	mov	r20, r24
    436c:	8b 81       	ldd	r24, Y+3	; 0x03
    436e:	28 2f       	mov	r18, r24
    4370:	30 e0       	ldi	r19, 0x00	; 0
    4372:	81 e0       	ldi	r24, 0x01	; 1
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	02 c0       	rjmp	.+4      	; 0x437c <DIO_enumSetPinConfig+0x5aa>
    4378:	88 0f       	add	r24, r24
    437a:	99 1f       	adc	r25, r25
    437c:	2a 95       	dec	r18
    437e:	e2 f7       	brpl	.-8      	; 0x4378 <DIO_enumSetPinConfig+0x5a6>
    4380:	84 2b       	or	r24, r20
    4382:	8c 93       	st	X, r24
				SET_BIT(PORTD,Copy_enumPinNum);
    4384:	a2 e3       	ldi	r26, 0x32	; 50
    4386:	b0 e0       	ldi	r27, 0x00	; 0
    4388:	e2 e3       	ldi	r30, 0x32	; 50
    438a:	f0 e0       	ldi	r31, 0x00	; 0
    438c:	80 81       	ld	r24, Z
    438e:	48 2f       	mov	r20, r24
    4390:	8b 81       	ldd	r24, Y+3	; 0x03
    4392:	28 2f       	mov	r18, r24
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	81 e0       	ldi	r24, 0x01	; 1
    4398:	90 e0       	ldi	r25, 0x00	; 0
    439a:	02 2e       	mov	r0, r18
    439c:	02 c0       	rjmp	.+4      	; 0x43a2 <DIO_enumSetPinConfig+0x5d0>
    439e:	88 0f       	add	r24, r24
    43a0:	99 1f       	adc	r25, r25
    43a2:	0a 94       	dec	r0
    43a4:	e2 f7       	brpl	.-8      	; 0x439e <DIO_enumSetPinConfig+0x5cc>
    43a6:	84 2b       	or	r24, r20
    43a8:	8c 93       	st	X, r24
    43aa:	4e c0       	rjmp	.+156    	; 0x4448 <DIO_enumSetPinConfig+0x676>
				break;
				case DIO_enumInputInternalPU:
				CLR_BIT(DDRD,Copy_enumPinNum);
    43ac:	a1 e3       	ldi	r26, 0x31	; 49
    43ae:	b0 e0       	ldi	r27, 0x00	; 0
    43b0:	e1 e3       	ldi	r30, 0x31	; 49
    43b2:	f0 e0       	ldi	r31, 0x00	; 0
    43b4:	80 81       	ld	r24, Z
    43b6:	48 2f       	mov	r20, r24
    43b8:	8b 81       	ldd	r24, Y+3	; 0x03
    43ba:	28 2f       	mov	r18, r24
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	02 c0       	rjmp	.+4      	; 0x43c8 <DIO_enumSetPinConfig+0x5f6>
    43c4:	88 0f       	add	r24, r24
    43c6:	99 1f       	adc	r25, r25
    43c8:	2a 95       	dec	r18
    43ca:	e2 f7       	brpl	.-8      	; 0x43c4 <DIO_enumSetPinConfig+0x5f2>
    43cc:	80 95       	com	r24
    43ce:	84 23       	and	r24, r20
    43d0:	8c 93       	st	X, r24
				SET_BIT(PORTD,Copy_enumPinNum);
    43d2:	a2 e3       	ldi	r26, 0x32	; 50
    43d4:	b0 e0       	ldi	r27, 0x00	; 0
    43d6:	e2 e3       	ldi	r30, 0x32	; 50
    43d8:	f0 e0       	ldi	r31, 0x00	; 0
    43da:	80 81       	ld	r24, Z
    43dc:	48 2f       	mov	r20, r24
    43de:	8b 81       	ldd	r24, Y+3	; 0x03
    43e0:	28 2f       	mov	r18, r24
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	02 2e       	mov	r0, r18
    43ea:	02 c0       	rjmp	.+4      	; 0x43f0 <DIO_enumSetPinConfig+0x61e>
    43ec:	88 0f       	add	r24, r24
    43ee:	99 1f       	adc	r25, r25
    43f0:	0a 94       	dec	r0
    43f2:	e2 f7       	brpl	.-8      	; 0x43ec <DIO_enumSetPinConfig+0x61a>
    43f4:	84 2b       	or	r24, r20
    43f6:	8c 93       	st	X, r24
    43f8:	27 c0       	rjmp	.+78     	; 0x4448 <DIO_enumSetPinConfig+0x676>
				break;
				case DIO_enumInputExternalPD:
				CLR_BIT(DDRD,Copy_enumPinNum);
    43fa:	a1 e3       	ldi	r26, 0x31	; 49
    43fc:	b0 e0       	ldi	r27, 0x00	; 0
    43fe:	e1 e3       	ldi	r30, 0x31	; 49
    4400:	f0 e0       	ldi	r31, 0x00	; 0
    4402:	80 81       	ld	r24, Z
    4404:	48 2f       	mov	r20, r24
    4406:	8b 81       	ldd	r24, Y+3	; 0x03
    4408:	28 2f       	mov	r18, r24
    440a:	30 e0       	ldi	r19, 0x00	; 0
    440c:	81 e0       	ldi	r24, 0x01	; 1
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	02 c0       	rjmp	.+4      	; 0x4416 <DIO_enumSetPinConfig+0x644>
    4412:	88 0f       	add	r24, r24
    4414:	99 1f       	adc	r25, r25
    4416:	2a 95       	dec	r18
    4418:	e2 f7       	brpl	.-8      	; 0x4412 <DIO_enumSetPinConfig+0x640>
    441a:	80 95       	com	r24
    441c:	84 23       	and	r24, r20
    441e:	8c 93       	st	X, r24
				CLR_BIT(PORTD,Copy_enumPinNum);
    4420:	a2 e3       	ldi	r26, 0x32	; 50
    4422:	b0 e0       	ldi	r27, 0x00	; 0
    4424:	e2 e3       	ldi	r30, 0x32	; 50
    4426:	f0 e0       	ldi	r31, 0x00	; 0
    4428:	80 81       	ld	r24, Z
    442a:	48 2f       	mov	r20, r24
    442c:	8b 81       	ldd	r24, Y+3	; 0x03
    442e:	28 2f       	mov	r18, r24
    4430:	30 e0       	ldi	r19, 0x00	; 0
    4432:	81 e0       	ldi	r24, 0x01	; 1
    4434:	90 e0       	ldi	r25, 0x00	; 0
    4436:	02 2e       	mov	r0, r18
    4438:	02 c0       	rjmp	.+4      	; 0x443e <DIO_enumSetPinConfig+0x66c>
    443a:	88 0f       	add	r24, r24
    443c:	99 1f       	adc	r25, r25
    443e:	0a 94       	dec	r0
    4440:	e2 f7       	brpl	.-8      	; 0x443a <DIO_enumSetPinConfig+0x668>
    4442:	80 95       	com	r24
    4444:	84 23       	and	r24, r20
    4446:	8c 93       	st	X, r24

			default:
			break;
		}
	}
	return Ret_enumErrorStatus;	
    4448:	89 81       	ldd	r24, Y+1	; 0x01
}
    444a:	2e 96       	adiw	r28, 0x0e	; 14
    444c:	0f b6       	in	r0, 0x3f	; 63
    444e:	f8 94       	cli
    4450:	de bf       	out	0x3e, r29	; 62
    4452:	0f be       	out	0x3f, r0	; 63
    4454:	cd bf       	out	0x3d, r28	; 61
    4456:	cf 91       	pop	r28
    4458:	df 91       	pop	r29
    445a:	08 95       	ret

0000445c <DIO_enumSetPortConfig>:
/**
 *@brief  : Function to Configure the whole Port(8 pins) at one time to be INPUT or OUTPUT port.
 *@param  : Port Number,Configuration type(Input/Output).
 *@return : Error State                                                                      
 */
DIO_enumError_t DIO_enumSetPortConfig(DIO_enumPorts_t Copy_enumPortNum,DIO_enumConfig_t Copy_enumConfig){
    445c:	df 93       	push	r29
    445e:	cf 93       	push	r28
    4460:	cd b7       	in	r28, 0x3d	; 61
    4462:	de b7       	in	r29, 0x3e	; 62
    4464:	2d 97       	sbiw	r28, 0x0d	; 13
    4466:	0f b6       	in	r0, 0x3f	; 63
    4468:	f8 94       	cli
    446a:	de bf       	out	0x3e, r29	; 62
    446c:	0f be       	out	0x3f, r0	; 63
    446e:	cd bf       	out	0x3d, r28	; 61
    4470:	8a 83       	std	Y+2, r24	; 0x02
    4472:	6b 83       	std	Y+3, r22	; 0x03
	DIO_enumError_t Ret_enumErrorStatus = DIO_enumNOk;
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_enumPortNum>DIO_enumPortD)
    4478:	8a 81       	ldd	r24, Y+2	; 0x02
    447a:	84 30       	cpi	r24, 0x04	; 4
    447c:	18 f0       	brcs	.+6      	; 0x4484 <DIO_enumSetPortConfig+0x28>
	{
		Ret_enumErrorStatus = DIO_enumWrongPort;
    447e:	83 e0       	ldi	r24, 0x03	; 3
    4480:	89 83       	std	Y+1, r24	; 0x01
    4482:	24 c1       	rjmp	.+584    	; 0x46cc <DIO_enumSetPortConfig+0x270>
	}
	else if(Copy_enumConfig>DIO_enumInputExternalPD)
    4484:	8b 81       	ldd	r24, Y+3	; 0x03
    4486:	84 30       	cpi	r24, 0x04	; 4
    4488:	18 f0       	brcs	.+6      	; 0x4490 <DIO_enumSetPortConfig+0x34>
	{
		Ret_enumErrorStatus = DIO_enumWrongConfig;
    448a:	85 e0       	ldi	r24, 0x05	; 5
    448c:	89 83       	std	Y+1, r24	; 0x01
    448e:	1e c1       	rjmp	.+572    	; 0x46cc <DIO_enumSetPortConfig+0x270>
	}
	else
	{
		Ret_enumErrorStatus = DIO_enumOk;
    4490:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_enumPortNum)
    4492:	8a 81       	ldd	r24, Y+2	; 0x02
    4494:	28 2f       	mov	r18, r24
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	3d 87       	std	Y+13, r19	; 0x0d
    449a:	2c 87       	std	Y+12, r18	; 0x0c
    449c:	8c 85       	ldd	r24, Y+12	; 0x0c
    449e:	9d 85       	ldd	r25, Y+13	; 0x0d
    44a0:	81 30       	cpi	r24, 0x01	; 1
    44a2:	91 05       	cpc	r25, r1
    44a4:	09 f4       	brne	.+2      	; 0x44a8 <DIO_enumSetPortConfig+0x4c>
    44a6:	56 c0       	rjmp	.+172    	; 0x4554 <DIO_enumSetPortConfig+0xf8>
    44a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    44aa:	3d 85       	ldd	r19, Y+13	; 0x0d
    44ac:	22 30       	cpi	r18, 0x02	; 2
    44ae:	31 05       	cpc	r19, r1
    44b0:	2c f4       	brge	.+10     	; 0x44bc <DIO_enumSetPortConfig+0x60>
    44b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    44b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    44b6:	00 97       	sbiw	r24, 0x00	; 0
    44b8:	71 f0       	breq	.+28     	; 0x44d6 <DIO_enumSetPortConfig+0x7a>
    44ba:	08 c1       	rjmp	.+528    	; 0x46cc <DIO_enumSetPortConfig+0x270>
    44bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    44be:	3d 85       	ldd	r19, Y+13	; 0x0d
    44c0:	22 30       	cpi	r18, 0x02	; 2
    44c2:	31 05       	cpc	r19, r1
    44c4:	09 f4       	brne	.+2      	; 0x44c8 <DIO_enumSetPortConfig+0x6c>
    44c6:	85 c0       	rjmp	.+266    	; 0x45d2 <DIO_enumSetPortConfig+0x176>
    44c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    44ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    44cc:	83 30       	cpi	r24, 0x03	; 3
    44ce:	91 05       	cpc	r25, r1
    44d0:	09 f4       	brne	.+2      	; 0x44d4 <DIO_enumSetPortConfig+0x78>
    44d2:	be c0       	rjmp	.+380    	; 0x4650 <DIO_enumSetPortConfig+0x1f4>
    44d4:	fb c0       	rjmp	.+502    	; 0x46cc <DIO_enumSetPortConfig+0x270>
		{
			case DIO_enumPortA:
			switch(Copy_enumConfig)
    44d6:	8b 81       	ldd	r24, Y+3	; 0x03
    44d8:	28 2f       	mov	r18, r24
    44da:	30 e0       	ldi	r19, 0x00	; 0
    44dc:	3b 87       	std	Y+11, r19	; 0x0b
    44de:	2a 87       	std	Y+10, r18	; 0x0a
    44e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    44e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    44e4:	81 30       	cpi	r24, 0x01	; 1
    44e6:	91 05       	cpc	r25, r1
    44e8:	e9 f0       	breq	.+58     	; 0x4524 <DIO_enumSetPortConfig+0xc8>
    44ea:	2a 85       	ldd	r18, Y+10	; 0x0a
    44ec:	3b 85       	ldd	r19, Y+11	; 0x0b
    44ee:	22 30       	cpi	r18, 0x02	; 2
    44f0:	31 05       	cpc	r19, r1
    44f2:	2c f4       	brge	.+10     	; 0x44fe <DIO_enumSetPortConfig+0xa2>
    44f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    44f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    44f8:	00 97       	sbiw	r24, 0x00	; 0
    44fa:	61 f0       	breq	.+24     	; 0x4514 <DIO_enumSetPortConfig+0xb8>
    44fc:	e7 c0       	rjmp	.+462    	; 0x46cc <DIO_enumSetPortConfig+0x270>
    44fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    4500:	3b 85       	ldd	r19, Y+11	; 0x0b
    4502:	22 30       	cpi	r18, 0x02	; 2
    4504:	31 05       	cpc	r19, r1
    4506:	b9 f0       	breq	.+46     	; 0x4536 <DIO_enumSetPortConfig+0xda>
    4508:	8a 85       	ldd	r24, Y+10	; 0x0a
    450a:	9b 85       	ldd	r25, Y+11	; 0x0b
    450c:	83 30       	cpi	r24, 0x03	; 3
    450e:	91 05       	cpc	r25, r1
    4510:	d1 f0       	breq	.+52     	; 0x4546 <DIO_enumSetPortConfig+0xea>
    4512:	dc c0       	rjmp	.+440    	; 0x46cc <DIO_enumSetPortConfig+0x270>
			{
				case DIO_enumOutputLOW:
				DDRA = 0xFF;
    4514:	ea e3       	ldi	r30, 0x3A	; 58
    4516:	f0 e0       	ldi	r31, 0x00	; 0
    4518:	8f ef       	ldi	r24, 0xFF	; 255
    451a:	80 83       	st	Z, r24
				PORTA = 0X00;
    451c:	eb e3       	ldi	r30, 0x3B	; 59
    451e:	f0 e0       	ldi	r31, 0x00	; 0
    4520:	10 82       	st	Z, r1
    4522:	d4 c0       	rjmp	.+424    	; 0x46cc <DIO_enumSetPortConfig+0x270>
				break;
				case DIO_enumOutputHIGH:
				DDRA  = 0xFF;
    4524:	ea e3       	ldi	r30, 0x3A	; 58
    4526:	f0 e0       	ldi	r31, 0x00	; 0
    4528:	8f ef       	ldi	r24, 0xFF	; 255
    452a:	80 83       	st	Z, r24
				PORTA = 0Xff;
    452c:	eb e3       	ldi	r30, 0x3B	; 59
    452e:	f0 e0       	ldi	r31, 0x00	; 0
    4530:	8f ef       	ldi	r24, 0xFF	; 255
    4532:	80 83       	st	Z, r24
    4534:	cb c0       	rjmp	.+406    	; 0x46cc <DIO_enumSetPortConfig+0x270>
				break;
				case DIO_enumInputInternalPU:
				DDRA  = 0x00;
    4536:	ea e3       	ldi	r30, 0x3A	; 58
    4538:	f0 e0       	ldi	r31, 0x00	; 0
    453a:	10 82       	st	Z, r1
				PORTA = 0xff;
    453c:	eb e3       	ldi	r30, 0x3B	; 59
    453e:	f0 e0       	ldi	r31, 0x00	; 0
    4540:	8f ef       	ldi	r24, 0xFF	; 255
    4542:	80 83       	st	Z, r24
    4544:	c3 c0       	rjmp	.+390    	; 0x46cc <DIO_enumSetPortConfig+0x270>
				break;
				case DIO_enumInputExternalPD:
				DDRA  = 0x00;
    4546:	ea e3       	ldi	r30, 0x3A	; 58
    4548:	f0 e0       	ldi	r31, 0x00	; 0
    454a:	10 82       	st	Z, r1
				PORTA = 0x00;
    454c:	eb e3       	ldi	r30, 0x3B	; 59
    454e:	f0 e0       	ldi	r31, 0x00	; 0
    4550:	10 82       	st	Z, r1
    4552:	bc c0       	rjmp	.+376    	; 0x46cc <DIO_enumSetPortConfig+0x270>
				break;
			}
			break;

			case DIO_enumPortB:
			switch(Copy_enumConfig)
    4554:	8b 81       	ldd	r24, Y+3	; 0x03
    4556:	28 2f       	mov	r18, r24
    4558:	30 e0       	ldi	r19, 0x00	; 0
    455a:	39 87       	std	Y+9, r19	; 0x09
    455c:	28 87       	std	Y+8, r18	; 0x08
    455e:	88 85       	ldd	r24, Y+8	; 0x08
    4560:	99 85       	ldd	r25, Y+9	; 0x09
    4562:	81 30       	cpi	r24, 0x01	; 1
    4564:	91 05       	cpc	r25, r1
    4566:	e9 f0       	breq	.+58     	; 0x45a2 <DIO_enumSetPortConfig+0x146>
    4568:	28 85       	ldd	r18, Y+8	; 0x08
    456a:	39 85       	ldd	r19, Y+9	; 0x09
    456c:	22 30       	cpi	r18, 0x02	; 2
    456e:	31 05       	cpc	r19, r1
    4570:	2c f4       	brge	.+10     	; 0x457c <DIO_enumSetPortConfig+0x120>
    4572:	88 85       	ldd	r24, Y+8	; 0x08
    4574:	99 85       	ldd	r25, Y+9	; 0x09
    4576:	00 97       	sbiw	r24, 0x00	; 0
    4578:	61 f0       	breq	.+24     	; 0x4592 <DIO_enumSetPortConfig+0x136>
    457a:	a8 c0       	rjmp	.+336    	; 0x46cc <DIO_enumSetPortConfig+0x270>
    457c:	28 85       	ldd	r18, Y+8	; 0x08
    457e:	39 85       	ldd	r19, Y+9	; 0x09
    4580:	22 30       	cpi	r18, 0x02	; 2
    4582:	31 05       	cpc	r19, r1
    4584:	b9 f0       	breq	.+46     	; 0x45b4 <DIO_enumSetPortConfig+0x158>
    4586:	88 85       	ldd	r24, Y+8	; 0x08
    4588:	99 85       	ldd	r25, Y+9	; 0x09
    458a:	83 30       	cpi	r24, 0x03	; 3
    458c:	91 05       	cpc	r25, r1
    458e:	d1 f0       	breq	.+52     	; 0x45c4 <DIO_enumSetPortConfig+0x168>
    4590:	9d c0       	rjmp	.+314    	; 0x46cc <DIO_enumSetPortConfig+0x270>
			{
				case DIO_enumOutputLOW:
				DDRB = 0xff;
    4592:	e7 e3       	ldi	r30, 0x37	; 55
    4594:	f0 e0       	ldi	r31, 0x00	; 0
    4596:	8f ef       	ldi	r24, 0xFF	; 255
    4598:	80 83       	st	Z, r24
				PORTB = 0X00;
    459a:	e8 e3       	ldi	r30, 0x38	; 56
    459c:	f0 e0       	ldi	r31, 0x00	; 0
    459e:	10 82       	st	Z, r1
    45a0:	95 c0       	rjmp	.+298    	; 0x46cc <DIO_enumSetPortConfig+0x270>
				break;
				case DIO_enumOutputHIGH:
				DDRB = 0xff;
    45a2:	e7 e3       	ldi	r30, 0x37	; 55
    45a4:	f0 e0       	ldi	r31, 0x00	; 0
    45a6:	8f ef       	ldi	r24, 0xFF	; 255
    45a8:	80 83       	st	Z, r24
				PORTB = 0XFF;
    45aa:	e8 e3       	ldi	r30, 0x38	; 56
    45ac:	f0 e0       	ldi	r31, 0x00	; 0
    45ae:	8f ef       	ldi	r24, 0xFF	; 255
    45b0:	80 83       	st	Z, r24
    45b2:	8c c0       	rjmp	.+280    	; 0x46cc <DIO_enumSetPortConfig+0x270>
				break;
				case DIO_enumInputInternalPU:
				DDRB  = 0x00;
    45b4:	e7 e3       	ldi	r30, 0x37	; 55
    45b6:	f0 e0       	ldi	r31, 0x00	; 0
    45b8:	10 82       	st	Z, r1
				PORTB = 0xff;
    45ba:	e8 e3       	ldi	r30, 0x38	; 56
    45bc:	f0 e0       	ldi	r31, 0x00	; 0
    45be:	8f ef       	ldi	r24, 0xFF	; 255
    45c0:	80 83       	st	Z, r24
    45c2:	84 c0       	rjmp	.+264    	; 0x46cc <DIO_enumSetPortConfig+0x270>
				break;
				case DIO_enumInputExternalPD:
				DDRB  = 0x00;
    45c4:	e7 e3       	ldi	r30, 0x37	; 55
    45c6:	f0 e0       	ldi	r31, 0x00	; 0
    45c8:	10 82       	st	Z, r1
				PORTB = 0x00;
    45ca:	e8 e3       	ldi	r30, 0x38	; 56
    45cc:	f0 e0       	ldi	r31, 0x00	; 0
    45ce:	10 82       	st	Z, r1
    45d0:	7d c0       	rjmp	.+250    	; 0x46cc <DIO_enumSetPortConfig+0x270>
				break;
			}
			break;

			case DIO_enumPortC:
			switch(Copy_enumConfig)
    45d2:	8b 81       	ldd	r24, Y+3	; 0x03
    45d4:	28 2f       	mov	r18, r24
    45d6:	30 e0       	ldi	r19, 0x00	; 0
    45d8:	3f 83       	std	Y+7, r19	; 0x07
    45da:	2e 83       	std	Y+6, r18	; 0x06
    45dc:	8e 81       	ldd	r24, Y+6	; 0x06
    45de:	9f 81       	ldd	r25, Y+7	; 0x07
    45e0:	81 30       	cpi	r24, 0x01	; 1
    45e2:	91 05       	cpc	r25, r1
    45e4:	e9 f0       	breq	.+58     	; 0x4620 <DIO_enumSetPortConfig+0x1c4>
    45e6:	2e 81       	ldd	r18, Y+6	; 0x06
    45e8:	3f 81       	ldd	r19, Y+7	; 0x07
    45ea:	22 30       	cpi	r18, 0x02	; 2
    45ec:	31 05       	cpc	r19, r1
    45ee:	2c f4       	brge	.+10     	; 0x45fa <DIO_enumSetPortConfig+0x19e>
    45f0:	8e 81       	ldd	r24, Y+6	; 0x06
    45f2:	9f 81       	ldd	r25, Y+7	; 0x07
    45f4:	00 97       	sbiw	r24, 0x00	; 0
    45f6:	61 f0       	breq	.+24     	; 0x4610 <DIO_enumSetPortConfig+0x1b4>
    45f8:	69 c0       	rjmp	.+210    	; 0x46cc <DIO_enumSetPortConfig+0x270>
    45fa:	2e 81       	ldd	r18, Y+6	; 0x06
    45fc:	3f 81       	ldd	r19, Y+7	; 0x07
    45fe:	22 30       	cpi	r18, 0x02	; 2
    4600:	31 05       	cpc	r19, r1
    4602:	b9 f0       	breq	.+46     	; 0x4632 <DIO_enumSetPortConfig+0x1d6>
    4604:	8e 81       	ldd	r24, Y+6	; 0x06
    4606:	9f 81       	ldd	r25, Y+7	; 0x07
    4608:	83 30       	cpi	r24, 0x03	; 3
    460a:	91 05       	cpc	r25, r1
    460c:	d1 f0       	breq	.+52     	; 0x4642 <DIO_enumSetPortConfig+0x1e6>
    460e:	5e c0       	rjmp	.+188    	; 0x46cc <DIO_enumSetPortConfig+0x270>
			{
				case DIO_enumOutputLOW:
				DDRC = 0xff;
    4610:	e4 e3       	ldi	r30, 0x34	; 52
    4612:	f0 e0       	ldi	r31, 0x00	; 0
    4614:	8f ef       	ldi	r24, 0xFF	; 255
    4616:	80 83       	st	Z, r24
				PORTC = 0X00;
    4618:	e5 e3       	ldi	r30, 0x35	; 53
    461a:	f0 e0       	ldi	r31, 0x00	; 0
    461c:	10 82       	st	Z, r1
    461e:	56 c0       	rjmp	.+172    	; 0x46cc <DIO_enumSetPortConfig+0x270>
				break;
				case DIO_enumOutputHIGH:
				DDRC = 0xff;
    4620:	e4 e3       	ldi	r30, 0x34	; 52
    4622:	f0 e0       	ldi	r31, 0x00	; 0
    4624:	8f ef       	ldi	r24, 0xFF	; 255
    4626:	80 83       	st	Z, r24
				PORTC = 0XFF;
    4628:	e5 e3       	ldi	r30, 0x35	; 53
    462a:	f0 e0       	ldi	r31, 0x00	; 0
    462c:	8f ef       	ldi	r24, 0xFF	; 255
    462e:	80 83       	st	Z, r24
    4630:	4d c0       	rjmp	.+154    	; 0x46cc <DIO_enumSetPortConfig+0x270>
				break;
				case DIO_enumInputInternalPU:
				DDRC  = 0x00;
    4632:	e4 e3       	ldi	r30, 0x34	; 52
    4634:	f0 e0       	ldi	r31, 0x00	; 0
    4636:	10 82       	st	Z, r1
				PORTC = 0xff;
    4638:	e5 e3       	ldi	r30, 0x35	; 53
    463a:	f0 e0       	ldi	r31, 0x00	; 0
    463c:	8f ef       	ldi	r24, 0xFF	; 255
    463e:	80 83       	st	Z, r24
    4640:	45 c0       	rjmp	.+138    	; 0x46cc <DIO_enumSetPortConfig+0x270>
				break;
				case DIO_enumInputExternalPD:
				DDRC  = 0x00;
    4642:	e4 e3       	ldi	r30, 0x34	; 52
    4644:	f0 e0       	ldi	r31, 0x00	; 0
    4646:	10 82       	st	Z, r1
				PORTC = 0x00;
    4648:	e5 e3       	ldi	r30, 0x35	; 53
    464a:	f0 e0       	ldi	r31, 0x00	; 0
    464c:	10 82       	st	Z, r1
    464e:	3e c0       	rjmp	.+124    	; 0x46cc <DIO_enumSetPortConfig+0x270>
				break;
			}
			break;

			case DIO_enumPortD:
			switch(Copy_enumConfig)
    4650:	8b 81       	ldd	r24, Y+3	; 0x03
    4652:	28 2f       	mov	r18, r24
    4654:	30 e0       	ldi	r19, 0x00	; 0
    4656:	3d 83       	std	Y+5, r19	; 0x05
    4658:	2c 83       	std	Y+4, r18	; 0x04
    465a:	8c 81       	ldd	r24, Y+4	; 0x04
    465c:	9d 81       	ldd	r25, Y+5	; 0x05
    465e:	81 30       	cpi	r24, 0x01	; 1
    4660:	91 05       	cpc	r25, r1
    4662:	e9 f0       	breq	.+58     	; 0x469e <DIO_enumSetPortConfig+0x242>
    4664:	2c 81       	ldd	r18, Y+4	; 0x04
    4666:	3d 81       	ldd	r19, Y+5	; 0x05
    4668:	22 30       	cpi	r18, 0x02	; 2
    466a:	31 05       	cpc	r19, r1
    466c:	2c f4       	brge	.+10     	; 0x4678 <DIO_enumSetPortConfig+0x21c>
    466e:	8c 81       	ldd	r24, Y+4	; 0x04
    4670:	9d 81       	ldd	r25, Y+5	; 0x05
    4672:	00 97       	sbiw	r24, 0x00	; 0
    4674:	61 f0       	breq	.+24     	; 0x468e <DIO_enumSetPortConfig+0x232>
    4676:	2a c0       	rjmp	.+84     	; 0x46cc <DIO_enumSetPortConfig+0x270>
    4678:	2c 81       	ldd	r18, Y+4	; 0x04
    467a:	3d 81       	ldd	r19, Y+5	; 0x05
    467c:	22 30       	cpi	r18, 0x02	; 2
    467e:	31 05       	cpc	r19, r1
    4680:	b9 f0       	breq	.+46     	; 0x46b0 <DIO_enumSetPortConfig+0x254>
    4682:	8c 81       	ldd	r24, Y+4	; 0x04
    4684:	9d 81       	ldd	r25, Y+5	; 0x05
    4686:	83 30       	cpi	r24, 0x03	; 3
    4688:	91 05       	cpc	r25, r1
    468a:	d1 f0       	breq	.+52     	; 0x46c0 <DIO_enumSetPortConfig+0x264>
    468c:	1f c0       	rjmp	.+62     	; 0x46cc <DIO_enumSetPortConfig+0x270>
			{
				case DIO_enumOutputLOW:
				DDRD = 0xff;
    468e:	e1 e3       	ldi	r30, 0x31	; 49
    4690:	f0 e0       	ldi	r31, 0x00	; 0
    4692:	8f ef       	ldi	r24, 0xFF	; 255
    4694:	80 83       	st	Z, r24
				PORTD = 0X00;
    4696:	e2 e3       	ldi	r30, 0x32	; 50
    4698:	f0 e0       	ldi	r31, 0x00	; 0
    469a:	10 82       	st	Z, r1
    469c:	17 c0       	rjmp	.+46     	; 0x46cc <DIO_enumSetPortConfig+0x270>
				break;
				case DIO_enumOutputHIGH:
				DDRD = 0xff;
    469e:	e1 e3       	ldi	r30, 0x31	; 49
    46a0:	f0 e0       	ldi	r31, 0x00	; 0
    46a2:	8f ef       	ldi	r24, 0xFF	; 255
    46a4:	80 83       	st	Z, r24
				PORTD = 0XFF;
    46a6:	e2 e3       	ldi	r30, 0x32	; 50
    46a8:	f0 e0       	ldi	r31, 0x00	; 0
    46aa:	8f ef       	ldi	r24, 0xFF	; 255
    46ac:	80 83       	st	Z, r24
    46ae:	0e c0       	rjmp	.+28     	; 0x46cc <DIO_enumSetPortConfig+0x270>
				break;
				case DIO_enumInputInternalPU:
				DDRD  = 0x00;
    46b0:	e1 e3       	ldi	r30, 0x31	; 49
    46b2:	f0 e0       	ldi	r31, 0x00	; 0
    46b4:	10 82       	st	Z, r1
				PORTD = 0xff;
    46b6:	e2 e3       	ldi	r30, 0x32	; 50
    46b8:	f0 e0       	ldi	r31, 0x00	; 0
    46ba:	8f ef       	ldi	r24, 0xFF	; 255
    46bc:	80 83       	st	Z, r24
    46be:	06 c0       	rjmp	.+12     	; 0x46cc <DIO_enumSetPortConfig+0x270>
				break;
				case DIO_enumInputExternalPD:
				DDRD  = 0x00;
    46c0:	e1 e3       	ldi	r30, 0x31	; 49
    46c2:	f0 e0       	ldi	r31, 0x00	; 0
    46c4:	10 82       	st	Z, r1
				PORTD = 0x00;
    46c6:	e2 e3       	ldi	r30, 0x32	; 50
    46c8:	f0 e0       	ldi	r31, 0x00	; 0
    46ca:	10 82       	st	Z, r1

			default:
			break;
		}
	}
	return Ret_enumErrorStatus;	
    46cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    46ce:	2d 96       	adiw	r28, 0x0d	; 13
    46d0:	0f b6       	in	r0, 0x3f	; 63
    46d2:	f8 94       	cli
    46d4:	de bf       	out	0x3e, r29	; 62
    46d6:	0f be       	out	0x3f, r0	; 63
    46d8:	cd bf       	out	0x3d, r28	; 61
    46da:	cf 91       	pop	r28
    46dc:	df 91       	pop	r29
    46de:	08 95       	ret

000046e0 <DIO_enumSetPin>:
/**
 *@brief  : Function to Set the Pins to be Logic HIGH  or Logic LOW.
 *@param  : Port Number,Pin Number,Logic State(HIGH/LOW).
 *@return : Error State                                                                      
 */	
DIO_enumError_t DIO_enumSetPin(DIO_enumPorts_t Copy_enumPortNum,DIO_enumPins_t Copy_enumPinNum,LogicState_t Copy_enumLogicState){
    46e0:	df 93       	push	r29
    46e2:	cf 93       	push	r28
    46e4:	cd b7       	in	r28, 0x3d	; 61
    46e6:	de b7       	in	r29, 0x3e	; 62
    46e8:	2e 97       	sbiw	r28, 0x0e	; 14
    46ea:	0f b6       	in	r0, 0x3f	; 63
    46ec:	f8 94       	cli
    46ee:	de bf       	out	0x3e, r29	; 62
    46f0:	0f be       	out	0x3f, r0	; 63
    46f2:	cd bf       	out	0x3d, r28	; 61
    46f4:	8a 83       	std	Y+2, r24	; 0x02
    46f6:	6b 83       	std	Y+3, r22	; 0x03
    46f8:	4c 83       	std	Y+4, r20	; 0x04
	DIO_enumError_t RET_enuError = DIO_enumNOk;
    46fa:	81 e0       	ldi	r24, 0x01	; 1
    46fc:	89 83       	std	Y+1, r24	; 0x01
	
	/*Check on Port Number*/
	if(Copy_enumPortNum >DIO_enumPortD){
    46fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4700:	84 30       	cpi	r24, 0x04	; 4
    4702:	18 f0       	brcs	.+6      	; 0x470a <DIO_enumSetPin+0x2a>
		RET_enuError = DIO_enumWrongPort;
    4704:	83 e0       	ldi	r24, 0x03	; 3
    4706:	89 83       	std	Y+1, r24	; 0x01
    4708:	08 c1       	rjmp	.+528    	; 0x491a <DIO_enumSetPin+0x23a>
	/*Check on Pin Number*/
	}else if(Copy_enumPinNum >DIO_enumPin7){
    470a:	8b 81       	ldd	r24, Y+3	; 0x03
    470c:	88 30       	cpi	r24, 0x08	; 8
    470e:	18 f0       	brcs	.+6      	; 0x4716 <DIO_enumSetPin+0x36>
		RET_enuError = DIO_enumWrongPin;
    4710:	84 e0       	ldi	r24, 0x04	; 4
    4712:	89 83       	std	Y+1, r24	; 0x01
    4714:	02 c1       	rjmp	.+516    	; 0x491a <DIO_enumSetPin+0x23a>
	}else{
		RET_enuError = DIO_enumOk;
    4716:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_enumPortNum){
    4718:	8a 81       	ldd	r24, Y+2	; 0x02
    471a:	28 2f       	mov	r18, r24
    471c:	30 e0       	ldi	r19, 0x00	; 0
    471e:	3e 87       	std	Y+14, r19	; 0x0e
    4720:	2d 87       	std	Y+13, r18	; 0x0d
    4722:	8d 85       	ldd	r24, Y+13	; 0x0d
    4724:	9e 85       	ldd	r25, Y+14	; 0x0e
    4726:	81 30       	cpi	r24, 0x01	; 1
    4728:	91 05       	cpc	r25, r1
    472a:	09 f4       	brne	.+2      	; 0x472e <DIO_enumSetPin+0x4e>
    472c:	4f c0       	rjmp	.+158    	; 0x47cc <DIO_enumSetPin+0xec>
    472e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4730:	3e 85       	ldd	r19, Y+14	; 0x0e
    4732:	22 30       	cpi	r18, 0x02	; 2
    4734:	31 05       	cpc	r19, r1
    4736:	2c f4       	brge	.+10     	; 0x4742 <DIO_enumSetPin+0x62>
    4738:	8d 85       	ldd	r24, Y+13	; 0x0d
    473a:	9e 85       	ldd	r25, Y+14	; 0x0e
    473c:	00 97       	sbiw	r24, 0x00	; 0
    473e:	71 f0       	breq	.+28     	; 0x475c <DIO_enumSetPin+0x7c>
    4740:	ec c0       	rjmp	.+472    	; 0x491a <DIO_enumSetPin+0x23a>
    4742:	2d 85       	ldd	r18, Y+13	; 0x0d
    4744:	3e 85       	ldd	r19, Y+14	; 0x0e
    4746:	22 30       	cpi	r18, 0x02	; 2
    4748:	31 05       	cpc	r19, r1
    474a:	09 f4       	brne	.+2      	; 0x474e <DIO_enumSetPin+0x6e>
    474c:	77 c0       	rjmp	.+238    	; 0x483c <DIO_enumSetPin+0x15c>
    474e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4750:	9e 85       	ldd	r25, Y+14	; 0x0e
    4752:	83 30       	cpi	r24, 0x03	; 3
    4754:	91 05       	cpc	r25, r1
    4756:	09 f4       	brne	.+2      	; 0x475a <DIO_enumSetPin+0x7a>
    4758:	a9 c0       	rjmp	.+338    	; 0x48ac <DIO_enumSetPin+0x1cc>
    475a:	df c0       	rjmp	.+446    	; 0x491a <DIO_enumSetPin+0x23a>
		 case DIO_enumPortA:
		 /*Check on the values*/
		   switch(Copy_enumLogicState){
    475c:	8c 81       	ldd	r24, Y+4	; 0x04
    475e:	28 2f       	mov	r18, r24
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	3c 87       	std	Y+12, r19	; 0x0c
    4764:	2b 87       	std	Y+11, r18	; 0x0b
    4766:	8b 85       	ldd	r24, Y+11	; 0x0b
    4768:	9c 85       	ldd	r25, Y+12	; 0x0c
    476a:	00 97       	sbiw	r24, 0x00	; 0
    476c:	31 f0       	breq	.+12     	; 0x477a <DIO_enumSetPin+0x9a>
    476e:	2b 85       	ldd	r18, Y+11	; 0x0b
    4770:	3c 85       	ldd	r19, Y+12	; 0x0c
    4772:	21 30       	cpi	r18, 0x01	; 1
    4774:	31 05       	cpc	r19, r1
    4776:	b1 f0       	breq	.+44     	; 0x47a4 <DIO_enumSetPin+0xc4>
    4778:	d0 c0       	rjmp	.+416    	; 0x491a <DIO_enumSetPin+0x23a>
			   case LogicLow:
			   CLR_BIT(PORTA,Copy_enumPinNum);
    477a:	ab e3       	ldi	r26, 0x3B	; 59
    477c:	b0 e0       	ldi	r27, 0x00	; 0
    477e:	eb e3       	ldi	r30, 0x3B	; 59
    4780:	f0 e0       	ldi	r31, 0x00	; 0
    4782:	80 81       	ld	r24, Z
    4784:	48 2f       	mov	r20, r24
    4786:	8b 81       	ldd	r24, Y+3	; 0x03
    4788:	28 2f       	mov	r18, r24
    478a:	30 e0       	ldi	r19, 0x00	; 0
    478c:	81 e0       	ldi	r24, 0x01	; 1
    478e:	90 e0       	ldi	r25, 0x00	; 0
    4790:	02 2e       	mov	r0, r18
    4792:	02 c0       	rjmp	.+4      	; 0x4798 <DIO_enumSetPin+0xb8>
    4794:	88 0f       	add	r24, r24
    4796:	99 1f       	adc	r25, r25
    4798:	0a 94       	dec	r0
    479a:	e2 f7       	brpl	.-8      	; 0x4794 <DIO_enumSetPin+0xb4>
    479c:	80 95       	com	r24
    479e:	84 23       	and	r24, r20
    47a0:	8c 93       	st	X, r24
    47a2:	bb c0       	rjmp	.+374    	; 0x491a <DIO_enumSetPin+0x23a>
			   break;
			   case LogicHigh:
			   SET_BIT(PORTA,Copy_enumPinNum);
    47a4:	ab e3       	ldi	r26, 0x3B	; 59
    47a6:	b0 e0       	ldi	r27, 0x00	; 0
    47a8:	eb e3       	ldi	r30, 0x3B	; 59
    47aa:	f0 e0       	ldi	r31, 0x00	; 0
    47ac:	80 81       	ld	r24, Z
    47ae:	48 2f       	mov	r20, r24
    47b0:	8b 81       	ldd	r24, Y+3	; 0x03
    47b2:	28 2f       	mov	r18, r24
    47b4:	30 e0       	ldi	r19, 0x00	; 0
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	02 2e       	mov	r0, r18
    47bc:	02 c0       	rjmp	.+4      	; 0x47c2 <DIO_enumSetPin+0xe2>
    47be:	88 0f       	add	r24, r24
    47c0:	99 1f       	adc	r25, r25
    47c2:	0a 94       	dec	r0
    47c4:	e2 f7       	brpl	.-8      	; 0x47be <DIO_enumSetPin+0xde>
    47c6:	84 2b       	or	r24, r20
    47c8:	8c 93       	st	X, r24
    47ca:	a7 c0       	rjmp	.+334    	; 0x491a <DIO_enumSetPin+0x23a>
			   break;
		   }
		 break;
		 case DIO_enumPortB:
		 /*Check on the values*/
		  switch(Copy_enumLogicState){
    47cc:	8c 81       	ldd	r24, Y+4	; 0x04
    47ce:	28 2f       	mov	r18, r24
    47d0:	30 e0       	ldi	r19, 0x00	; 0
    47d2:	3a 87       	std	Y+10, r19	; 0x0a
    47d4:	29 87       	std	Y+9, r18	; 0x09
    47d6:	89 85       	ldd	r24, Y+9	; 0x09
    47d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    47da:	00 97       	sbiw	r24, 0x00	; 0
    47dc:	31 f0       	breq	.+12     	; 0x47ea <DIO_enumSetPin+0x10a>
    47de:	29 85       	ldd	r18, Y+9	; 0x09
    47e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    47e2:	21 30       	cpi	r18, 0x01	; 1
    47e4:	31 05       	cpc	r19, r1
    47e6:	b1 f0       	breq	.+44     	; 0x4814 <DIO_enumSetPin+0x134>
    47e8:	98 c0       	rjmp	.+304    	; 0x491a <DIO_enumSetPin+0x23a>
			  case LogicLow:
			  CLR_BIT(PORTB,Copy_enumPinNum);
    47ea:	a8 e3       	ldi	r26, 0x38	; 56
    47ec:	b0 e0       	ldi	r27, 0x00	; 0
    47ee:	e8 e3       	ldi	r30, 0x38	; 56
    47f0:	f0 e0       	ldi	r31, 0x00	; 0
    47f2:	80 81       	ld	r24, Z
    47f4:	48 2f       	mov	r20, r24
    47f6:	8b 81       	ldd	r24, Y+3	; 0x03
    47f8:	28 2f       	mov	r18, r24
    47fa:	30 e0       	ldi	r19, 0x00	; 0
    47fc:	81 e0       	ldi	r24, 0x01	; 1
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	02 2e       	mov	r0, r18
    4802:	02 c0       	rjmp	.+4      	; 0x4808 <DIO_enumSetPin+0x128>
    4804:	88 0f       	add	r24, r24
    4806:	99 1f       	adc	r25, r25
    4808:	0a 94       	dec	r0
    480a:	e2 f7       	brpl	.-8      	; 0x4804 <DIO_enumSetPin+0x124>
    480c:	80 95       	com	r24
    480e:	84 23       	and	r24, r20
    4810:	8c 93       	st	X, r24
    4812:	83 c0       	rjmp	.+262    	; 0x491a <DIO_enumSetPin+0x23a>
			  break;
			  case LogicHigh:
			  SET_BIT(PORTB,Copy_enumPinNum);
    4814:	a8 e3       	ldi	r26, 0x38	; 56
    4816:	b0 e0       	ldi	r27, 0x00	; 0
    4818:	e8 e3       	ldi	r30, 0x38	; 56
    481a:	f0 e0       	ldi	r31, 0x00	; 0
    481c:	80 81       	ld	r24, Z
    481e:	48 2f       	mov	r20, r24
    4820:	8b 81       	ldd	r24, Y+3	; 0x03
    4822:	28 2f       	mov	r18, r24
    4824:	30 e0       	ldi	r19, 0x00	; 0
    4826:	81 e0       	ldi	r24, 0x01	; 1
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	02 2e       	mov	r0, r18
    482c:	02 c0       	rjmp	.+4      	; 0x4832 <DIO_enumSetPin+0x152>
    482e:	88 0f       	add	r24, r24
    4830:	99 1f       	adc	r25, r25
    4832:	0a 94       	dec	r0
    4834:	e2 f7       	brpl	.-8      	; 0x482e <DIO_enumSetPin+0x14e>
    4836:	84 2b       	or	r24, r20
    4838:	8c 93       	st	X, r24
    483a:	6f c0       	rjmp	.+222    	; 0x491a <DIO_enumSetPin+0x23a>
			  break;
		  } 
		 break;
		 case DIO_enumPortC:
		 /*Check on the values*/
		  switch(Copy_enumLogicState){
    483c:	8c 81       	ldd	r24, Y+4	; 0x04
    483e:	28 2f       	mov	r18, r24
    4840:	30 e0       	ldi	r19, 0x00	; 0
    4842:	38 87       	std	Y+8, r19	; 0x08
    4844:	2f 83       	std	Y+7, r18	; 0x07
    4846:	8f 81       	ldd	r24, Y+7	; 0x07
    4848:	98 85       	ldd	r25, Y+8	; 0x08
    484a:	00 97       	sbiw	r24, 0x00	; 0
    484c:	31 f0       	breq	.+12     	; 0x485a <DIO_enumSetPin+0x17a>
    484e:	2f 81       	ldd	r18, Y+7	; 0x07
    4850:	38 85       	ldd	r19, Y+8	; 0x08
    4852:	21 30       	cpi	r18, 0x01	; 1
    4854:	31 05       	cpc	r19, r1
    4856:	b1 f0       	breq	.+44     	; 0x4884 <DIO_enumSetPin+0x1a4>
    4858:	60 c0       	rjmp	.+192    	; 0x491a <DIO_enumSetPin+0x23a>
			  case LogicLow:
			  CLR_BIT(PORTC,Copy_enumPinNum);
    485a:	a5 e3       	ldi	r26, 0x35	; 53
    485c:	b0 e0       	ldi	r27, 0x00	; 0
    485e:	e5 e3       	ldi	r30, 0x35	; 53
    4860:	f0 e0       	ldi	r31, 0x00	; 0
    4862:	80 81       	ld	r24, Z
    4864:	48 2f       	mov	r20, r24
    4866:	8b 81       	ldd	r24, Y+3	; 0x03
    4868:	28 2f       	mov	r18, r24
    486a:	30 e0       	ldi	r19, 0x00	; 0
    486c:	81 e0       	ldi	r24, 0x01	; 1
    486e:	90 e0       	ldi	r25, 0x00	; 0
    4870:	02 2e       	mov	r0, r18
    4872:	02 c0       	rjmp	.+4      	; 0x4878 <DIO_enumSetPin+0x198>
    4874:	88 0f       	add	r24, r24
    4876:	99 1f       	adc	r25, r25
    4878:	0a 94       	dec	r0
    487a:	e2 f7       	brpl	.-8      	; 0x4874 <DIO_enumSetPin+0x194>
    487c:	80 95       	com	r24
    487e:	84 23       	and	r24, r20
    4880:	8c 93       	st	X, r24
    4882:	4b c0       	rjmp	.+150    	; 0x491a <DIO_enumSetPin+0x23a>
			  break;
			  case LogicHigh:
			  SET_BIT(PORTC,Copy_enumPinNum);
    4884:	a5 e3       	ldi	r26, 0x35	; 53
    4886:	b0 e0       	ldi	r27, 0x00	; 0
    4888:	e5 e3       	ldi	r30, 0x35	; 53
    488a:	f0 e0       	ldi	r31, 0x00	; 0
    488c:	80 81       	ld	r24, Z
    488e:	48 2f       	mov	r20, r24
    4890:	8b 81       	ldd	r24, Y+3	; 0x03
    4892:	28 2f       	mov	r18, r24
    4894:	30 e0       	ldi	r19, 0x00	; 0
    4896:	81 e0       	ldi	r24, 0x01	; 1
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	02 2e       	mov	r0, r18
    489c:	02 c0       	rjmp	.+4      	; 0x48a2 <DIO_enumSetPin+0x1c2>
    489e:	88 0f       	add	r24, r24
    48a0:	99 1f       	adc	r25, r25
    48a2:	0a 94       	dec	r0
    48a4:	e2 f7       	brpl	.-8      	; 0x489e <DIO_enumSetPin+0x1be>
    48a6:	84 2b       	or	r24, r20
    48a8:	8c 93       	st	X, r24
    48aa:	37 c0       	rjmp	.+110    	; 0x491a <DIO_enumSetPin+0x23a>
			  break;
		  }
		 break;
		 case DIO_enumPortD:
		 /*Check on the values*/
		 switch(Copy_enumLogicState){
    48ac:	8c 81       	ldd	r24, Y+4	; 0x04
    48ae:	28 2f       	mov	r18, r24
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	3e 83       	std	Y+6, r19	; 0x06
    48b4:	2d 83       	std	Y+5, r18	; 0x05
    48b6:	8d 81       	ldd	r24, Y+5	; 0x05
    48b8:	9e 81       	ldd	r25, Y+6	; 0x06
    48ba:	00 97       	sbiw	r24, 0x00	; 0
    48bc:	31 f0       	breq	.+12     	; 0x48ca <DIO_enumSetPin+0x1ea>
    48be:	2d 81       	ldd	r18, Y+5	; 0x05
    48c0:	3e 81       	ldd	r19, Y+6	; 0x06
    48c2:	21 30       	cpi	r18, 0x01	; 1
    48c4:	31 05       	cpc	r19, r1
    48c6:	b1 f0       	breq	.+44     	; 0x48f4 <DIO_enumSetPin+0x214>
    48c8:	28 c0       	rjmp	.+80     	; 0x491a <DIO_enumSetPin+0x23a>
			 case LogicLow:
			 CLR_BIT(PORTD,Copy_enumPinNum);
    48ca:	a2 e3       	ldi	r26, 0x32	; 50
    48cc:	b0 e0       	ldi	r27, 0x00	; 0
    48ce:	e2 e3       	ldi	r30, 0x32	; 50
    48d0:	f0 e0       	ldi	r31, 0x00	; 0
    48d2:	80 81       	ld	r24, Z
    48d4:	48 2f       	mov	r20, r24
    48d6:	8b 81       	ldd	r24, Y+3	; 0x03
    48d8:	28 2f       	mov	r18, r24
    48da:	30 e0       	ldi	r19, 0x00	; 0
    48dc:	81 e0       	ldi	r24, 0x01	; 1
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	02 2e       	mov	r0, r18
    48e2:	02 c0       	rjmp	.+4      	; 0x48e8 <DIO_enumSetPin+0x208>
    48e4:	88 0f       	add	r24, r24
    48e6:	99 1f       	adc	r25, r25
    48e8:	0a 94       	dec	r0
    48ea:	e2 f7       	brpl	.-8      	; 0x48e4 <DIO_enumSetPin+0x204>
    48ec:	80 95       	com	r24
    48ee:	84 23       	and	r24, r20
    48f0:	8c 93       	st	X, r24
    48f2:	13 c0       	rjmp	.+38     	; 0x491a <DIO_enumSetPin+0x23a>
			 break;
			 case LogicHigh:
			 SET_BIT(PORTD,Copy_enumPinNum);
    48f4:	a2 e3       	ldi	r26, 0x32	; 50
    48f6:	b0 e0       	ldi	r27, 0x00	; 0
    48f8:	e2 e3       	ldi	r30, 0x32	; 50
    48fa:	f0 e0       	ldi	r31, 0x00	; 0
    48fc:	80 81       	ld	r24, Z
    48fe:	48 2f       	mov	r20, r24
    4900:	8b 81       	ldd	r24, Y+3	; 0x03
    4902:	28 2f       	mov	r18, r24
    4904:	30 e0       	ldi	r19, 0x00	; 0
    4906:	81 e0       	ldi	r24, 0x01	; 1
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	02 2e       	mov	r0, r18
    490c:	02 c0       	rjmp	.+4      	; 0x4912 <DIO_enumSetPin+0x232>
    490e:	88 0f       	add	r24, r24
    4910:	99 1f       	adc	r25, r25
    4912:	0a 94       	dec	r0
    4914:	e2 f7       	brpl	.-8      	; 0x490e <DIO_enumSetPin+0x22e>
    4916:	84 2b       	or	r24, r20
    4918:	8c 93       	st	X, r24
		 break;
		 default:
		 break;	
		}
	}
	return RET_enuError;
    491a:	89 81       	ldd	r24, Y+1	; 0x01
}
    491c:	2e 96       	adiw	r28, 0x0e	; 14
    491e:	0f b6       	in	r0, 0x3f	; 63
    4920:	f8 94       	cli
    4922:	de bf       	out	0x3e, r29	; 62
    4924:	0f be       	out	0x3f, r0	; 63
    4926:	cd bf       	out	0x3d, r28	; 61
    4928:	cf 91       	pop	r28
    492a:	df 91       	pop	r29
    492c:	08 95       	ret

0000492e <DIO_enumSetPort>:
/**
 *@brief : Function to Set the whole Port(8 pins) at one time to be Logic HIGH  or Logic LOW.
 *@param : Port Number,Logic State(HIGH/LOW).
 *@return: Error State.                                                                      
 */
DIO_enumError_t DIO_enumSetPort(DIO_enumPorts_t Copy_enumPortNum,u8 Copy_u8Value){
    492e:	df 93       	push	r29
    4930:	cf 93       	push	r28
    4932:	00 d0       	rcall	.+0      	; 0x4934 <DIO_enumSetPort+0x6>
    4934:	00 d0       	rcall	.+0      	; 0x4936 <DIO_enumSetPort+0x8>
    4936:	0f 92       	push	r0
    4938:	cd b7       	in	r28, 0x3d	; 61
    493a:	de b7       	in	r29, 0x3e	; 62
    493c:	8a 83       	std	Y+2, r24	; 0x02
    493e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_enumError_t RET_enuError = DIO_enumNOk;
    4940:	81 e0       	ldi	r24, 0x01	; 1
    4942:	89 83       	std	Y+1, r24	; 0x01
	/*Check on Port Number*/
	if(Copy_enumPortNum > DIO_enumPortD){
    4944:	8a 81       	ldd	r24, Y+2	; 0x02
    4946:	84 30       	cpi	r24, 0x04	; 4
    4948:	18 f0       	brcs	.+6      	; 0x4950 <DIO_enumSetPort+0x22>
		RET_enuError = DIO_enumWrongPort;
    494a:	83 e0       	ldi	r24, 0x03	; 3
    494c:	89 83       	std	Y+1, r24	; 0x01
    494e:	33 c0       	rjmp	.+102    	; 0x49b6 <DIO_enumSetPort+0x88>
	}else{
		RET_enuError=DIO_enumOk;
    4950:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_enumPortNum){
    4952:	8a 81       	ldd	r24, Y+2	; 0x02
    4954:	28 2f       	mov	r18, r24
    4956:	30 e0       	ldi	r19, 0x00	; 0
    4958:	3d 83       	std	Y+5, r19	; 0x05
    495a:	2c 83       	std	Y+4, r18	; 0x04
    495c:	8c 81       	ldd	r24, Y+4	; 0x04
    495e:	9d 81       	ldd	r25, Y+5	; 0x05
    4960:	81 30       	cpi	r24, 0x01	; 1
    4962:	91 05       	cpc	r25, r1
    4964:	d1 f0       	breq	.+52     	; 0x499a <DIO_enumSetPort+0x6c>
    4966:	2c 81       	ldd	r18, Y+4	; 0x04
    4968:	3d 81       	ldd	r19, Y+5	; 0x05
    496a:	22 30       	cpi	r18, 0x02	; 2
    496c:	31 05       	cpc	r19, r1
    496e:	2c f4       	brge	.+10     	; 0x497a <DIO_enumSetPort+0x4c>
    4970:	8c 81       	ldd	r24, Y+4	; 0x04
    4972:	9d 81       	ldd	r25, Y+5	; 0x05
    4974:	00 97       	sbiw	r24, 0x00	; 0
    4976:	61 f0       	breq	.+24     	; 0x4990 <DIO_enumSetPort+0x62>
    4978:	1e c0       	rjmp	.+60     	; 0x49b6 <DIO_enumSetPort+0x88>
    497a:	2c 81       	ldd	r18, Y+4	; 0x04
    497c:	3d 81       	ldd	r19, Y+5	; 0x05
    497e:	22 30       	cpi	r18, 0x02	; 2
    4980:	31 05       	cpc	r19, r1
    4982:	81 f0       	breq	.+32     	; 0x49a4 <DIO_enumSetPort+0x76>
    4984:	8c 81       	ldd	r24, Y+4	; 0x04
    4986:	9d 81       	ldd	r25, Y+5	; 0x05
    4988:	83 30       	cpi	r24, 0x03	; 3
    498a:	91 05       	cpc	r25, r1
    498c:	81 f0       	breq	.+32     	; 0x49ae <DIO_enumSetPort+0x80>
    498e:	13 c0       	rjmp	.+38     	; 0x49b6 <DIO_enumSetPort+0x88>
			case DIO_enumPortA:
			PORTA = Copy_u8Value;
    4990:	eb e3       	ldi	r30, 0x3B	; 59
    4992:	f0 e0       	ldi	r31, 0x00	; 0
    4994:	8b 81       	ldd	r24, Y+3	; 0x03
    4996:	80 83       	st	Z, r24
    4998:	0e c0       	rjmp	.+28     	; 0x49b6 <DIO_enumSetPort+0x88>
			break;
			case DIO_enumPortB:
			PORTB = Copy_u8Value;
    499a:	e8 e3       	ldi	r30, 0x38	; 56
    499c:	f0 e0       	ldi	r31, 0x00	; 0
    499e:	8b 81       	ldd	r24, Y+3	; 0x03
    49a0:	80 83       	st	Z, r24
    49a2:	09 c0       	rjmp	.+18     	; 0x49b6 <DIO_enumSetPort+0x88>
			break;
			case DIO_enumPortC:
			PORTC = Copy_u8Value;
    49a4:	e5 e3       	ldi	r30, 0x35	; 53
    49a6:	f0 e0       	ldi	r31, 0x00	; 0
    49a8:	8b 81       	ldd	r24, Y+3	; 0x03
    49aa:	80 83       	st	Z, r24
    49ac:	04 c0       	rjmp	.+8      	; 0x49b6 <DIO_enumSetPort+0x88>
			break;
			case DIO_enumPortD:
			PORTD = Copy_u8Value;
    49ae:	e2 e3       	ldi	r30, 0x32	; 50
    49b0:	f0 e0       	ldi	r31, 0x00	; 0
    49b2:	8b 81       	ldd	r24, Y+3	; 0x03
    49b4:	80 83       	st	Z, r24
			break;
			default:
			break;
		}
	}
	return RET_enuError;
    49b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    49b8:	0f 90       	pop	r0
    49ba:	0f 90       	pop	r0
    49bc:	0f 90       	pop	r0
    49be:	0f 90       	pop	r0
    49c0:	0f 90       	pop	r0
    49c2:	cf 91       	pop	r28
    49c4:	df 91       	pop	r29
    49c6:	08 95       	ret

000049c8 <DIO_enumReadState>:
/**
 *@brief  : Function to Read the Logic State of the Pin (Is it HIGH or LOW).
 *@param  : Port Number,Pin Number, Pointer points to unsigned char passed by address (to return the value of pin state).
 *@return : Error State                                                                     
 */
DIO_enumError_t DIO_enumReadState(DIO_enumPorts_t Copy_enumPortNum,DIO_enumPins_t Copy_enumPinNum,LogicState_t* Add_Pu8PinValue){
    49c8:	df 93       	push	r29
    49ca:	cf 93       	push	r28
    49cc:	cd b7       	in	r28, 0x3d	; 61
    49ce:	de b7       	in	r29, 0x3e	; 62
    49d0:	27 97       	sbiw	r28, 0x07	; 7
    49d2:	0f b6       	in	r0, 0x3f	; 63
    49d4:	f8 94       	cli
    49d6:	de bf       	out	0x3e, r29	; 62
    49d8:	0f be       	out	0x3f, r0	; 63
    49da:	cd bf       	out	0x3d, r28	; 61
    49dc:	8a 83       	std	Y+2, r24	; 0x02
    49de:	6b 83       	std	Y+3, r22	; 0x03
    49e0:	5d 83       	std	Y+5, r21	; 0x05
    49e2:	4c 83       	std	Y+4, r20	; 0x04
	DIO_enumError_t RET_enuError = DIO_enumNOk;
    49e4:	81 e0       	ldi	r24, 0x01	; 1
    49e6:	89 83       	std	Y+1, r24	; 0x01
	/*Check on Port Number*/
	if(Copy_enumPortNum > DIO_enumPortD){
    49e8:	8a 81       	ldd	r24, Y+2	; 0x02
    49ea:	84 30       	cpi	r24, 0x04	; 4
    49ec:	18 f0       	brcs	.+6      	; 0x49f4 <DIO_enumReadState+0x2c>
		RET_enuError = DIO_enumWrongPort;
    49ee:	83 e0       	ldi	r24, 0x03	; 3
    49f0:	89 83       	std	Y+1, r24	; 0x01
    49f2:	7e c0       	rjmp	.+252    	; 0x4af0 <DIO_enumReadState+0x128>
	/*Check on Pin Number*/
	}else if(Copy_enumPinNum > DIO_enumPin7){
    49f4:	8b 81       	ldd	r24, Y+3	; 0x03
    49f6:	88 30       	cpi	r24, 0x08	; 8
    49f8:	18 f0       	brcs	.+6      	; 0x4a00 <DIO_enumReadState+0x38>
		RET_enuError = DIO_enumWrongPin;
    49fa:	84 e0       	ldi	r24, 0x04	; 4
    49fc:	89 83       	std	Y+1, r24	; 0x01
    49fe:	78 c0       	rjmp	.+240    	; 0x4af0 <DIO_enumReadState+0x128>
	/*Check on pointer*/
	}else if(Add_Pu8PinValue == NULL){
    4a00:	8c 81       	ldd	r24, Y+4	; 0x04
    4a02:	9d 81       	ldd	r25, Y+5	; 0x05
    4a04:	00 97       	sbiw	r24, 0x00	; 0
    4a06:	19 f4       	brne	.+6      	; 0x4a0e <DIO_enumReadState+0x46>
		RET_enuError = DIO_enumNullPointer;
    4a08:	82 e0       	ldi	r24, 0x02	; 2
    4a0a:	89 83       	std	Y+1, r24	; 0x01
    4a0c:	71 c0       	rjmp	.+226    	; 0x4af0 <DIO_enumReadState+0x128>
	}else{
		RET_enuError = DIO_enumOk;
    4a0e:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_enumPortNum){
    4a10:	8a 81       	ldd	r24, Y+2	; 0x02
    4a12:	28 2f       	mov	r18, r24
    4a14:	30 e0       	ldi	r19, 0x00	; 0
    4a16:	3f 83       	std	Y+7, r19	; 0x07
    4a18:	2e 83       	std	Y+6, r18	; 0x06
    4a1a:	4e 81       	ldd	r20, Y+6	; 0x06
    4a1c:	5f 81       	ldd	r21, Y+7	; 0x07
    4a1e:	41 30       	cpi	r20, 0x01	; 1
    4a20:	51 05       	cpc	r21, r1
    4a22:	59 f1       	breq	.+86     	; 0x4a7a <DIO_enumReadState+0xb2>
    4a24:	8e 81       	ldd	r24, Y+6	; 0x06
    4a26:	9f 81       	ldd	r25, Y+7	; 0x07
    4a28:	82 30       	cpi	r24, 0x02	; 2
    4a2a:	91 05       	cpc	r25, r1
    4a2c:	34 f4       	brge	.+12     	; 0x4a3a <DIO_enumReadState+0x72>
    4a2e:	2e 81       	ldd	r18, Y+6	; 0x06
    4a30:	3f 81       	ldd	r19, Y+7	; 0x07
    4a32:	21 15       	cp	r18, r1
    4a34:	31 05       	cpc	r19, r1
    4a36:	69 f0       	breq	.+26     	; 0x4a52 <DIO_enumReadState+0x8a>
    4a38:	5b c0       	rjmp	.+182    	; 0x4af0 <DIO_enumReadState+0x128>
    4a3a:	4e 81       	ldd	r20, Y+6	; 0x06
    4a3c:	5f 81       	ldd	r21, Y+7	; 0x07
    4a3e:	42 30       	cpi	r20, 0x02	; 2
    4a40:	51 05       	cpc	r21, r1
    4a42:	79 f1       	breq	.+94     	; 0x4aa2 <DIO_enumReadState+0xda>
    4a44:	8e 81       	ldd	r24, Y+6	; 0x06
    4a46:	9f 81       	ldd	r25, Y+7	; 0x07
    4a48:	83 30       	cpi	r24, 0x03	; 3
    4a4a:	91 05       	cpc	r25, r1
    4a4c:	09 f4       	brne	.+2      	; 0x4a50 <DIO_enumReadState+0x88>
    4a4e:	3d c0       	rjmp	.+122    	; 0x4aca <DIO_enumReadState+0x102>
    4a50:	4f c0       	rjmp	.+158    	; 0x4af0 <DIO_enumReadState+0x128>
			case DIO_enumPortA:
			* Add_Pu8PinValue = GET_BIT(PINA,Copy_enumPinNum);
    4a52:	e9 e3       	ldi	r30, 0x39	; 57
    4a54:	f0 e0       	ldi	r31, 0x00	; 0
    4a56:	80 81       	ld	r24, Z
    4a58:	28 2f       	mov	r18, r24
    4a5a:	30 e0       	ldi	r19, 0x00	; 0
    4a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a5e:	88 2f       	mov	r24, r24
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	a9 01       	movw	r20, r18
    4a64:	02 c0       	rjmp	.+4      	; 0x4a6a <DIO_enumReadState+0xa2>
    4a66:	55 95       	asr	r21
    4a68:	47 95       	ror	r20
    4a6a:	8a 95       	dec	r24
    4a6c:	e2 f7       	brpl	.-8      	; 0x4a66 <DIO_enumReadState+0x9e>
    4a6e:	ca 01       	movw	r24, r20
    4a70:	81 70       	andi	r24, 0x01	; 1
    4a72:	ec 81       	ldd	r30, Y+4	; 0x04
    4a74:	fd 81       	ldd	r31, Y+5	; 0x05
    4a76:	80 83       	st	Z, r24
    4a78:	3b c0       	rjmp	.+118    	; 0x4af0 <DIO_enumReadState+0x128>
			break;
			case DIO_enumPortB:
			* Add_Pu8PinValue = GET_BIT(PINB,Copy_enumPinNum);
    4a7a:	e6 e3       	ldi	r30, 0x36	; 54
    4a7c:	f0 e0       	ldi	r31, 0x00	; 0
    4a7e:	80 81       	ld	r24, Z
    4a80:	28 2f       	mov	r18, r24
    4a82:	30 e0       	ldi	r19, 0x00	; 0
    4a84:	8b 81       	ldd	r24, Y+3	; 0x03
    4a86:	88 2f       	mov	r24, r24
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	a9 01       	movw	r20, r18
    4a8c:	02 c0       	rjmp	.+4      	; 0x4a92 <DIO_enumReadState+0xca>
    4a8e:	55 95       	asr	r21
    4a90:	47 95       	ror	r20
    4a92:	8a 95       	dec	r24
    4a94:	e2 f7       	brpl	.-8      	; 0x4a8e <DIO_enumReadState+0xc6>
    4a96:	ca 01       	movw	r24, r20
    4a98:	81 70       	andi	r24, 0x01	; 1
    4a9a:	ec 81       	ldd	r30, Y+4	; 0x04
    4a9c:	fd 81       	ldd	r31, Y+5	; 0x05
    4a9e:	80 83       	st	Z, r24
    4aa0:	27 c0       	rjmp	.+78     	; 0x4af0 <DIO_enumReadState+0x128>
			break;
			case DIO_enumPortC: 
			* Add_Pu8PinValue = GET_BIT(PINC,Copy_enumPinNum);
    4aa2:	e3 e3       	ldi	r30, 0x33	; 51
    4aa4:	f0 e0       	ldi	r31, 0x00	; 0
    4aa6:	80 81       	ld	r24, Z
    4aa8:	28 2f       	mov	r18, r24
    4aaa:	30 e0       	ldi	r19, 0x00	; 0
    4aac:	8b 81       	ldd	r24, Y+3	; 0x03
    4aae:	88 2f       	mov	r24, r24
    4ab0:	90 e0       	ldi	r25, 0x00	; 0
    4ab2:	a9 01       	movw	r20, r18
    4ab4:	02 c0       	rjmp	.+4      	; 0x4aba <DIO_enumReadState+0xf2>
    4ab6:	55 95       	asr	r21
    4ab8:	47 95       	ror	r20
    4aba:	8a 95       	dec	r24
    4abc:	e2 f7       	brpl	.-8      	; 0x4ab6 <DIO_enumReadState+0xee>
    4abe:	ca 01       	movw	r24, r20
    4ac0:	81 70       	andi	r24, 0x01	; 1
    4ac2:	ec 81       	ldd	r30, Y+4	; 0x04
    4ac4:	fd 81       	ldd	r31, Y+5	; 0x05
    4ac6:	80 83       	st	Z, r24
    4ac8:	13 c0       	rjmp	.+38     	; 0x4af0 <DIO_enumReadState+0x128>
			break;
			case DIO_enumPortD:
			* Add_Pu8PinValue = GET_BIT(PIND,Copy_enumPinNum);
    4aca:	e0 e3       	ldi	r30, 0x30	; 48
    4acc:	f0 e0       	ldi	r31, 0x00	; 0
    4ace:	80 81       	ld	r24, Z
    4ad0:	28 2f       	mov	r18, r24
    4ad2:	30 e0       	ldi	r19, 0x00	; 0
    4ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad6:	88 2f       	mov	r24, r24
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	a9 01       	movw	r20, r18
    4adc:	02 c0       	rjmp	.+4      	; 0x4ae2 <DIO_enumReadState+0x11a>
    4ade:	55 95       	asr	r21
    4ae0:	47 95       	ror	r20
    4ae2:	8a 95       	dec	r24
    4ae4:	e2 f7       	brpl	.-8      	; 0x4ade <DIO_enumReadState+0x116>
    4ae6:	ca 01       	movw	r24, r20
    4ae8:	81 70       	andi	r24, 0x01	; 1
    4aea:	ec 81       	ldd	r30, Y+4	; 0x04
    4aec:	fd 81       	ldd	r31, Y+5	; 0x05
    4aee:	80 83       	st	Z, r24
			break;
			default:
			break;
		}
	}
	return RET_enuError;
    4af0:	89 81       	ldd	r24, Y+1	; 0x01
}
    4af2:	27 96       	adiw	r28, 0x07	; 7
    4af4:	0f b6       	in	r0, 0x3f	; 63
    4af6:	f8 94       	cli
    4af8:	de bf       	out	0x3e, r29	; 62
    4afa:	0f be       	out	0x3f, r0	; 63
    4afc:	cd bf       	out	0x3d, r28	; 61
    4afe:	cf 91       	pop	r28
    4b00:	df 91       	pop	r29
    4b02:	08 95       	ret

00004b04 <__udivmodhi4>:
    4b04:	aa 1b       	sub	r26, r26
    4b06:	bb 1b       	sub	r27, r27
    4b08:	51 e1       	ldi	r21, 0x11	; 17
    4b0a:	07 c0       	rjmp	.+14     	; 0x4b1a <__udivmodhi4_ep>

00004b0c <__udivmodhi4_loop>:
    4b0c:	aa 1f       	adc	r26, r26
    4b0e:	bb 1f       	adc	r27, r27
    4b10:	a6 17       	cp	r26, r22
    4b12:	b7 07       	cpc	r27, r23
    4b14:	10 f0       	brcs	.+4      	; 0x4b1a <__udivmodhi4_ep>
    4b16:	a6 1b       	sub	r26, r22
    4b18:	b7 0b       	sbc	r27, r23

00004b1a <__udivmodhi4_ep>:
    4b1a:	88 1f       	adc	r24, r24
    4b1c:	99 1f       	adc	r25, r25
    4b1e:	5a 95       	dec	r21
    4b20:	a9 f7       	brne	.-22     	; 0x4b0c <__udivmodhi4_loop>
    4b22:	80 95       	com	r24
    4b24:	90 95       	com	r25
    4b26:	bc 01       	movw	r22, r24
    4b28:	cd 01       	movw	r24, r26
    4b2a:	08 95       	ret

00004b2c <__divmodhi4>:
    4b2c:	97 fb       	bst	r25, 7
    4b2e:	09 2e       	mov	r0, r25
    4b30:	07 26       	eor	r0, r23
    4b32:	0a d0       	rcall	.+20     	; 0x4b48 <__divmodhi4_neg1>
    4b34:	77 fd       	sbrc	r23, 7
    4b36:	04 d0       	rcall	.+8      	; 0x4b40 <__divmodhi4_neg2>
    4b38:	e5 df       	rcall	.-54     	; 0x4b04 <__udivmodhi4>
    4b3a:	06 d0       	rcall	.+12     	; 0x4b48 <__divmodhi4_neg1>
    4b3c:	00 20       	and	r0, r0
    4b3e:	1a f4       	brpl	.+6      	; 0x4b46 <__divmodhi4_exit>

00004b40 <__divmodhi4_neg2>:
    4b40:	70 95       	com	r23
    4b42:	61 95       	neg	r22
    4b44:	7f 4f       	sbci	r23, 0xFF	; 255

00004b46 <__divmodhi4_exit>:
    4b46:	08 95       	ret

00004b48 <__divmodhi4_neg1>:
    4b48:	f6 f7       	brtc	.-4      	; 0x4b46 <__divmodhi4_exit>
    4b4a:	90 95       	com	r25
    4b4c:	81 95       	neg	r24
    4b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    4b50:	08 95       	ret

00004b52 <__udivmodsi4>:
    4b52:	a1 e2       	ldi	r26, 0x21	; 33
    4b54:	1a 2e       	mov	r1, r26
    4b56:	aa 1b       	sub	r26, r26
    4b58:	bb 1b       	sub	r27, r27
    4b5a:	fd 01       	movw	r30, r26
    4b5c:	0d c0       	rjmp	.+26     	; 0x4b78 <__udivmodsi4_ep>

00004b5e <__udivmodsi4_loop>:
    4b5e:	aa 1f       	adc	r26, r26
    4b60:	bb 1f       	adc	r27, r27
    4b62:	ee 1f       	adc	r30, r30
    4b64:	ff 1f       	adc	r31, r31
    4b66:	a2 17       	cp	r26, r18
    4b68:	b3 07       	cpc	r27, r19
    4b6a:	e4 07       	cpc	r30, r20
    4b6c:	f5 07       	cpc	r31, r21
    4b6e:	20 f0       	brcs	.+8      	; 0x4b78 <__udivmodsi4_ep>
    4b70:	a2 1b       	sub	r26, r18
    4b72:	b3 0b       	sbc	r27, r19
    4b74:	e4 0b       	sbc	r30, r20
    4b76:	f5 0b       	sbc	r31, r21

00004b78 <__udivmodsi4_ep>:
    4b78:	66 1f       	adc	r22, r22
    4b7a:	77 1f       	adc	r23, r23
    4b7c:	88 1f       	adc	r24, r24
    4b7e:	99 1f       	adc	r25, r25
    4b80:	1a 94       	dec	r1
    4b82:	69 f7       	brne	.-38     	; 0x4b5e <__udivmodsi4_loop>
    4b84:	60 95       	com	r22
    4b86:	70 95       	com	r23
    4b88:	80 95       	com	r24
    4b8a:	90 95       	com	r25
    4b8c:	9b 01       	movw	r18, r22
    4b8e:	ac 01       	movw	r20, r24
    4b90:	bd 01       	movw	r22, r26
    4b92:	cf 01       	movw	r24, r30
    4b94:	08 95       	ret

00004b96 <__prologue_saves__>:
    4b96:	2f 92       	push	r2
    4b98:	3f 92       	push	r3
    4b9a:	4f 92       	push	r4
    4b9c:	5f 92       	push	r5
    4b9e:	6f 92       	push	r6
    4ba0:	7f 92       	push	r7
    4ba2:	8f 92       	push	r8
    4ba4:	9f 92       	push	r9
    4ba6:	af 92       	push	r10
    4ba8:	bf 92       	push	r11
    4baa:	cf 92       	push	r12
    4bac:	df 92       	push	r13
    4bae:	ef 92       	push	r14
    4bb0:	ff 92       	push	r15
    4bb2:	0f 93       	push	r16
    4bb4:	1f 93       	push	r17
    4bb6:	cf 93       	push	r28
    4bb8:	df 93       	push	r29
    4bba:	cd b7       	in	r28, 0x3d	; 61
    4bbc:	de b7       	in	r29, 0x3e	; 62
    4bbe:	ca 1b       	sub	r28, r26
    4bc0:	db 0b       	sbc	r29, r27
    4bc2:	0f b6       	in	r0, 0x3f	; 63
    4bc4:	f8 94       	cli
    4bc6:	de bf       	out	0x3e, r29	; 62
    4bc8:	0f be       	out	0x3f, r0	; 63
    4bca:	cd bf       	out	0x3d, r28	; 61
    4bcc:	09 94       	ijmp

00004bce <__epilogue_restores__>:
    4bce:	2a 88       	ldd	r2, Y+18	; 0x12
    4bd0:	39 88       	ldd	r3, Y+17	; 0x11
    4bd2:	48 88       	ldd	r4, Y+16	; 0x10
    4bd4:	5f 84       	ldd	r5, Y+15	; 0x0f
    4bd6:	6e 84       	ldd	r6, Y+14	; 0x0e
    4bd8:	7d 84       	ldd	r7, Y+13	; 0x0d
    4bda:	8c 84       	ldd	r8, Y+12	; 0x0c
    4bdc:	9b 84       	ldd	r9, Y+11	; 0x0b
    4bde:	aa 84       	ldd	r10, Y+10	; 0x0a
    4be0:	b9 84       	ldd	r11, Y+9	; 0x09
    4be2:	c8 84       	ldd	r12, Y+8	; 0x08
    4be4:	df 80       	ldd	r13, Y+7	; 0x07
    4be6:	ee 80       	ldd	r14, Y+6	; 0x06
    4be8:	fd 80       	ldd	r15, Y+5	; 0x05
    4bea:	0c 81       	ldd	r16, Y+4	; 0x04
    4bec:	1b 81       	ldd	r17, Y+3	; 0x03
    4bee:	aa 81       	ldd	r26, Y+2	; 0x02
    4bf0:	b9 81       	ldd	r27, Y+1	; 0x01
    4bf2:	ce 0f       	add	r28, r30
    4bf4:	d1 1d       	adc	r29, r1
    4bf6:	0f b6       	in	r0, 0x3f	; 63
    4bf8:	f8 94       	cli
    4bfa:	de bf       	out	0x3e, r29	; 62
    4bfc:	0f be       	out	0x3f, r0	; 63
    4bfe:	cd bf       	out	0x3d, r28	; 61
    4c00:	ed 01       	movw	r28, r26
    4c02:	08 95       	ret

00004c04 <_exit>:
    4c04:	f8 94       	cli

00004c06 <__stop_program>:
    4c06:	ff cf       	rjmp	.-2      	; 0x4c06 <__stop_program>
